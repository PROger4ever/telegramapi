// Code generated by tlc (github.com/andreyvit/telegramapi/tl/cmd/tlc). DO NOT EDIT.
package mtproto

import (
	"errors"
	"github.com/andreyvit/telegramapi/tl"
	"math/big"
	"time"
)

// from MTProto
const (
	TagResPQ                   uint32 = 0x05162463
	TagPQInnerData                    = 0x83c95aec
	TagServerDHParamsFail             = 0x79cb045d
	TagServerDHParamsOK               = 0xd0e8075c
	TagServerDHInnerData              = 0xb5890dba
	TagClientDHInnerData              = 0x6643b654
	TagDHGenOK                        = 0x3bcbf734
	TagDHGenRetry                     = 0x46dc1fb9
	TagDHGenFail                      = 0xa69dae02
	TagRPCResult                      = 0xf35c6d01
	TagRPCError                       = 0x2144ca19
	TagRPCAnswerUnknown               = 0x5e2ad36e
	TagRPCAnswerDroppedRunning        = 0xcd78e586
	TagRPCAnswerDropped               = 0xa43ad8b7
	TagFutureSalt                     = 0x0949d9dc
	TagFutureSalts                    = 0xae500895
	TagPong                           = 0x347773c5
	TagDestroySessionOK               = 0xe22045fc
	TagDestroySessionNone             = 0x62d350c9
	TagNewSessionCreated              = 0x9ec20908
	TagMsgContainer                   = 0x73f1f8dc
	TagProtoMessage                   = 0x5bb8e511
	TagMsgCopy                        = 0xe06046b2
	TagGzipPacked                     = 0x3072cfa1
	TagMsgsAck                        = 0x62d6b459
	TagBadMsgNotification             = 0xa7eff811
	TagBadServerSalt                  = 0xedab447b
	TagMsgResendReq                   = 0x7d861a08
	TagMsgsStateReq                   = 0xda69fb52
	TagMsgsStateInfo                  = 0x04deb57d
	TagMsgsAllInfo                    = 0x8cc0d131
	TagMsgDetailedInfo                = 0x276d3ec6
	TagMsgNewDetailedInfo             = 0x809db6df
	TagReqPQ                          = 0x60469778
	TagReqDHParams                    = 0xd712e4be
	TagSetClientDHParams              = 0xf5045f1f
	TagRPCDropAnswer                  = 0x58e4a740
	TagGetFutureSalts                 = 0xb921bd04
	TagPing                           = 0x7abe77ec
	TagPingDelayDisconnect            = 0xf3427b8c
	TagDestroySession                 = 0xe7512126
	TagHttpWait                       = 0x9299359f
)

// from Telegram
const (
	TagError                                  uint32 = 0xc4b9f9bb
	TagNull                                          = 0x56730bcc
	TagInputPeerEmpty                                = 0x7f3b18ea
	TagInputPeerSelf                                 = 0x7da07ec9
	TagInputPeerChat                                 = 0x179be863
	TagInputPeerUser                                 = 0x7b8e7de6
	TagInputPeerChannel                              = 0x20adaef8
	TagInputUserEmpty                                = 0xb98886cf
	TagInputUserSelf                                 = 0xf7c1b13f
	TagInputUser                                     = 0xd8292816
	TagInputPhoneContact                             = 0xf392b7f4
	TagInputFile                                     = 0xf52ff27f
	TagInputFileBig                                  = 0xfa4f0bb5
	TagInputMediaEmpty                               = 0x9664f57f
	TagInputMediaUploadedPhoto                       = 0x630c9af1
	TagInputMediaPhoto                               = 0xe9bfb4f3
	TagInputMediaGeoPoint                            = 0xf9c44144
	TagInputMediaContact                             = 0xa6e45987
	TagInputMediaUploadedDocument                    = 0xd070f1e9
	TagInputMediaUploadedThumbDocument               = 0x50d88cae
	TagInputMediaDocument                            = 0x1a77f29c
	TagInputMediaVenue                               = 0x2827a81a
	TagInputMediaGifExternal                         = 0x4843b0fd
	TagInputMediaPhotoExternal                       = 0xb55f4f18
	TagInputMediaDocumentExternal                    = 0xe5e9607c
	TagInputMediaGame                                = 0xd33f43f3
	TagInputMediaInvoice                             = 0x92153685
	TagInputChatPhotoEmpty                           = 0x1ca48f57
	TagInputChatUploadedPhoto                        = 0x927c55b4
	TagInputChatPhoto                                = 0x8953ad37
	TagInputGeoPointEmpty                            = 0xe4c123d6
	TagInputGeoPoint                                 = 0xf3b7acc9
	TagInputPhotoEmpty                               = 0x1cd7bf0d
	TagInputPhoto                                    = 0xfb95c6c4
	TagInputFileLocation                             = 0x14637196
	TagInputEncryptedFileLocation                    = 0xf5235d55
	TagInputDocumentFileLocation                     = 0x430f0724
	TagInputAppEvent                                 = 0x770656a8
	TagPeerUser                                      = 0x9db1bc6d
	TagPeerChat                                      = 0xbad0e5bb
	TagPeerChannel                                   = 0xbddde532
	TagStorageFileUnknown                            = 0xaa963b05
	TagStorageFilePartial                            = 0x40bc6f52
	TagStorageFileJpeg                               = 0x007efe0e
	TagStorageFileGif                                = 0xcae1aadf
	TagStorageFilePng                                = 0x0a4f63c0
	TagStorageFilePdf                                = 0xae1e508d
	TagStorageFileMp3                                = 0x528a0677
	TagStorageFileMov                                = 0x4b09ebbc
	TagStorageFileMp4                                = 0xb3cea0e4
	TagStorageFileWebp                               = 0x1081464c
	TagFileLocationUnavailable                       = 0x7c596b46
	TagFileLocation                                  = 0x53d69076
	TagUserEmpty                                     = 0x200250ba
	TagUser                                          = 0xd10d979a
	TagUserProfilePhotoEmpty                         = 0x4f11bae1
	TagUserProfilePhoto                              = 0xd559d8c8
	TagUserStatusEmpty                               = 0x09d05049
	TagUserStatusOnline                              = 0xedb93949
	TagUserStatusOffline                             = 0x008c703f
	TagUserStatusRecently                            = 0xe26f42f1
	TagUserStatusLastWeek                            = 0x07bf09fc
	TagUserStatusLastMonth                           = 0x77ebc742
	TagChatEmpty                                     = 0x9ba2d800
	TagChat                                          = 0xd91cdd54
	TagChatForbidden                                 = 0x07328bdb
	TagChannel                                       = 0xa14dca52
	TagChannelForbidden                              = 0x8537784f
	TagChatFull                                      = 0x2e02a614
	TagChannelFull                                   = 0xc3d5512f
	TagChatParticipant                               = 0xc8d7493e
	TagChatParticipantCreator                        = 0xda13538a
	TagChatParticipantAdmin                          = 0xe2d6e436
	TagChatParticipantsForbidden                     = 0xfc900c2b
	TagChatParticipants                              = 0x3f460fed
	TagChatPhotoEmpty                                = 0x37c1011c
	TagChatPhoto                                     = 0x6153276a
	TagMessageEmpty                                  = 0x83e5de54
	TagMessage                                       = 0xc09be45f
	TagMessageService                                = 0x9e19a1f6
	TagMessageMediaEmpty                             = 0x3ded6320
	TagMessageMediaPhoto                             = 0x3d8ce53d
	TagMessageMediaGeo                               = 0x56e0d474
	TagMessageMediaContact                           = 0x5e7d2f39
	TagMessageMediaUnsupported                       = 0x9f84f49e
	TagMessageMediaDocument                          = 0xf3e02ea8
	TagMessageMediaWebPage                           = 0xa32dd600
	TagMessageMediaVenue                             = 0x7912b71f
	TagMessageMediaGame                              = 0xfdb19008
	TagMessageMediaInvoice                           = 0x84551347
	TagMessageActionEmpty                            = 0xb6aef7b0
	TagMessageActionChatCreate                       = 0xa6638b9a
	TagMessageActionChatEditTitle                    = 0xb5a1ce5a
	TagMessageActionChatEditPhoto                    = 0x7fcb13a8
	TagMessageActionChatDeletePhoto                  = 0x95e3fbef
	TagMessageActionChatAddUser                      = 0x488a7337
	TagMessageActionChatDeleteUser                   = 0xb2ae9b0c
	TagMessageActionChatJoinedByLink                 = 0xf89cf5e8
	TagMessageActionChannelCreate                    = 0x95d2ac92
	TagMessageActionChatMigrateTo                    = 0x51bdb021
	TagMessageActionChannelMigrateFrom               = 0xb055eaee
	TagMessageActionPinMessage                       = 0x94bd38ed
	TagMessageActionHistoryClear                     = 0x9fbab604
	TagMessageActionGameScore                        = 0x92a72876
	TagMessageActionPaymentSentMe                    = 0x8f31b327
	TagMessageActionPaymentSent                      = 0x40699cd0
	TagMessageActionPhoneCall                        = 0x80e11a7f
	TagDialog                                        = 0x66ffba14
	TagPhotoEmpty                                    = 0x2331b22d
	TagPhoto                                         = 0x9288dd29
	TagPhotoSizeEmpty                                = 0x0e17e23c
	TagPhotoSize                                     = 0x77bfb61b
	TagPhotoCachedSize                               = 0xe9a734fa
	TagGeoPointEmpty                                 = 0x1117dd5f
	TagGeoPoint                                      = 0x2049d70c
	TagAuthCheckedPhone                              = 0x811ea28e
	TagAuthSentCode                                  = 0x5e002502
	TagAuthAuthorization                             = 0xcd050916
	TagAuthExportedAuthorization                     = 0xdf969c2d
	TagInputNotifyPeer                               = 0xb8bc5b0c
	TagInputNotifyUsers                              = 0x193b4417
	TagInputNotifyChats                              = 0x4a95e84e
	TagInputNotifyAll                                = 0xa429b886
	TagInputPeerNotifyEventsEmpty                    = 0xf03064d8
	TagInputPeerNotifyEventsAll                      = 0xe86a2c74
	TagInputPeerNotifySettings                       = 0x38935eb2
	TagPeerNotifyEventsEmpty                         = 0xadd53cb3
	TagPeerNotifyEventsAll                           = 0x6d1ded88
	TagPeerNotifySettingsEmpty                       = 0x70a68512
	TagPeerNotifySettings                            = 0x9acda4c0
	TagPeerSettings                                  = 0x818426cd
	TagWallPaper                                     = 0xccb03657
	TagWallPaperSolid                                = 0x63117f24
	TagInputReportReasonSpam                         = 0x58dbcab8
	TagInputReportReasonViolence                     = 0x1e22c78d
	TagInputReportReasonPornography                  = 0x2e59d922
	TagInputReportReasonOther                        = 0xe1746d0a
	TagUserFull                                      = 0x0f220f3f
	TagContact                                       = 0xf911c994
	TagImportedContact                               = 0xd0028438
	TagContactBlocked                                = 0x561bc879
	TagContactStatus                                 = 0xd3680c61
	TagContactsLink                                  = 0x3ace484c
	TagContactsContactsNotModified                   = 0xb74ba9d2
	TagContactsContacts                              = 0x6f8b8cb2
	TagContactsImportedContacts                      = 0xad524315
	TagContactsBlocked                               = 0x1c138d15
	TagContactsBlockedSlice                          = 0x900802a1
	TagMessagesDialogs                               = 0x15ba6c40
	TagMessagesDialogsSlice                          = 0x71e094f3
	TagMessagesMessages                              = 0x8c718e87
	TagMessagesMessagesSlice                         = 0x0b446ae3
	TagMessagesChannelMessages                       = 0x99262e37
	TagMessagesChats                                 = 0x64ff9fd5
	TagMessagesChatsSlice                            = 0x9cd81144
	TagMessagesChatFull                              = 0xe5d7d19c
	TagMessagesAffectedHistory                       = 0xb45c69d1
	TagInputMessagesFilterEmpty                      = 0x57e2f66c
	TagInputMessagesFilterPhotos                     = 0x9609a51c
	TagInputMessagesFilterVideo                      = 0x9fc00e65
	TagInputMessagesFilterPhotoVideo                 = 0x56e9f0e4
	TagInputMessagesFilterPhotoVideoDocuments        = 0xd95e73bb
	TagInputMessagesFilterDocument                   = 0x9eddf188
	TagInputMessagesFilterUrl                        = 0x7ef0dd87
	TagInputMessagesFilterGif                        = 0xffc86587
	TagInputMessagesFilterVoice                      = 0x50f5c392
	TagInputMessagesFilterMusic                      = 0x3751b49e
	TagInputMessagesFilterChatPhotos                 = 0x3a20ecb8
	TagInputMessagesFilterPhoneCalls                 = 0x80c99768
	TagUpdateNewMessage                              = 0x1f2b0afd
	TagUpdateMessageID                               = 0x4e90bfd6
	TagUpdateDeleteMessages                          = 0xa20db0e5
	TagUpdateUserTyping                              = 0x5c486927
	TagUpdateChatUserTyping                          = 0x9a65ea1f
	TagUpdateChatParticipants                        = 0x07761198
	TagUpdateUserStatus                              = 0x1bfbd823
	TagUpdateUserName                                = 0xa7332b73
	TagUpdateUserPhoto                               = 0x95313b0c
	TagUpdateContactRegistered                       = 0x2575bbb9
	TagUpdateContactLink                             = 0x9d2e67c5
	TagUpdateNewEncryptedMessage                     = 0x12bcbd9a
	TagUpdateEncryptedChatTyping                     = 0x1710f156
	TagUpdateEncryption                              = 0xb4a2e88d
	TagUpdateEncryptedMessagesRead                   = 0x38fe25b7
	TagUpdateChatParticipantAdd                      = 0xea4b0e5c
	TagUpdateChatParticipantDelete                   = 0x6e5f8c22
	TagUpdateDCOptions                               = 0x8e5e9873
	TagUpdateUserBlocked                             = 0x80ece81a
	TagUpdateNotifySettings                          = 0xbec268ef
	TagUpdateServiceNotification                     = 0xebe46819
	TagUpdatePrivacy                                 = 0xee3b272a
	TagUpdateUserPhone                               = 0x12b9417b
	TagUpdateReadHistoryInbox                        = 0x9961fd5c
	TagUpdateReadHistoryOutbox                       = 0x2f2f21bf
	TagUpdateWebPage                                 = 0x7f891213
	TagUpdateReadMessagesContents                    = 0x68c13933
	TagUpdateChannelTooLong                          = 0xeb0467fb
	TagUpdateChannel                                 = 0xb6d45656
	TagUpdateNewChannelMessage                       = 0x62ba04d9
	TagUpdateReadChannelInbox                        = 0x4214f37f
	TagUpdateDeleteChannelMessages                   = 0xc37521c9
	TagUpdateChannelMessageViews                     = 0x98a12b4b
	TagUpdateChatAdmins                              = 0x6e947941
	TagUpdateChatParticipantAdmin                    = 0xb6901959
	TagUpdateNewStickerSet                           = 0x688a30aa
	TagUpdateStickerSetsOrder                        = 0x0bb2d201
	TagUpdateStickerSets                             = 0x43ae3dec
	TagUpdateSavedGifs                               = 0x9375341e
	TagUpdateBotInlineQuery                          = 0x54826690
	TagUpdateBotInlineSend                           = 0x0e48f964
	TagUpdateEditChannelMessage                      = 0x1b3f4df7
	TagUpdateChannelPinnedMessage                    = 0x98592475
	TagUpdateBotCallbackQuery                        = 0xe73547e1
	TagUpdateEditMessage                             = 0xe40370a3
	TagUpdateInlineBotCallbackQuery                  = 0xf9d27a5a
	TagUpdateReadChannelOutbox                       = 0x25d6c9c7
	TagUpdateDraftMessage                            = 0xee2bb969
	TagUpdateReadFeaturedStickers                    = 0x571d2742
	TagUpdateRecentStickers                          = 0x9a422c20
	TagUpdateConfig                                  = 0xa229dd06
	TagUpdatePtsChanged                              = 0x3354678f
	TagUpdateChannelWebPage                          = 0x40771900
	TagUpdateDialogPinned                            = 0xd711a2cc
	TagUpdatePinnedDialogs                           = 0xd8caf68d
	TagUpdateBotWebhookJSON                          = 0x8317c0c3
	TagUpdateBotWebhookJSONQuery                     = 0x9b9240a6
	TagUpdateBotShippingQuery                        = 0xe0cdc940
	TagUpdateBotPrecheckoutQuery                     = 0x5d2f3aa9
	TagUpdatePhoneCall                               = 0xab0f6b1e
	TagUpdatesState                                  = 0xa56c2a3e
	TagUpdatesDifferenceEmpty                        = 0x5d75a138
	TagUpdatesDifference                             = 0x00f49ca0
	TagUpdatesDifferenceSlice                        = 0xa8fb1981
	TagUpdatesDifferenceTooLong                      = 0x4afe8f6d
	TagUpdatesTooLong                                = 0xe317af7e
	TagUpdateShortMessage                            = 0x914fbf11
	TagUpdateShortChatMessage                        = 0x16812688
	TagUpdateShort                                   = 0x78d4dec1
	TagUpdatesCombined                               = 0x725b04c3
	TagUpdates                                       = 0x74ae4240
	TagUpdateShortSentMessage                        = 0x11f1331c
	TagPhotosPhotos                                  = 0x8dca6aa5
	TagPhotosPhotosSlice                             = 0x15051f54
	TagPhotosPhoto                                   = 0x20212ca8
	TagUploadFile                                    = 0x096a18d5
	TagDCOption                                      = 0x05d8c6cc
	TagConfig                                        = 0xcb601684
	TagNearestDC                                     = 0x8e1a1775
	TagHelpAppUpdate                                 = 0x8987f311
	TagHelpNoAppUpdate                               = 0xc45a6536
	TagHelpInviteText                                = 0x18cb9f78
	TagEncryptedChatEmpty                            = 0xab7ec0a0
	TagEncryptedChatWaiting                          = 0x3bf703dc
	TagEncryptedChatRequested                        = 0xc878527e
	TagEncryptedChat                                 = 0xfa56ce36
	TagEncryptedChatDiscarded                        = 0x13d6dd27
	TagInputEncryptedChat                            = 0xf141b5e1
	TagEncryptedFileEmpty                            = 0xc21f497e
	TagEncryptedFile                                 = 0x4a70994c
	TagInputEncryptedFileEmpty                       = 0x1837c364
	TagInputEncryptedFileUploaded                    = 0x64bd0306
	TagInputEncryptedFile                            = 0x5a17b5e5
	TagInputEncryptedFileBigUploaded                 = 0x2dc173c8
	TagEncryptedMessage                              = 0xed18c118
	TagEncryptedMessageService                       = 0x23734b06
	TagMessagesDHConfigNotModified                   = 0xc0e24635
	TagMessagesDHConfig                              = 0x2c221edd
	TagMessagesSentEncryptedMessage                  = 0x560f8935
	TagMessagesSentEncryptedFile                     = 0x9493ff32
	TagInputDocumentEmpty                            = 0x72f0eaae
	TagInputDocument                                 = 0x18798952
	TagDocumentEmpty                                 = 0x36f8c871
	TagDocument                                      = 0x87232bc7
	TagHelpSupport                                   = 0x17c6b5f6
	TagNotifyPeer                                    = 0x9fd40bd8
	TagNotifyUsers                                   = 0xb4c83b4c
	TagNotifyChats                                   = 0xc007cec3
	TagNotifyAll                                     = 0x74d07c60
	TagSendMessageTypingAction                       = 0x16bf744e
	TagSendMessageCancelAction                       = 0xfd5ec8f5
	TagSendMessageRecordVideoAction                  = 0xa187d66f
	TagSendMessageUploadVideoAction                  = 0xe9763aec
	TagSendMessageRecordAudioAction                  = 0xd52f73f7
	TagSendMessageUploadAudioAction                  = 0xf351d7ab
	TagSendMessageUploadPhotoAction                  = 0xd1d34a26
	TagSendMessageUploadDocumentAction               = 0xaa0cd9e4
	TagSendMessageGeoLocationAction                  = 0x176f8ba1
	TagSendMessageChooseContactAction                = 0x628cbc6f
	TagSendMessageGamePlayAction                     = 0xdd6a8f48
	TagContactsFound                                 = 0x1aa1f784
	TagInputPrivacyKeyStatusTimestamp                = 0x4f96cb18
	TagInputPrivacyKeyChatInvite                     = 0xbdfb0426
	TagInputPrivacyKeyPhoneCall                      = 0xfabadc5f
	TagPrivacyKeyStatusTimestamp                     = 0xbc2eab30
	TagPrivacyKeyChatInvite                          = 0x500e6dfa
	TagPrivacyKeyPhoneCall                           = 0x3d662b7b
	TagInputPrivacyValueAllowContacts                = 0x0d09e07b
	TagInputPrivacyValueAllowAll                     = 0x184b35ce
	TagInputPrivacyValueAllowUsers                   = 0x131cc67f
	TagInputPrivacyValueDisallowContacts             = 0x0ba52007
	TagInputPrivacyValueDisallowAll                  = 0xd66b66c9
	TagInputPrivacyValueDisallowUsers                = 0x90110467
	TagPrivacyValueAllowContacts                     = 0xfffe1bac
	TagPrivacyValueAllowAll                          = 0x65427b82
	TagPrivacyValueAllowUsers                        = 0x4d5bbe0c
	TagPrivacyValueDisallowContacts                  = 0xf888fa1a
	TagPrivacyValueDisallowAll                       = 0x8b73e763
	TagPrivacyValueDisallowUsers                     = 0x0c7f49b7
	TagAccountPrivacyRules                           = 0x554abb6f
	TagAccountDaysTTL                                = 0xb8d0afdf
	TagDocumentAttributeImageSize                    = 0x6c37c15c
	TagDocumentAttributeAnimated                     = 0x11b58939
	TagDocumentAttributeSticker                      = 0x6319d612
	TagDocumentAttributeVideo                        = 0x5910cccb
	TagDocumentAttributeAudio                        = 0x9852f9c6
	TagDocumentAttributeFilename                     = 0x15590068
	TagDocumentAttributeHasStickers                  = 0x9801d2f7
	TagMessagesStickersNotModified                   = 0xf1749a22
	TagMessagesStickers                              = 0x8a8ecd32
	TagStickerPack                                   = 0x12b299d4
	TagMessagesAllStickersNotModified                = 0xe86602c3
	TagMessagesAllStickers                           = 0xedfd405f
	TagDisabledFeature                               = 0xae636f24
	TagMessagesAffectedMessages                      = 0x84d19185
	TagContactLinkUnknown                            = 0x5f4f9247
	TagContactLinkNone                               = 0xfeedd3ad
	TagContactLinkHasPhone                           = 0x268f3f59
	TagContactLinkContact                            = 0xd502c2d0
	TagWebPageEmpty                                  = 0xeb1477e8
	TagWebPagePending                                = 0xc586da1c
	TagWebPage                                       = 0x5f07b4bc
	TagWebPageNotModified                            = 0x85849473
	TagAuthorization                                 = 0x7bf2e6f6
	TagAccountAuthorizations                         = 0x1250abde
	TagAccountNoPassword                             = 0x96dabc18
	TagAccountPassword                               = 0x7c18141c
	TagAccountPasswordSettings                       = 0xb7b72ab3
	TagAccountPasswordInputSettings                  = 0x86916deb
	TagAuthPasswordRecovery                          = 0x137948a5
	TagReceivedNotifyMessage                         = 0xa384b779
	TagChatInviteEmpty                               = 0x69df3769
	TagChatInviteExported                            = 0xfc2e05bc
	TagChatInviteAlready                             = 0x5a686d7c
	TagChatInvite                                    = 0xdb74f558
	TagInputStickerSetEmpty                          = 0xffb62b95
	TagInputStickerSetID                             = 0x9de7a269
	TagInputStickerSetShortName                      = 0x861cc8a0
	TagStickerSet                                    = 0xcd303b41
	TagMessagesStickerSet                            = 0xb60a24a6
	TagBotCommand                                    = 0xc27ac8c7
	TagBotInfo                                       = 0x98e81d3a
	TagKeyboardButton                                = 0xa2fa4880
	TagKeyboardButtonUrl                             = 0x258aff05
	TagKeyboardButtonCallback                        = 0x683a5e46
	TagKeyboardButtonRequestPhone                    = 0xb16a6c29
	TagKeyboardButtonRequestGeoLocation              = 0xfc796b3f
	TagKeyboardButtonSwitchInline                    = 0x0568a748
	TagKeyboardButtonGame                            = 0x50f41ccf
	TagKeyboardButtonBuy                             = 0xafd93fbb
	TagKeyboardButtonRow                             = 0x77608b83
	TagReplyKeyboardHide                             = 0xa03e5b85
	TagReplyKeyboardForceReply                       = 0xf4108aa0
	TagReplyKeyboardMarkup                           = 0x3502758c
	TagReplyInlineMarkup                             = 0x48a30254
	TagMessageEntityUnknown                          = 0xbb92ba95
	TagMessageEntityMention                          = 0xfa04579d
	TagMessageEntityHashtag                          = 0x6f635b0d
	TagMessageEntityBotCommand                       = 0x6cef8ac7
	TagMessageEntityUrl                              = 0x6ed02538
	TagMessageEntityEmail                            = 0x64e475c2
	TagMessageEntityBold                             = 0xbd610bc9
	TagMessageEntityItalic                           = 0x826f8b60
	TagMessageEntityCode                             = 0x28a20571
	TagMessageEntityPre                              = 0x73924be0
	TagMessageEntityTextUrl                          = 0x76a6d327
	TagMessageEntityMentionName                      = 0x352dca58
	TagInputMessageEntityMentionName                 = 0x208e68c9
	TagInputChannelEmpty                             = 0xee8c1e86
	TagInputChannel                                  = 0xafeb712e
	TagContactsResolvedPeer                          = 0x7f077ad9
	TagMessageRange                                  = 0x0ae30253
	TagUpdatesChannelDifferenceEmpty                 = 0x3e11affb
	TagUpdatesChannelDifferenceTooLong               = 0x410dee07
	TagUpdatesChannelDifference                      = 0x2064674e
	TagChannelMessagesFilterEmpty                    = 0x94d42ee7
	TagChannelMessagesFilter                         = 0xcd77d957
	TagChannelParticipant                            = 0x15ebac1d
	TagChannelParticipantSelf                        = 0xa3289a6d
	TagChannelParticipantModerator                   = 0x91057fef
	TagChannelParticipantEditor                      = 0x98192d61
	TagChannelParticipantKicked                      = 0x8cc5e69a
	TagChannelParticipantCreator                     = 0xe3e2e1f9
	TagChannelParticipantsRecent                     = 0xde3f3c79
	TagChannelParticipantsAdmins                     = 0xb4608969
	TagChannelParticipantsKicked                     = 0x3c37bb7a
	TagChannelParticipantsBots                       = 0xb0d1865b
	TagChannelRoleEmpty                              = 0xb285a0c6
	TagChannelRoleModerator                          = 0x9618d975
	TagChannelRoleEditor                             = 0x820bfe8c
	TagChannelsChannelParticipants                   = 0xf56ee2a8
	TagChannelsChannelParticipant                    = 0xd0d9b163
	TagHelpTermsOfService                            = 0xf1ee3e90
	TagFoundGif                                      = 0x162ecc1f
	TagFoundGifCached                                = 0x9c750409
	TagMessagesFoundGifs                             = 0x450a1c0a
	TagMessagesSavedGifsNotModified                  = 0xe8025ca2
	TagMessagesSavedGifs                             = 0x2e0709a5
	TagInputBotInlineMessageMediaAuto                = 0x292fed13
	TagInputBotInlineMessageText                     = 0x3dcd7a87
	TagInputBotInlineMessageMediaGeo                 = 0xf4a59de1
	TagInputBotInlineMessageMediaVenue               = 0xaaafadc8
	TagInputBotInlineMessageMediaContact             = 0x2daf01a7
	TagInputBotInlineMessageGame                     = 0x4b425864
	TagInputBotInlineResult                          = 0x2cbbe15a
	TagInputBotInlineResultPhoto                     = 0xa8d864a7
	TagInputBotInlineResultDocument                  = 0xfff8fdc4
	TagInputBotInlineResultGame                      = 0x4fa417f2
	TagBotInlineMessageMediaAuto                     = 0x0a74b15b
	TagBotInlineMessageText                          = 0x8c7f65e2
	TagBotInlineMessageMediaGeo                      = 0x3a8fd8b8
	TagBotInlineMessageMediaVenue                    = 0x4366232e
	TagBotInlineMessageMediaContact                  = 0x35edb4d4
	TagBotInlineResult                               = 0x9bebaeb9
	TagBotInlineMediaResult                          = 0x17db940b
	TagMessagesBotResults                            = 0xccd3563d
	TagExportedMessageLink                           = 0x1f486803
	TagMessageFwdHeader                              = 0xc786ddcb
	TagAuthCodeTypeSms                               = 0x72a3158c
	TagAuthCodeTypeCall                              = 0x741cd3e3
	TagAuthCodeTypeFlashCall                         = 0x226ccefb
	TagAuthSentCodeTypeApp                           = 0x3dbb5986
	TagAuthSentCodeTypeSms                           = 0xc000bba2
	TagAuthSentCodeTypeCall                          = 0x5353e5a7
	TagAuthSentCodeTypeFlashCall                     = 0xab03c6d9
	TagMessagesBotCallbackAnswer                     = 0x36585ea4
	TagMessagesMessageEditData                       = 0x26b5dde6
	TagInputBotInlineMessageID                       = 0x890c3d89
	TagInlineBotSwitchPM                             = 0x3c20629f
	TagMessagesPeerDialogs                           = 0x3371c354
	TagTopPeer                                       = 0xedcdc05b
	TagTopPeerCategoryBotsPM                         = 0xab661b5b
	TagTopPeerCategoryBotsInline                     = 0x148677e2
	TagTopPeerCategoryCorrespondents                 = 0x0637b7ed
	TagTopPeerCategoryGroups                         = 0xbd17a14a
	TagTopPeerCategoryChannels                       = 0x161d9628
	TagTopPeerCategoryPeers                          = 0xfb834291
	TagContactsTopPeersNotModified                   = 0xde266ef5
	TagContactsTopPeers                              = 0x70b772a8
	TagDraftMessageEmpty                             = 0xba4baec5
	TagDraftMessage                                  = 0xfd8e711f
	TagMessagesFeaturedStickersNotModified           = 0x04ede3cf
	TagMessagesFeaturedStickers                      = 0xf89d88e5
	TagMessagesRecentStickersNotModified             = 0x0b17f890
	TagMessagesRecentStickers                        = 0x5ce20970
	TagMessagesArchivedStickers                      = 0x4fcba9c8
	TagMessagesStickerSetInstallResultSuccess        = 0x38641628
	TagMessagesStickerSetInstallResultArchive        = 0x35e410a8
	TagStickerSetCovered                             = 0x6410a5d2
	TagStickerSetMultiCovered                        = 0x3407e51b
	TagMaskCoords                                    = 0xaed6dbb2
	TagInputStickeredMediaPhoto                      = 0x4a992157
	TagInputStickeredMediaDocument                   = 0x0438865b
	TagGame                                          = 0xbdf9653b
	TagInputGameID                                   = 0x032c3e77
	TagInputGameShortName                            = 0xc331e80a
	TagHighScore                                     = 0x58fffcd0
	TagMessagesHighScores                            = 0x9a3bfd99
	TagTextEmpty                                     = 0xdc3d824f
	TagTextPlain                                     = 0x744694e0
	TagTextBold                                      = 0x6724abc4
	TagTextItalic                                    = 0xd912a59c
	TagTextUnderline                                 = 0xc12622c4
	TagTextStrike                                    = 0x9bf8bb95
	TagTextFixed                                     = 0x6c3f19b9
	TagTextUrl                                       = 0x3c2884c1
	TagTextEmail                                     = 0xde5a0dd6
	TagTextConcat                                    = 0x7e6260d7
	TagPageBlockUnsupported                          = 0x13567e8a
	TagPageBlockTitle                                = 0x70abc3fd
	TagPageBlockSubtitle                             = 0x8ffa9a1f
	TagPageBlockAuthorDate                           = 0xbaafe5e0
	TagPageBlockHeader                               = 0xbfd064ec
	TagPageBlockSubheader                            = 0xf12bb6e1
	TagPageBlockParagraph                            = 0x467a0766
	TagPageBlockPreformatted                         = 0xc070d93e
	TagPageBlockFooter                               = 0x48870999
	TagPageBlockDivider                              = 0xdb20b188
	TagPageBlockAnchor                               = 0xce0d37b0
	TagPageBlockList                                 = 0x3a58c7f4
	TagPageBlockBlockquote                           = 0x263d7c26
	TagPageBlockPullquote                            = 0x4f4456d3
	TagPageBlockPhoto                                = 0xe9c69982
	TagPageBlockVideo                                = 0xd9d71866
	TagPageBlockCover                                = 0x39f23300
	TagPageBlockEmbed                                = 0xcde200d1
	TagPageBlockEmbedPost                            = 0x292c7be9
	TagPageBlockCollage                              = 0x08b31c4f
	TagPageBlockSlideshow                            = 0x130c8963
	TagPagePart                                      = 0x8dee6c44
	TagPageFull                                      = 0xd7a19d69
	TagPhoneCallDiscardReasonMissed                  = 0x85e42301
	TagPhoneCallDiscardReasonDisconnect              = 0xe095c1a0
	TagPhoneCallDiscardReasonHangup                  = 0x57adc690
	TagPhoneCallDiscardReasonBusy                    = 0xfaf7e8c9
	TagDataJSON                                      = 0x7d748d04
	TagLabeledPrice                                  = 0xcb296bf8
	TagInvoice                                       = 0xc30aa358
	TagPaymentCharge                                 = 0xea02c27e
	TagPostAddress                                   = 0x1e8caaeb
	TagPaymentRequestedInfo                          = 0x909c3f94
	TagPaymentSavedCredentialsCard                   = 0xcdc27a1f
	TagWebDocument                                   = 0xc61acbd8
	TagInputWebDocument                              = 0x9bed434d
	TagInputWebFileLocation                          = 0xc239d686
	TagUploadWebFile                                 = 0x21e753bc
	TagPaymentsPaymentForm                           = 0x3f56aea3
	TagPaymentsValidatedRequestedInfo                = 0xd1451883
	TagPaymentsPaymentResult                         = 0x4e5f810d
	TagPaymentsPaymentVerficationNeeded              = 0x6b56b921
	TagPaymentsPaymentReceipt                        = 0x500911e1
	TagPaymentsSavedInfo                             = 0xfb8fe43c
	TagInputPaymentCredentialsSaved                  = 0xc10eb2cf
	TagInputPaymentCredentials                       = 0x3417d728
	TagAccountTmpPassword                            = 0xdb64fd34
	TagShippingOption                                = 0xb6213cdf
	TagInputPhoneCall                                = 0x1e36fded
	TagPhoneCallEmpty                                = 0x5366c915
	TagPhoneCallWaiting                              = 0x1b8f4ad1
	TagPhoneCallRequested                            = 0x83761ce4
	TagPhoneCallAccepted                             = 0x6d003d3f
	TagPhoneCall                                     = 0xffe6ab67
	TagPhoneCallDiscarded                            = 0x50ca4de1
	TagPhoneConnection                               = 0x9d4c17c0
	TagPhoneCallProtocol                             = 0xa2bb35cb
	TagPhonePhoneCall                                = 0xec82e140
	TagInvokeAfterMsg                                = 0xcb9f372d
	TagInvokeAfterMsgs                               = 0x3dc4b4f0
	TagInitConnection                                = 0x69796de9
	TagInvokeWithLayer                               = 0xda9b0d0d
	TagInvokeWithoutUpdates                          = 0xbf9459b7
	TagAuthCheckPhone                                = 0x6fe51dfb
	TagAuthSendCode                                  = 0x86aef0ec
	TagAuthSignUp                                    = 0x1b067634
	TagAuthSignIn                                    = 0xbcd51581
	TagAuthLogOut                                    = 0x5717da40
	TagAuthResetAuthorizations                       = 0x9fab0d1a
	TagAuthSendInvites                               = 0x771c1d97
	TagAuthExportAuthorization                       = 0xe5bfffcd
	TagAuthImportAuthorization                       = 0xe3ef9613
	TagAuthBindTempAuthKey                           = 0xcdd42a05
	TagAuthImportBotAuthorization                    = 0x67a3ff2c
	TagAuthCheckPassword                             = 0x0a63011e
	TagAuthRequestPasswordRecovery                   = 0xd897bc66
	TagAuthRecoverPassword                           = 0x4ea56e92
	TagAuthResendCode                                = 0x3ef1a9bf
	TagAuthCancelCode                                = 0x1f040578
	TagAuthDropTempAuthKeys                          = 0x8e48a188
	TagAccountRegisterDevice                         = 0x637ea878
	TagAccountUnregisterDevice                       = 0x65c55b40
	TagAccountUpdateNotifySettings                   = 0x84be5b93
	TagAccountGetNotifySettings                      = 0x12b3ad31
	TagAccountResetNotifySettings                    = 0xdb7e1747
	TagAccountUpdateProfile                          = 0x78515775
	TagAccountUpdateStatus                           = 0x6628562c
	TagAccountGetWallPapers                          = 0xc04cfac2
	TagAccountReportPeer                             = 0xae189d5f
	TagAccountCheckUsername                          = 0x2714d86c
	TagAccountUpdateUsername                         = 0x3e0bdd7c
	TagAccountGetPrivacy                             = 0xdadbc950
	TagAccountSetPrivacy                             = 0xc9f81ce8
	TagAccountDeleteAccount                          = 0x418d4e0b
	TagAccountGetAccountTTL                          = 0x08fc711d
	TagAccountSetAccountTTL                          = 0x2442485e
	TagAccountSendChangePhoneCode                    = 0x08e57deb
	TagAccountChangePhone                            = 0x70c32edb
	TagAccountUpdateDeviceLocked                     = 0x38df3532
	TagAccountGetAuthorizations                      = 0xe320c158
	TagAccountResetAuthorization                     = 0xdf77f3bc
	TagAccountGetPassword                            = 0x548a30f5
	TagAccountGetPasswordSettings                    = 0xbc8d11bb
	TagAccountUpdatePasswordSettings                 = 0xfa7c4b86
	TagAccountSendConfirmPhoneCode                   = 0x1516d7bd
	TagAccountConfirmPhone                           = 0x5f2178c3
	TagAccountGetTmpPassword                         = 0x4a82327e
	TagUsersGetUsers                                 = 0x0d91a548
	TagUsersGetFullUser                              = 0xca30a5b1
	TagContactsGetStatuses                           = 0xc4a353ee
	TagContactsGetContacts                           = 0x22c6aa08
	TagContactsImportContacts                        = 0xda30b32d
	TagContactsDeleteContact                         = 0x8e953744
	TagContactsDeleteContacts                        = 0x59ab389e
	TagContactsBlock                                 = 0x332b49fc
	TagContactsUnblock                               = 0xe54100bd
	TagContactsGetBlocked                            = 0xf57c350f
	TagContactsExportCard                            = 0x84e53737
	TagContactsImportCard                            = 0x4fe196fe
	TagContactsSearch                                = 0x11f812d8
	TagContactsResolveUsername                       = 0xf93ccba3
	TagContactsGetTopPeers                           = 0xd4982db5
	TagContactsResetTopPeerRating                    = 0x1ae373ac
	TagMessagesGetMessages                           = 0x4222fa74
	TagMessagesGetDialogs                            = 0x191ba9c5
	TagMessagesGetHistory                            = 0xafa92846
	TagMessagesSearch                                = 0xd4569248
	TagMessagesReadHistory                           = 0x0e306d3a
	TagMessagesDeleteHistory                         = 0x1c015b09
	TagMessagesDeleteMessages                        = 0xe58e95d2
	TagMessagesReceivedMessages                      = 0x05a954c0
	TagMessagesSetTyping                             = 0xa3825e50
	TagMessagesSendMessage                           = 0xfa88427a
	TagMessagesSendMedia                             = 0xc8f16791
	TagMessagesForwardMessages                       = 0x708e0195
	TagMessagesReportSpam                            = 0xcf1592db
	TagMessagesHideReportSpam                        = 0xa8f1709b
	TagMessagesGetPeerSettings                       = 0x3672e09c
	TagMessagesGetChats                              = 0x3c6aa187
	TagMessagesGetFullChat                           = 0x3b831c66
	TagMessagesEditChatTitle                         = 0xdc452855
	TagMessagesEditChatPhoto                         = 0xca4c79d8
	TagMessagesAddChatUser                           = 0xf9a0aa09
	TagMessagesDeleteChatUser                        = 0xe0611f16
	TagMessagesCreateChat                            = 0x09cb126e
	TagMessagesForwardMessage                        = 0x33963bf9
	TagMessagesGetDHConfig                           = 0x26cf8950
	TagMessagesRequestEncryption                     = 0xf64daf43
	TagMessagesAcceptEncryption                      = 0x3dbc0415
	TagMessagesDiscardEncryption                     = 0xedd923c5
	TagMessagesSetEncryptedTyping                    = 0x791451ed
	TagMessagesReadEncryptedHistory                  = 0x7f4b690a
	TagMessagesSendEncrypted                         = 0xa9776773
	TagMessagesSendEncryptedFile                     = 0x9a901b66
	TagMessagesSendEncryptedService                  = 0x32d439a4
	TagMessagesReceivedQueue                         = 0x55a5bb66
	TagMessagesReportEncryptedSpam                   = 0x4b0c8c0f
	TagMessagesReadMessageContents                   = 0x36a73f77
	TagMessagesGetAllStickers                        = 0x1c9618b1
	TagMessagesGetWebPagePreview                     = 0x25223e24
	TagMessagesExportChatInvite                      = 0x7d885289
	TagMessagesCheckChatInvite                       = 0x3eadb1bb
	TagMessagesImportChatInvite                      = 0x6c50051c
	TagMessagesGetStickerSet                         = 0x2619a90e
	TagMessagesInstallStickerSet                     = 0xc78fe460
	TagMessagesUninstallStickerSet                   = 0xf96e55de
	TagMessagesStartBot                              = 0xe6df7378
	TagMessagesGetMessagesViews                      = 0xc4c8a55d
	TagMessagesToggleChatAdmins                      = 0xec8bd9e1
	TagMessagesEditChatAdmin                         = 0xa9e69f2e
	TagMessagesMigrateChat                           = 0x15a3b8e3
	TagMessagesSearchGlobal                          = 0x9e3cacb0
	TagMessagesReorderStickerSets                    = 0x78337739
	TagMessagesGetDocumentByHash                     = 0x338e2464
	TagMessagesSearchGifs                            = 0xbf9a776b
	TagMessagesGetSavedGifs                          = 0x83bf3d52
	TagMessagesSaveGif                               = 0x327a30cb
	TagMessagesGetInlineBotResults                   = 0x514e999d
	TagMessagesSetInlineBotResults                   = 0xeb5ea206
	TagMessagesSendInlineBotResult                   = 0xb16e06fe
	TagMessagesGetMessageEditData                    = 0xfda68d36
	TagMessagesEditMessage                           = 0xce91e4ca
	TagMessagesEditInlineBotMessage                  = 0x130c2c85
	TagMessagesGetBotCallbackAnswer                  = 0x810a9fec
	TagMessagesSetBotCallbackAnswer                  = 0xd58f130a
	TagMessagesGetPeerDialogs                        = 0x2d9776b9
	TagMessagesSaveDraft                             = 0xbc39e14b
	TagMessagesGetAllDrafts                          = 0x6a3f8d65
	TagMessagesGetFeaturedStickers                   = 0x2dacca4f
	TagMessagesReadFeaturedStickers                  = 0x5b118126
	TagMessagesGetRecentStickers                     = 0x5ea192c9
	TagMessagesSaveRecentSticker                     = 0x392718f8
	TagMessagesClearRecentStickers                   = 0x8999602d
	TagMessagesGetArchivedStickers                   = 0x57f17692
	TagMessagesGetMaskStickers                       = 0x65b8c79f
	TagMessagesGetAttachedStickers                   = 0xcc5b67cc
	TagMessagesSetGameScore                          = 0x8ef8ecc0
	TagMessagesSetInlineGameScore                    = 0x15ad9f64
	TagMessagesGetGameHighScores                     = 0xe822649d
	TagMessagesGetInlineGameHighScores               = 0x0f635e1b
	TagMessagesGetCommonChats                        = 0x0d0a48c4
	TagMessagesGetAllChats                           = 0xeba80ff0
	TagMessagesGetWebPage                            = 0x32ca8f91
	TagMessagesToggleDialogPin                       = 0x3289be6a
	TagMessagesReorderPinnedDialogs                  = 0x959ff644
	TagMessagesGetPinnedDialogs                      = 0xe254d64e
	TagMessagesSetBotShippingResults                 = 0xe5f672fa
	TagMessagesSetBotPrecheckoutResults              = 0x09c2dd95
	TagUpdatesGetState                               = 0xedd4882a
	TagUpdatesGetDifference                          = 0x25939651
	TagUpdatesGetChannelDifference                   = 0x03173d78
	TagPhotosUpdateProfilePhoto                      = 0xf0bb5152
	TagPhotosUploadProfilePhoto                      = 0x4f32c098
	TagPhotosDeletePhotos                            = 0x87cf7f2f
	TagPhotosGetUserPhotos                           = 0x91cd32a8
	TagUploadSaveFilePart                            = 0xb304a621
	TagUploadGetFile                                 = 0xe3a6cfb5
	TagUploadSaveBigFilePart                         = 0xde7b673d
	TagUploadGetWebFile                              = 0x24e6818d
	TagHelpGetConfig                                 = 0xc4f9186b
	TagHelpGetNearestDC                              = 0x1fb33026
	TagHelpGetAppUpdate                              = 0xae2de196
	TagHelpSaveAppLog                                = 0x6f02f748
	TagHelpGetInviteText                             = 0x4d392343
	TagHelpGetSupport                                = 0x9cdf08cd
	TagHelpGetAppChangelog                           = 0x9010ef6f
	TagHelpGetTermsOfService                         = 0x350170f3
	TagHelpSetBotUpdatesStatus                       = 0xec22cfcd
	TagChannelsReadHistory                           = 0xcc104937
	TagChannelsDeleteMessages                        = 0x84c1fd4e
	TagChannelsDeleteUserHistory                     = 0xd10dd71b
	TagChannelsReportSpam                            = 0xfe087810
	TagChannelsGetMessages                           = 0x93d7b347
	TagChannelsGetParticipants                       = 0x24d98f92
	TagChannelsGetParticipant                        = 0x546dd7a6
	TagChannelsGetChannels                           = 0x0a7f6bbb
	TagChannelsGetFullChannel                        = 0x08736a09
	TagChannelsCreateChannel                         = 0xf4893d7f
	TagChannelsEditAbout                             = 0x13e27f1e
	TagChannelsEditAdmin                             = 0xeb7611d0
	TagChannelsEditTitle                             = 0x566decd0
	TagChannelsEditPhoto                             = 0xf12e57c9
	TagChannelsCheckUsername                         = 0x10e6bd2c
	TagChannelsUpdateUsername                        = 0x3514b3de
	TagChannelsJoinChannel                           = 0x24b524c5
	TagChannelsLeaveChannel                          = 0xf836aa95
	TagChannelsInviteToChannel                       = 0x199f3a6c
	TagChannelsKickFromChannel                       = 0xa672de14
	TagChannelsExportInvite                          = 0xc7560885
	TagChannelsDeleteChannel                         = 0xc0111fe3
	TagChannelsToggleInvites                         = 0x49609307
	TagChannelsExportMessageLink                     = 0xc846d22d
	TagChannelsToggleSignatures                      = 0x1f69b606
	TagChannelsUpdatePinnedMessage                   = 0xa72ded52
	TagChannelsGetAdminedPublicChannels              = 0x8d8d82d7
	TagBotsSendCustomRequest                         = 0xaa2769ed
	TagBotsAnswerWebhookJSONQuery                    = 0xe6213f4d
	TagPaymentsGetPaymentForm                        = 0x99f09745
	TagPaymentsGetPaymentReceipt                     = 0xa092a980
	TagPaymentsValidateRequestedInfo                 = 0x770a8e74
	TagPaymentsSendPaymentForm                       = 0x2b8879b3
	TagPaymentsGetSavedInfo                          = 0x227d824b
	TagPaymentsClearSavedInfo                        = 0xd83d70c1
	TagPhoneGetCallConfig                            = 0x55451fa9
	TagPhoneRequestCall                              = 0x5b95b3d4
	TagPhoneAcceptCall                               = 0x3bd2b4a0
	TagPhoneConfirmCall                              = 0x2efe1722
	TagPhoneReceivedCall                             = 0x17d54f61
	TagPhoneDiscardCall                              = 0x78d413a6
	TagPhoneSetCallRating                            = 0x1c536a34
	TagPhoneSaveCallDebug                            = 0x277add7e
)

// from builtin
const (
	TagTrue      uint32 = 0x3fedd339
	TagBoolFalse        = 0xbc799737
	TagBoolTrue         = 0x997275b5
	TagString           = 0xb5286e24
	TagInt              = 0xa8509bda
	TagLong             = 0x22076cba
	TagDouble           = 0x2210c154
	TagBytes            = 0xebefb69e
	TagObject           = 0x29704ca0
	TagVector           = 0x1cb5c415
)

type SchemaOrigin int

const (
	SchemaOriginMTProto SchemaOrigin = 1 + iota
	SchemaOriginTelegram
	SchemaOriginBuiltin
)

var combOrigins = map[uint32]SchemaOrigin{
	TagResPQ:                                  SchemaOriginMTProto,
	TagPQInnerData:                            SchemaOriginMTProto,
	TagServerDHParamsFail:                     SchemaOriginMTProto,
	TagServerDHParamsOK:                       SchemaOriginMTProto,
	TagServerDHInnerData:                      SchemaOriginMTProto,
	TagClientDHInnerData:                      SchemaOriginMTProto,
	TagDHGenOK:                                SchemaOriginMTProto,
	TagDHGenRetry:                             SchemaOriginMTProto,
	TagDHGenFail:                              SchemaOriginMTProto,
	TagRPCResult:                              SchemaOriginMTProto,
	TagRPCError:                               SchemaOriginMTProto,
	TagRPCAnswerUnknown:                       SchemaOriginMTProto,
	TagRPCAnswerDroppedRunning:                SchemaOriginMTProto,
	TagRPCAnswerDropped:                       SchemaOriginMTProto,
	TagFutureSalt:                             SchemaOriginMTProto,
	TagFutureSalts:                            SchemaOriginMTProto,
	TagPong:                                   SchemaOriginMTProto,
	TagDestroySessionOK:                       SchemaOriginMTProto,
	TagDestroySessionNone:                     SchemaOriginMTProto,
	TagNewSessionCreated:                      SchemaOriginMTProto,
	TagMsgContainer:                           SchemaOriginMTProto,
	TagProtoMessage:                           SchemaOriginMTProto,
	TagMsgCopy:                                SchemaOriginMTProto,
	TagGzipPacked:                             SchemaOriginMTProto,
	TagMsgsAck:                                SchemaOriginMTProto,
	TagBadMsgNotification:                     SchemaOriginMTProto,
	TagBadServerSalt:                          SchemaOriginMTProto,
	TagMsgResendReq:                           SchemaOriginMTProto,
	TagMsgsStateReq:                           SchemaOriginMTProto,
	TagMsgsStateInfo:                          SchemaOriginMTProto,
	TagMsgsAllInfo:                            SchemaOriginMTProto,
	TagMsgDetailedInfo:                        SchemaOriginMTProto,
	TagMsgNewDetailedInfo:                     SchemaOriginMTProto,
	TagReqPQ:                                  SchemaOriginMTProto,
	TagReqDHParams:                            SchemaOriginMTProto,
	TagSetClientDHParams:                      SchemaOriginMTProto,
	TagRPCDropAnswer:                          SchemaOriginMTProto,
	TagGetFutureSalts:                         SchemaOriginMTProto,
	TagPing:                                   SchemaOriginMTProto,
	TagPingDelayDisconnect:                    SchemaOriginMTProto,
	TagDestroySession:                         SchemaOriginMTProto,
	TagHttpWait:                               SchemaOriginMTProto,
	TagError:                                  SchemaOriginTelegram,
	TagNull:                                   SchemaOriginTelegram,
	TagInputPeerEmpty:                         SchemaOriginTelegram,
	TagInputPeerSelf:                          SchemaOriginTelegram,
	TagInputPeerChat:                          SchemaOriginTelegram,
	TagInputPeerUser:                          SchemaOriginTelegram,
	TagInputPeerChannel:                       SchemaOriginTelegram,
	TagInputUserEmpty:                         SchemaOriginTelegram,
	TagInputUserSelf:                          SchemaOriginTelegram,
	TagInputUser:                              SchemaOriginTelegram,
	TagInputPhoneContact:                      SchemaOriginTelegram,
	TagInputFile:                              SchemaOriginTelegram,
	TagInputFileBig:                           SchemaOriginTelegram,
	TagInputMediaEmpty:                        SchemaOriginTelegram,
	TagInputMediaUploadedPhoto:                SchemaOriginTelegram,
	TagInputMediaPhoto:                        SchemaOriginTelegram,
	TagInputMediaGeoPoint:                     SchemaOriginTelegram,
	TagInputMediaContact:                      SchemaOriginTelegram,
	TagInputMediaUploadedDocument:             SchemaOriginTelegram,
	TagInputMediaUploadedThumbDocument:        SchemaOriginTelegram,
	TagInputMediaDocument:                     SchemaOriginTelegram,
	TagInputMediaVenue:                        SchemaOriginTelegram,
	TagInputMediaGifExternal:                  SchemaOriginTelegram,
	TagInputMediaPhotoExternal:                SchemaOriginTelegram,
	TagInputMediaDocumentExternal:             SchemaOriginTelegram,
	TagInputMediaGame:                         SchemaOriginTelegram,
	TagInputMediaInvoice:                      SchemaOriginTelegram,
	TagInputChatPhotoEmpty:                    SchemaOriginTelegram,
	TagInputChatUploadedPhoto:                 SchemaOriginTelegram,
	TagInputChatPhoto:                         SchemaOriginTelegram,
	TagInputGeoPointEmpty:                     SchemaOriginTelegram,
	TagInputGeoPoint:                          SchemaOriginTelegram,
	TagInputPhotoEmpty:                        SchemaOriginTelegram,
	TagInputPhoto:                             SchemaOriginTelegram,
	TagInputFileLocation:                      SchemaOriginTelegram,
	TagInputEncryptedFileLocation:             SchemaOriginTelegram,
	TagInputDocumentFileLocation:              SchemaOriginTelegram,
	TagInputAppEvent:                          SchemaOriginTelegram,
	TagPeerUser:                               SchemaOriginTelegram,
	TagPeerChat:                               SchemaOriginTelegram,
	TagPeerChannel:                            SchemaOriginTelegram,
	TagStorageFileUnknown:                     SchemaOriginTelegram,
	TagStorageFilePartial:                     SchemaOriginTelegram,
	TagStorageFileJpeg:                        SchemaOriginTelegram,
	TagStorageFileGif:                         SchemaOriginTelegram,
	TagStorageFilePng:                         SchemaOriginTelegram,
	TagStorageFilePdf:                         SchemaOriginTelegram,
	TagStorageFileMp3:                         SchemaOriginTelegram,
	TagStorageFileMov:                         SchemaOriginTelegram,
	TagStorageFileMp4:                         SchemaOriginTelegram,
	TagStorageFileWebp:                        SchemaOriginTelegram,
	TagFileLocationUnavailable:                SchemaOriginTelegram,
	TagFileLocation:                           SchemaOriginTelegram,
	TagUserEmpty:                              SchemaOriginTelegram,
	TagUser:                                   SchemaOriginTelegram,
	TagUserProfilePhotoEmpty:                  SchemaOriginTelegram,
	TagUserProfilePhoto:                       SchemaOriginTelegram,
	TagUserStatusEmpty:                        SchemaOriginTelegram,
	TagUserStatusOnline:                       SchemaOriginTelegram,
	TagUserStatusOffline:                      SchemaOriginTelegram,
	TagUserStatusRecently:                     SchemaOriginTelegram,
	TagUserStatusLastWeek:                     SchemaOriginTelegram,
	TagUserStatusLastMonth:                    SchemaOriginTelegram,
	TagChatEmpty:                              SchemaOriginTelegram,
	TagChat:                                   SchemaOriginTelegram,
	TagChatForbidden:                          SchemaOriginTelegram,
	TagChannel:                                SchemaOriginTelegram,
	TagChannelForbidden:                       SchemaOriginTelegram,
	TagChatFull:                               SchemaOriginTelegram,
	TagChannelFull:                            SchemaOriginTelegram,
	TagChatParticipant:                        SchemaOriginTelegram,
	TagChatParticipantCreator:                 SchemaOriginTelegram,
	TagChatParticipantAdmin:                   SchemaOriginTelegram,
	TagChatParticipantsForbidden:              SchemaOriginTelegram,
	TagChatParticipants:                       SchemaOriginTelegram,
	TagChatPhotoEmpty:                         SchemaOriginTelegram,
	TagChatPhoto:                              SchemaOriginTelegram,
	TagMessageEmpty:                           SchemaOriginTelegram,
	TagMessage:                                SchemaOriginTelegram,
	TagMessageService:                         SchemaOriginTelegram,
	TagMessageMediaEmpty:                      SchemaOriginTelegram,
	TagMessageMediaPhoto:                      SchemaOriginTelegram,
	TagMessageMediaGeo:                        SchemaOriginTelegram,
	TagMessageMediaContact:                    SchemaOriginTelegram,
	TagMessageMediaUnsupported:                SchemaOriginTelegram,
	TagMessageMediaDocument:                   SchemaOriginTelegram,
	TagMessageMediaWebPage:                    SchemaOriginTelegram,
	TagMessageMediaVenue:                      SchemaOriginTelegram,
	TagMessageMediaGame:                       SchemaOriginTelegram,
	TagMessageMediaInvoice:                    SchemaOriginTelegram,
	TagMessageActionEmpty:                     SchemaOriginTelegram,
	TagMessageActionChatCreate:                SchemaOriginTelegram,
	TagMessageActionChatEditTitle:             SchemaOriginTelegram,
	TagMessageActionChatEditPhoto:             SchemaOriginTelegram,
	TagMessageActionChatDeletePhoto:           SchemaOriginTelegram,
	TagMessageActionChatAddUser:               SchemaOriginTelegram,
	TagMessageActionChatDeleteUser:            SchemaOriginTelegram,
	TagMessageActionChatJoinedByLink:          SchemaOriginTelegram,
	TagMessageActionChannelCreate:             SchemaOriginTelegram,
	TagMessageActionChatMigrateTo:             SchemaOriginTelegram,
	TagMessageActionChannelMigrateFrom:        SchemaOriginTelegram,
	TagMessageActionPinMessage:                SchemaOriginTelegram,
	TagMessageActionHistoryClear:              SchemaOriginTelegram,
	TagMessageActionGameScore:                 SchemaOriginTelegram,
	TagMessageActionPaymentSentMe:             SchemaOriginTelegram,
	TagMessageActionPaymentSent:               SchemaOriginTelegram,
	TagMessageActionPhoneCall:                 SchemaOriginTelegram,
	TagDialog:                                 SchemaOriginTelegram,
	TagPhotoEmpty:                             SchemaOriginTelegram,
	TagPhoto:                                  SchemaOriginTelegram,
	TagPhotoSizeEmpty:                         SchemaOriginTelegram,
	TagPhotoSize:                              SchemaOriginTelegram,
	TagPhotoCachedSize:                        SchemaOriginTelegram,
	TagGeoPointEmpty:                          SchemaOriginTelegram,
	TagGeoPoint:                               SchemaOriginTelegram,
	TagAuthCheckedPhone:                       SchemaOriginTelegram,
	TagAuthSentCode:                           SchemaOriginTelegram,
	TagAuthAuthorization:                      SchemaOriginTelegram,
	TagAuthExportedAuthorization:              SchemaOriginTelegram,
	TagInputNotifyPeer:                        SchemaOriginTelegram,
	TagInputNotifyUsers:                       SchemaOriginTelegram,
	TagInputNotifyChats:                       SchemaOriginTelegram,
	TagInputNotifyAll:                         SchemaOriginTelegram,
	TagInputPeerNotifyEventsEmpty:             SchemaOriginTelegram,
	TagInputPeerNotifyEventsAll:               SchemaOriginTelegram,
	TagInputPeerNotifySettings:                SchemaOriginTelegram,
	TagPeerNotifyEventsEmpty:                  SchemaOriginTelegram,
	TagPeerNotifyEventsAll:                    SchemaOriginTelegram,
	TagPeerNotifySettingsEmpty:                SchemaOriginTelegram,
	TagPeerNotifySettings:                     SchemaOriginTelegram,
	TagPeerSettings:                           SchemaOriginTelegram,
	TagWallPaper:                              SchemaOriginTelegram,
	TagWallPaperSolid:                         SchemaOriginTelegram,
	TagInputReportReasonSpam:                  SchemaOriginTelegram,
	TagInputReportReasonViolence:              SchemaOriginTelegram,
	TagInputReportReasonPornography:           SchemaOriginTelegram,
	TagInputReportReasonOther:                 SchemaOriginTelegram,
	TagUserFull:                               SchemaOriginTelegram,
	TagContact:                                SchemaOriginTelegram,
	TagImportedContact:                        SchemaOriginTelegram,
	TagContactBlocked:                         SchemaOriginTelegram,
	TagContactStatus:                          SchemaOriginTelegram,
	TagContactsLink:                           SchemaOriginTelegram,
	TagContactsContactsNotModified:            SchemaOriginTelegram,
	TagContactsContacts:                       SchemaOriginTelegram,
	TagContactsImportedContacts:               SchemaOriginTelegram,
	TagContactsBlocked:                        SchemaOriginTelegram,
	TagContactsBlockedSlice:                   SchemaOriginTelegram,
	TagMessagesDialogs:                        SchemaOriginTelegram,
	TagMessagesDialogsSlice:                   SchemaOriginTelegram,
	TagMessagesMessages:                       SchemaOriginTelegram,
	TagMessagesMessagesSlice:                  SchemaOriginTelegram,
	TagMessagesChannelMessages:                SchemaOriginTelegram,
	TagMessagesChats:                          SchemaOriginTelegram,
	TagMessagesChatsSlice:                     SchemaOriginTelegram,
	TagMessagesChatFull:                       SchemaOriginTelegram,
	TagMessagesAffectedHistory:                SchemaOriginTelegram,
	TagInputMessagesFilterEmpty:               SchemaOriginTelegram,
	TagInputMessagesFilterPhotos:              SchemaOriginTelegram,
	TagInputMessagesFilterVideo:               SchemaOriginTelegram,
	TagInputMessagesFilterPhotoVideo:          SchemaOriginTelegram,
	TagInputMessagesFilterPhotoVideoDocuments: SchemaOriginTelegram,
	TagInputMessagesFilterDocument:            SchemaOriginTelegram,
	TagInputMessagesFilterUrl:                 SchemaOriginTelegram,
	TagInputMessagesFilterGif:                 SchemaOriginTelegram,
	TagInputMessagesFilterVoice:               SchemaOriginTelegram,
	TagInputMessagesFilterMusic:               SchemaOriginTelegram,
	TagInputMessagesFilterChatPhotos:          SchemaOriginTelegram,
	TagInputMessagesFilterPhoneCalls:          SchemaOriginTelegram,
	TagUpdateNewMessage:                       SchemaOriginTelegram,
	TagUpdateMessageID:                        SchemaOriginTelegram,
	TagUpdateDeleteMessages:                   SchemaOriginTelegram,
	TagUpdateUserTyping:                       SchemaOriginTelegram,
	TagUpdateChatUserTyping:                   SchemaOriginTelegram,
	TagUpdateChatParticipants:                 SchemaOriginTelegram,
	TagUpdateUserStatus:                       SchemaOriginTelegram,
	TagUpdateUserName:                         SchemaOriginTelegram,
	TagUpdateUserPhoto:                        SchemaOriginTelegram,
	TagUpdateContactRegistered:                SchemaOriginTelegram,
	TagUpdateContactLink:                      SchemaOriginTelegram,
	TagUpdateNewEncryptedMessage:              SchemaOriginTelegram,
	TagUpdateEncryptedChatTyping:              SchemaOriginTelegram,
	TagUpdateEncryption:                       SchemaOriginTelegram,
	TagUpdateEncryptedMessagesRead:            SchemaOriginTelegram,
	TagUpdateChatParticipantAdd:               SchemaOriginTelegram,
	TagUpdateChatParticipantDelete:            SchemaOriginTelegram,
	TagUpdateDCOptions:                        SchemaOriginTelegram,
	TagUpdateUserBlocked:                      SchemaOriginTelegram,
	TagUpdateNotifySettings:                   SchemaOriginTelegram,
	TagUpdateServiceNotification:              SchemaOriginTelegram,
	TagUpdatePrivacy:                          SchemaOriginTelegram,
	TagUpdateUserPhone:                        SchemaOriginTelegram,
	TagUpdateReadHistoryInbox:                 SchemaOriginTelegram,
	TagUpdateReadHistoryOutbox:                SchemaOriginTelegram,
	TagUpdateWebPage:                          SchemaOriginTelegram,
	TagUpdateReadMessagesContents:             SchemaOriginTelegram,
	TagUpdateChannelTooLong:                   SchemaOriginTelegram,
	TagUpdateChannel:                          SchemaOriginTelegram,
	TagUpdateNewChannelMessage:                SchemaOriginTelegram,
	TagUpdateReadChannelInbox:                 SchemaOriginTelegram,
	TagUpdateDeleteChannelMessages:            SchemaOriginTelegram,
	TagUpdateChannelMessageViews:              SchemaOriginTelegram,
	TagUpdateChatAdmins:                       SchemaOriginTelegram,
	TagUpdateChatParticipantAdmin:             SchemaOriginTelegram,
	TagUpdateNewStickerSet:                    SchemaOriginTelegram,
	TagUpdateStickerSetsOrder:                 SchemaOriginTelegram,
	TagUpdateStickerSets:                      SchemaOriginTelegram,
	TagUpdateSavedGifs:                        SchemaOriginTelegram,
	TagUpdateBotInlineQuery:                   SchemaOriginTelegram,
	TagUpdateBotInlineSend:                    SchemaOriginTelegram,
	TagUpdateEditChannelMessage:               SchemaOriginTelegram,
	TagUpdateChannelPinnedMessage:             SchemaOriginTelegram,
	TagUpdateBotCallbackQuery:                 SchemaOriginTelegram,
	TagUpdateEditMessage:                      SchemaOriginTelegram,
	TagUpdateInlineBotCallbackQuery:           SchemaOriginTelegram,
	TagUpdateReadChannelOutbox:                SchemaOriginTelegram,
	TagUpdateDraftMessage:                     SchemaOriginTelegram,
	TagUpdateReadFeaturedStickers:             SchemaOriginTelegram,
	TagUpdateRecentStickers:                   SchemaOriginTelegram,
	TagUpdateConfig:                           SchemaOriginTelegram,
	TagUpdatePtsChanged:                       SchemaOriginTelegram,
	TagUpdateChannelWebPage:                   SchemaOriginTelegram,
	TagUpdateDialogPinned:                     SchemaOriginTelegram,
	TagUpdatePinnedDialogs:                    SchemaOriginTelegram,
	TagUpdateBotWebhookJSON:                   SchemaOriginTelegram,
	TagUpdateBotWebhookJSONQuery:              SchemaOriginTelegram,
	TagUpdateBotShippingQuery:                 SchemaOriginTelegram,
	TagUpdateBotPrecheckoutQuery:              SchemaOriginTelegram,
	TagUpdatePhoneCall:                        SchemaOriginTelegram,
	TagUpdatesState:                           SchemaOriginTelegram,
	TagUpdatesDifferenceEmpty:                 SchemaOriginTelegram,
	TagUpdatesDifference:                      SchemaOriginTelegram,
	TagUpdatesDifferenceSlice:                 SchemaOriginTelegram,
	TagUpdatesDifferenceTooLong:               SchemaOriginTelegram,
	TagUpdatesTooLong:                         SchemaOriginTelegram,
	TagUpdateShortMessage:                     SchemaOriginTelegram,
	TagUpdateShortChatMessage:                 SchemaOriginTelegram,
	TagUpdateShort:                            SchemaOriginTelegram,
	TagUpdatesCombined:                        SchemaOriginTelegram,
	TagUpdates:                                SchemaOriginTelegram,
	TagUpdateShortSentMessage:                 SchemaOriginTelegram,
	TagPhotosPhotos:                           SchemaOriginTelegram,
	TagPhotosPhotosSlice:                      SchemaOriginTelegram,
	TagPhotosPhoto:                            SchemaOriginTelegram,
	TagUploadFile:                             SchemaOriginTelegram,
	TagDCOption:                               SchemaOriginTelegram,
	TagConfig:                                 SchemaOriginTelegram,
	TagNearestDC:                              SchemaOriginTelegram,
	TagHelpAppUpdate:                          SchemaOriginTelegram,
	TagHelpNoAppUpdate:                        SchemaOriginTelegram,
	TagHelpInviteText:                         SchemaOriginTelegram,
	TagEncryptedChatEmpty:                     SchemaOriginTelegram,
	TagEncryptedChatWaiting:                   SchemaOriginTelegram,
	TagEncryptedChatRequested:                 SchemaOriginTelegram,
	TagEncryptedChat:                          SchemaOriginTelegram,
	TagEncryptedChatDiscarded:                 SchemaOriginTelegram,
	TagInputEncryptedChat:                     SchemaOriginTelegram,
	TagEncryptedFileEmpty:                     SchemaOriginTelegram,
	TagEncryptedFile:                          SchemaOriginTelegram,
	TagInputEncryptedFileEmpty:                SchemaOriginTelegram,
	TagInputEncryptedFileUploaded:             SchemaOriginTelegram,
	TagInputEncryptedFile:                     SchemaOriginTelegram,
	TagInputEncryptedFileBigUploaded:          SchemaOriginTelegram,
	TagEncryptedMessage:                       SchemaOriginTelegram,
	TagEncryptedMessageService:                SchemaOriginTelegram,
	TagMessagesDHConfigNotModified:            SchemaOriginTelegram,
	TagMessagesDHConfig:                       SchemaOriginTelegram,
	TagMessagesSentEncryptedMessage:           SchemaOriginTelegram,
	TagMessagesSentEncryptedFile:              SchemaOriginTelegram,
	TagInputDocumentEmpty:                     SchemaOriginTelegram,
	TagInputDocument:                          SchemaOriginTelegram,
	TagDocumentEmpty:                          SchemaOriginTelegram,
	TagDocument:                               SchemaOriginTelegram,
	TagHelpSupport:                            SchemaOriginTelegram,
	TagNotifyPeer:                             SchemaOriginTelegram,
	TagNotifyUsers:                            SchemaOriginTelegram,
	TagNotifyChats:                            SchemaOriginTelegram,
	TagNotifyAll:                              SchemaOriginTelegram,
	TagSendMessageTypingAction:                SchemaOriginTelegram,
	TagSendMessageCancelAction:                SchemaOriginTelegram,
	TagSendMessageRecordVideoAction:           SchemaOriginTelegram,
	TagSendMessageUploadVideoAction:           SchemaOriginTelegram,
	TagSendMessageRecordAudioAction:           SchemaOriginTelegram,
	TagSendMessageUploadAudioAction:           SchemaOriginTelegram,
	TagSendMessageUploadPhotoAction:           SchemaOriginTelegram,
	TagSendMessageUploadDocumentAction:        SchemaOriginTelegram,
	TagSendMessageGeoLocationAction:           SchemaOriginTelegram,
	TagSendMessageChooseContactAction:         SchemaOriginTelegram,
	TagSendMessageGamePlayAction:              SchemaOriginTelegram,
	TagContactsFound:                          SchemaOriginTelegram,
	TagInputPrivacyKeyStatusTimestamp:         SchemaOriginTelegram,
	TagInputPrivacyKeyChatInvite:              SchemaOriginTelegram,
	TagInputPrivacyKeyPhoneCall:               SchemaOriginTelegram,
	TagPrivacyKeyStatusTimestamp:              SchemaOriginTelegram,
	TagPrivacyKeyChatInvite:                   SchemaOriginTelegram,
	TagPrivacyKeyPhoneCall:                    SchemaOriginTelegram,
	TagInputPrivacyValueAllowContacts:         SchemaOriginTelegram,
	TagInputPrivacyValueAllowAll:              SchemaOriginTelegram,
	TagInputPrivacyValueAllowUsers:            SchemaOriginTelegram,
	TagInputPrivacyValueDisallowContacts:      SchemaOriginTelegram,
	TagInputPrivacyValueDisallowAll:           SchemaOriginTelegram,
	TagInputPrivacyValueDisallowUsers:         SchemaOriginTelegram,
	TagPrivacyValueAllowContacts:              SchemaOriginTelegram,
	TagPrivacyValueAllowAll:                   SchemaOriginTelegram,
	TagPrivacyValueAllowUsers:                 SchemaOriginTelegram,
	TagPrivacyValueDisallowContacts:           SchemaOriginTelegram,
	TagPrivacyValueDisallowAll:                SchemaOriginTelegram,
	TagPrivacyValueDisallowUsers:              SchemaOriginTelegram,
	TagAccountPrivacyRules:                    SchemaOriginTelegram,
	TagAccountDaysTTL:                         SchemaOriginTelegram,
	TagDocumentAttributeImageSize:             SchemaOriginTelegram,
	TagDocumentAttributeAnimated:              SchemaOriginTelegram,
	TagDocumentAttributeSticker:               SchemaOriginTelegram,
	TagDocumentAttributeVideo:                 SchemaOriginTelegram,
	TagDocumentAttributeAudio:                 SchemaOriginTelegram,
	TagDocumentAttributeFilename:              SchemaOriginTelegram,
	TagDocumentAttributeHasStickers:           SchemaOriginTelegram,
	TagMessagesStickersNotModified:            SchemaOriginTelegram,
	TagMessagesStickers:                       SchemaOriginTelegram,
	TagStickerPack:                            SchemaOriginTelegram,
	TagMessagesAllStickersNotModified:         SchemaOriginTelegram,
	TagMessagesAllStickers:                    SchemaOriginTelegram,
	TagDisabledFeature:                        SchemaOriginTelegram,
	TagMessagesAffectedMessages:               SchemaOriginTelegram,
	TagContactLinkUnknown:                     SchemaOriginTelegram,
	TagContactLinkNone:                        SchemaOriginTelegram,
	TagContactLinkHasPhone:                    SchemaOriginTelegram,
	TagContactLinkContact:                     SchemaOriginTelegram,
	TagWebPageEmpty:                           SchemaOriginTelegram,
	TagWebPagePending:                         SchemaOriginTelegram,
	TagWebPage:                                SchemaOriginTelegram,
	TagWebPageNotModified:                     SchemaOriginTelegram,
	TagAuthorization:                          SchemaOriginTelegram,
	TagAccountAuthorizations:                  SchemaOriginTelegram,
	TagAccountNoPassword:                      SchemaOriginTelegram,
	TagAccountPassword:                        SchemaOriginTelegram,
	TagAccountPasswordSettings:                SchemaOriginTelegram,
	TagAccountPasswordInputSettings:           SchemaOriginTelegram,
	TagAuthPasswordRecovery:                   SchemaOriginTelegram,
	TagReceivedNotifyMessage:                  SchemaOriginTelegram,
	TagChatInviteEmpty:                        SchemaOriginTelegram,
	TagChatInviteExported:                     SchemaOriginTelegram,
	TagChatInviteAlready:                      SchemaOriginTelegram,
	TagChatInvite:                             SchemaOriginTelegram,
	TagInputStickerSetEmpty:                   SchemaOriginTelegram,
	TagInputStickerSetID:                      SchemaOriginTelegram,
	TagInputStickerSetShortName:               SchemaOriginTelegram,
	TagStickerSet:                             SchemaOriginTelegram,
	TagMessagesStickerSet:                     SchemaOriginTelegram,
	TagBotCommand:                             SchemaOriginTelegram,
	TagBotInfo:                                SchemaOriginTelegram,
	TagKeyboardButton:                         SchemaOriginTelegram,
	TagKeyboardButtonUrl:                      SchemaOriginTelegram,
	TagKeyboardButtonCallback:                 SchemaOriginTelegram,
	TagKeyboardButtonRequestPhone:             SchemaOriginTelegram,
	TagKeyboardButtonRequestGeoLocation:       SchemaOriginTelegram,
	TagKeyboardButtonSwitchInline:             SchemaOriginTelegram,
	TagKeyboardButtonGame:                     SchemaOriginTelegram,
	TagKeyboardButtonBuy:                      SchemaOriginTelegram,
	TagKeyboardButtonRow:                      SchemaOriginTelegram,
	TagReplyKeyboardHide:                      SchemaOriginTelegram,
	TagReplyKeyboardForceReply:                SchemaOriginTelegram,
	TagReplyKeyboardMarkup:                    SchemaOriginTelegram,
	TagReplyInlineMarkup:                      SchemaOriginTelegram,
	TagMessageEntityUnknown:                   SchemaOriginTelegram,
	TagMessageEntityMention:                   SchemaOriginTelegram,
	TagMessageEntityHashtag:                   SchemaOriginTelegram,
	TagMessageEntityBotCommand:                SchemaOriginTelegram,
	TagMessageEntityUrl:                       SchemaOriginTelegram,
	TagMessageEntityEmail:                     SchemaOriginTelegram,
	TagMessageEntityBold:                      SchemaOriginTelegram,
	TagMessageEntityItalic:                    SchemaOriginTelegram,
	TagMessageEntityCode:                      SchemaOriginTelegram,
	TagMessageEntityPre:                       SchemaOriginTelegram,
	TagMessageEntityTextUrl:                   SchemaOriginTelegram,
	TagMessageEntityMentionName:               SchemaOriginTelegram,
	TagInputMessageEntityMentionName:          SchemaOriginTelegram,
	TagInputChannelEmpty:                      SchemaOriginTelegram,
	TagInputChannel:                           SchemaOriginTelegram,
	TagContactsResolvedPeer:                   SchemaOriginTelegram,
	TagMessageRange:                           SchemaOriginTelegram,
	TagUpdatesChannelDifferenceEmpty:          SchemaOriginTelegram,
	TagUpdatesChannelDifferenceTooLong:        SchemaOriginTelegram,
	TagUpdatesChannelDifference:               SchemaOriginTelegram,
	TagChannelMessagesFilterEmpty:             SchemaOriginTelegram,
	TagChannelMessagesFilter:                  SchemaOriginTelegram,
	TagChannelParticipant:                     SchemaOriginTelegram,
	TagChannelParticipantSelf:                 SchemaOriginTelegram,
	TagChannelParticipantModerator:            SchemaOriginTelegram,
	TagChannelParticipantEditor:               SchemaOriginTelegram,
	TagChannelParticipantKicked:               SchemaOriginTelegram,
	TagChannelParticipantCreator:              SchemaOriginTelegram,
	TagChannelParticipantsRecent:              SchemaOriginTelegram,
	TagChannelParticipantsAdmins:              SchemaOriginTelegram,
	TagChannelParticipantsKicked:              SchemaOriginTelegram,
	TagChannelParticipantsBots:                SchemaOriginTelegram,
	TagChannelRoleEmpty:                       SchemaOriginTelegram,
	TagChannelRoleModerator:                   SchemaOriginTelegram,
	TagChannelRoleEditor:                      SchemaOriginTelegram,
	TagChannelsChannelParticipants:            SchemaOriginTelegram,
	TagChannelsChannelParticipant:             SchemaOriginTelegram,
	TagHelpTermsOfService:                     SchemaOriginTelegram,
	TagFoundGif:                               SchemaOriginTelegram,
	TagFoundGifCached:                         SchemaOriginTelegram,
	TagMessagesFoundGifs:                      SchemaOriginTelegram,
	TagMessagesSavedGifsNotModified:           SchemaOriginTelegram,
	TagMessagesSavedGifs:                      SchemaOriginTelegram,
	TagInputBotInlineMessageMediaAuto:         SchemaOriginTelegram,
	TagInputBotInlineMessageText:              SchemaOriginTelegram,
	TagInputBotInlineMessageMediaGeo:          SchemaOriginTelegram,
	TagInputBotInlineMessageMediaVenue:        SchemaOriginTelegram,
	TagInputBotInlineMessageMediaContact:      SchemaOriginTelegram,
	TagInputBotInlineMessageGame:              SchemaOriginTelegram,
	TagInputBotInlineResult:                   SchemaOriginTelegram,
	TagInputBotInlineResultPhoto:              SchemaOriginTelegram,
	TagInputBotInlineResultDocument:           SchemaOriginTelegram,
	TagInputBotInlineResultGame:               SchemaOriginTelegram,
	TagBotInlineMessageMediaAuto:              SchemaOriginTelegram,
	TagBotInlineMessageText:                   SchemaOriginTelegram,
	TagBotInlineMessageMediaGeo:               SchemaOriginTelegram,
	TagBotInlineMessageMediaVenue:             SchemaOriginTelegram,
	TagBotInlineMessageMediaContact:           SchemaOriginTelegram,
	TagBotInlineResult:                        SchemaOriginTelegram,
	TagBotInlineMediaResult:                   SchemaOriginTelegram,
	TagMessagesBotResults:                     SchemaOriginTelegram,
	TagExportedMessageLink:                    SchemaOriginTelegram,
	TagMessageFwdHeader:                       SchemaOriginTelegram,
	TagAuthCodeTypeSms:                        SchemaOriginTelegram,
	TagAuthCodeTypeCall:                       SchemaOriginTelegram,
	TagAuthCodeTypeFlashCall:                  SchemaOriginTelegram,
	TagAuthSentCodeTypeApp:                    SchemaOriginTelegram,
	TagAuthSentCodeTypeSms:                    SchemaOriginTelegram,
	TagAuthSentCodeTypeCall:                   SchemaOriginTelegram,
	TagAuthSentCodeTypeFlashCall:              SchemaOriginTelegram,
	TagMessagesBotCallbackAnswer:              SchemaOriginTelegram,
	TagMessagesMessageEditData:                SchemaOriginTelegram,
	TagInputBotInlineMessageID:                SchemaOriginTelegram,
	TagInlineBotSwitchPM:                      SchemaOriginTelegram,
	TagMessagesPeerDialogs:                    SchemaOriginTelegram,
	TagTopPeer:                                SchemaOriginTelegram,
	TagTopPeerCategoryBotsPM:                  SchemaOriginTelegram,
	TagTopPeerCategoryBotsInline:              SchemaOriginTelegram,
	TagTopPeerCategoryCorrespondents:          SchemaOriginTelegram,
	TagTopPeerCategoryGroups:                  SchemaOriginTelegram,
	TagTopPeerCategoryChannels:                SchemaOriginTelegram,
	TagTopPeerCategoryPeers:                   SchemaOriginTelegram,
	TagContactsTopPeersNotModified:            SchemaOriginTelegram,
	TagContactsTopPeers:                       SchemaOriginTelegram,
	TagDraftMessageEmpty:                      SchemaOriginTelegram,
	TagDraftMessage:                           SchemaOriginTelegram,
	TagMessagesFeaturedStickersNotModified:    SchemaOriginTelegram,
	TagMessagesFeaturedStickers:               SchemaOriginTelegram,
	TagMessagesRecentStickersNotModified:      SchemaOriginTelegram,
	TagMessagesRecentStickers:                 SchemaOriginTelegram,
	TagMessagesArchivedStickers:               SchemaOriginTelegram,
	TagMessagesStickerSetInstallResultSuccess: SchemaOriginTelegram,
	TagMessagesStickerSetInstallResultArchive: SchemaOriginTelegram,
	TagStickerSetCovered:                      SchemaOriginTelegram,
	TagStickerSetMultiCovered:                 SchemaOriginTelegram,
	TagMaskCoords:                             SchemaOriginTelegram,
	TagInputStickeredMediaPhoto:               SchemaOriginTelegram,
	TagInputStickeredMediaDocument:            SchemaOriginTelegram,
	TagGame:                             SchemaOriginTelegram,
	TagInputGameID:                      SchemaOriginTelegram,
	TagInputGameShortName:               SchemaOriginTelegram,
	TagHighScore:                        SchemaOriginTelegram,
	TagMessagesHighScores:               SchemaOriginTelegram,
	TagTextEmpty:                        SchemaOriginTelegram,
	TagTextPlain:                        SchemaOriginTelegram,
	TagTextBold:                         SchemaOriginTelegram,
	TagTextItalic:                       SchemaOriginTelegram,
	TagTextUnderline:                    SchemaOriginTelegram,
	TagTextStrike:                       SchemaOriginTelegram,
	TagTextFixed:                        SchemaOriginTelegram,
	TagTextUrl:                          SchemaOriginTelegram,
	TagTextEmail:                        SchemaOriginTelegram,
	TagTextConcat:                       SchemaOriginTelegram,
	TagPageBlockUnsupported:             SchemaOriginTelegram,
	TagPageBlockTitle:                   SchemaOriginTelegram,
	TagPageBlockSubtitle:                SchemaOriginTelegram,
	TagPageBlockAuthorDate:              SchemaOriginTelegram,
	TagPageBlockHeader:                  SchemaOriginTelegram,
	TagPageBlockSubheader:               SchemaOriginTelegram,
	TagPageBlockParagraph:               SchemaOriginTelegram,
	TagPageBlockPreformatted:            SchemaOriginTelegram,
	TagPageBlockFooter:                  SchemaOriginTelegram,
	TagPageBlockDivider:                 SchemaOriginTelegram,
	TagPageBlockAnchor:                  SchemaOriginTelegram,
	TagPageBlockList:                    SchemaOriginTelegram,
	TagPageBlockBlockquote:              SchemaOriginTelegram,
	TagPageBlockPullquote:               SchemaOriginTelegram,
	TagPageBlockPhoto:                   SchemaOriginTelegram,
	TagPageBlockVideo:                   SchemaOriginTelegram,
	TagPageBlockCover:                   SchemaOriginTelegram,
	TagPageBlockEmbed:                   SchemaOriginTelegram,
	TagPageBlockEmbedPost:               SchemaOriginTelegram,
	TagPageBlockCollage:                 SchemaOriginTelegram,
	TagPageBlockSlideshow:               SchemaOriginTelegram,
	TagPagePart:                         SchemaOriginTelegram,
	TagPageFull:                         SchemaOriginTelegram,
	TagPhoneCallDiscardReasonMissed:     SchemaOriginTelegram,
	TagPhoneCallDiscardReasonDisconnect: SchemaOriginTelegram,
	TagPhoneCallDiscardReasonHangup:     SchemaOriginTelegram,
	TagPhoneCallDiscardReasonBusy:       SchemaOriginTelegram,
	TagDataJSON:                         SchemaOriginTelegram,
	TagLabeledPrice:                     SchemaOriginTelegram,
	TagInvoice:                          SchemaOriginTelegram,
	TagPaymentCharge:                    SchemaOriginTelegram,
	TagPostAddress:                      SchemaOriginTelegram,
	TagPaymentRequestedInfo:             SchemaOriginTelegram,
	TagPaymentSavedCredentialsCard:      SchemaOriginTelegram,
	TagWebDocument:                      SchemaOriginTelegram,
	TagInputWebDocument:                 SchemaOriginTelegram,
	TagInputWebFileLocation:             SchemaOriginTelegram,
	TagUploadWebFile:                    SchemaOriginTelegram,
	TagPaymentsPaymentForm:              SchemaOriginTelegram,
	TagPaymentsValidatedRequestedInfo:   SchemaOriginTelegram,
	TagPaymentsPaymentResult:            SchemaOriginTelegram,
	TagPaymentsPaymentVerficationNeeded: SchemaOriginTelegram,
	TagPaymentsPaymentReceipt:           SchemaOriginTelegram,
	TagPaymentsSavedInfo:                SchemaOriginTelegram,
	TagInputPaymentCredentialsSaved:     SchemaOriginTelegram,
	TagInputPaymentCredentials:          SchemaOriginTelegram,
	TagAccountTmpPassword:               SchemaOriginTelegram,
	TagShippingOption:                   SchemaOriginTelegram,
	TagInputPhoneCall:                   SchemaOriginTelegram,
	TagPhoneCallEmpty:                   SchemaOriginTelegram,
	TagPhoneCallWaiting:                 SchemaOriginTelegram,
	TagPhoneCallRequested:               SchemaOriginTelegram,
	TagPhoneCallAccepted:                SchemaOriginTelegram,
	TagPhoneCall:                        SchemaOriginTelegram,
	TagPhoneCallDiscarded:               SchemaOriginTelegram,
	TagPhoneConnection:                  SchemaOriginTelegram,
	TagPhoneCallProtocol:                SchemaOriginTelegram,
	TagPhonePhoneCall:                   SchemaOriginTelegram,
	TagInvokeAfterMsg:                   SchemaOriginTelegram,
	TagInvokeAfterMsgs:                  SchemaOriginTelegram,
	TagInitConnection:                   SchemaOriginTelegram,
	TagInvokeWithLayer:                  SchemaOriginTelegram,
	TagInvokeWithoutUpdates:             SchemaOriginTelegram,
	TagAuthCheckPhone:                   SchemaOriginTelegram,
	TagAuthSendCode:                     SchemaOriginTelegram,
	TagAuthSignUp:                       SchemaOriginTelegram,
	TagAuthSignIn:                       SchemaOriginTelegram,
	TagAuthLogOut:                       SchemaOriginTelegram,
	TagAuthResetAuthorizations:          SchemaOriginTelegram,
	TagAuthSendInvites:                  SchemaOriginTelegram,
	TagAuthExportAuthorization:          SchemaOriginTelegram,
	TagAuthImportAuthorization:          SchemaOriginTelegram,
	TagAuthBindTempAuthKey:              SchemaOriginTelegram,
	TagAuthImportBotAuthorization:       SchemaOriginTelegram,
	TagAuthCheckPassword:                SchemaOriginTelegram,
	TagAuthRequestPasswordRecovery:      SchemaOriginTelegram,
	TagAuthRecoverPassword:              SchemaOriginTelegram,
	TagAuthResendCode:                   SchemaOriginTelegram,
	TagAuthCancelCode:                   SchemaOriginTelegram,
	TagAuthDropTempAuthKeys:             SchemaOriginTelegram,
	TagAccountRegisterDevice:            SchemaOriginTelegram,
	TagAccountUnregisterDevice:          SchemaOriginTelegram,
	TagAccountUpdateNotifySettings:      SchemaOriginTelegram,
	TagAccountGetNotifySettings:         SchemaOriginTelegram,
	TagAccountResetNotifySettings:       SchemaOriginTelegram,
	TagAccountUpdateProfile:             SchemaOriginTelegram,
	TagAccountUpdateStatus:              SchemaOriginTelegram,
	TagAccountGetWallPapers:             SchemaOriginTelegram,
	TagAccountReportPeer:                SchemaOriginTelegram,
	TagAccountCheckUsername:             SchemaOriginTelegram,
	TagAccountUpdateUsername:            SchemaOriginTelegram,
	TagAccountGetPrivacy:                SchemaOriginTelegram,
	TagAccountSetPrivacy:                SchemaOriginTelegram,
	TagAccountDeleteAccount:             SchemaOriginTelegram,
	TagAccountGetAccountTTL:             SchemaOriginTelegram,
	TagAccountSetAccountTTL:             SchemaOriginTelegram,
	TagAccountSendChangePhoneCode:       SchemaOriginTelegram,
	TagAccountChangePhone:               SchemaOriginTelegram,
	TagAccountUpdateDeviceLocked:        SchemaOriginTelegram,
	TagAccountGetAuthorizations:         SchemaOriginTelegram,
	TagAccountResetAuthorization:        SchemaOriginTelegram,
	TagAccountGetPassword:               SchemaOriginTelegram,
	TagAccountGetPasswordSettings:       SchemaOriginTelegram,
	TagAccountUpdatePasswordSettings:    SchemaOriginTelegram,
	TagAccountSendConfirmPhoneCode:      SchemaOriginTelegram,
	TagAccountConfirmPhone:              SchemaOriginTelegram,
	TagAccountGetTmpPassword:            SchemaOriginTelegram,
	TagUsersGetUsers:                    SchemaOriginTelegram,
	TagUsersGetFullUser:                 SchemaOriginTelegram,
	TagContactsGetStatuses:              SchemaOriginTelegram,
	TagContactsGetContacts:              SchemaOriginTelegram,
	TagContactsImportContacts:           SchemaOriginTelegram,
	TagContactsDeleteContact:            SchemaOriginTelegram,
	TagContactsDeleteContacts:           SchemaOriginTelegram,
	TagContactsBlock:                    SchemaOriginTelegram,
	TagContactsUnblock:                  SchemaOriginTelegram,
	TagContactsGetBlocked:               SchemaOriginTelegram,
	TagContactsExportCard:               SchemaOriginTelegram,
	TagContactsImportCard:               SchemaOriginTelegram,
	TagContactsSearch:                   SchemaOriginTelegram,
	TagContactsResolveUsername:          SchemaOriginTelegram,
	TagContactsGetTopPeers:              SchemaOriginTelegram,
	TagContactsResetTopPeerRating:       SchemaOriginTelegram,
	TagMessagesGetMessages:              SchemaOriginTelegram,
	TagMessagesGetDialogs:               SchemaOriginTelegram,
	TagMessagesGetHistory:               SchemaOriginTelegram,
	TagMessagesSearch:                   SchemaOriginTelegram,
	TagMessagesReadHistory:              SchemaOriginTelegram,
	TagMessagesDeleteHistory:            SchemaOriginTelegram,
	TagMessagesDeleteMessages:           SchemaOriginTelegram,
	TagMessagesReceivedMessages:         SchemaOriginTelegram,
	TagMessagesSetTyping:                SchemaOriginTelegram,
	TagMessagesSendMessage:              SchemaOriginTelegram,
	TagMessagesSendMedia:                SchemaOriginTelegram,
	TagMessagesForwardMessages:          SchemaOriginTelegram,
	TagMessagesReportSpam:               SchemaOriginTelegram,
	TagMessagesHideReportSpam:           SchemaOriginTelegram,
	TagMessagesGetPeerSettings:          SchemaOriginTelegram,
	TagMessagesGetChats:                 SchemaOriginTelegram,
	TagMessagesGetFullChat:              SchemaOriginTelegram,
	TagMessagesEditChatTitle:            SchemaOriginTelegram,
	TagMessagesEditChatPhoto:            SchemaOriginTelegram,
	TagMessagesAddChatUser:              SchemaOriginTelegram,
	TagMessagesDeleteChatUser:           SchemaOriginTelegram,
	TagMessagesCreateChat:               SchemaOriginTelegram,
	TagMessagesForwardMessage:           SchemaOriginTelegram,
	TagMessagesGetDHConfig:              SchemaOriginTelegram,
	TagMessagesRequestEncryption:        SchemaOriginTelegram,
	TagMessagesAcceptEncryption:         SchemaOriginTelegram,
	TagMessagesDiscardEncryption:        SchemaOriginTelegram,
	TagMessagesSetEncryptedTyping:       SchemaOriginTelegram,
	TagMessagesReadEncryptedHistory:     SchemaOriginTelegram,
	TagMessagesSendEncrypted:            SchemaOriginTelegram,
	TagMessagesSendEncryptedFile:        SchemaOriginTelegram,
	TagMessagesSendEncryptedService:     SchemaOriginTelegram,
	TagMessagesReceivedQueue:            SchemaOriginTelegram,
	TagMessagesReportEncryptedSpam:      SchemaOriginTelegram,
	TagMessagesReadMessageContents:      SchemaOriginTelegram,
	TagMessagesGetAllStickers:           SchemaOriginTelegram,
	TagMessagesGetWebPagePreview:        SchemaOriginTelegram,
	TagMessagesExportChatInvite:         SchemaOriginTelegram,
	TagMessagesCheckChatInvite:          SchemaOriginTelegram,
	TagMessagesImportChatInvite:         SchemaOriginTelegram,
	TagMessagesGetStickerSet:            SchemaOriginTelegram,
	TagMessagesInstallStickerSet:        SchemaOriginTelegram,
	TagMessagesUninstallStickerSet:      SchemaOriginTelegram,
	TagMessagesStartBot:                 SchemaOriginTelegram,
	TagMessagesGetMessagesViews:         SchemaOriginTelegram,
	TagMessagesToggleChatAdmins:         SchemaOriginTelegram,
	TagMessagesEditChatAdmin:            SchemaOriginTelegram,
	TagMessagesMigrateChat:              SchemaOriginTelegram,
	TagMessagesSearchGlobal:             SchemaOriginTelegram,
	TagMessagesReorderStickerSets:       SchemaOriginTelegram,
	TagMessagesGetDocumentByHash:        SchemaOriginTelegram,
	TagMessagesSearchGifs:               SchemaOriginTelegram,
	TagMessagesGetSavedGifs:             SchemaOriginTelegram,
	TagMessagesSaveGif:                  SchemaOriginTelegram,
	TagMessagesGetInlineBotResults:      SchemaOriginTelegram,
	TagMessagesSetInlineBotResults:      SchemaOriginTelegram,
	TagMessagesSendInlineBotResult:      SchemaOriginTelegram,
	TagMessagesGetMessageEditData:       SchemaOriginTelegram,
	TagMessagesEditMessage:              SchemaOriginTelegram,
	TagMessagesEditInlineBotMessage:     SchemaOriginTelegram,
	TagMessagesGetBotCallbackAnswer:     SchemaOriginTelegram,
	TagMessagesSetBotCallbackAnswer:     SchemaOriginTelegram,
	TagMessagesGetPeerDialogs:           SchemaOriginTelegram,
	TagMessagesSaveDraft:                SchemaOriginTelegram,
	TagMessagesGetAllDrafts:             SchemaOriginTelegram,
	TagMessagesGetFeaturedStickers:      SchemaOriginTelegram,
	TagMessagesReadFeaturedStickers:     SchemaOriginTelegram,
	TagMessagesGetRecentStickers:        SchemaOriginTelegram,
	TagMessagesSaveRecentSticker:        SchemaOriginTelegram,
	TagMessagesClearRecentStickers:      SchemaOriginTelegram,
	TagMessagesGetArchivedStickers:      SchemaOriginTelegram,
	TagMessagesGetMaskStickers:          SchemaOriginTelegram,
	TagMessagesGetAttachedStickers:      SchemaOriginTelegram,
	TagMessagesSetGameScore:             SchemaOriginTelegram,
	TagMessagesSetInlineGameScore:       SchemaOriginTelegram,
	TagMessagesGetGameHighScores:        SchemaOriginTelegram,
	TagMessagesGetInlineGameHighScores:  SchemaOriginTelegram,
	TagMessagesGetCommonChats:           SchemaOriginTelegram,
	TagMessagesGetAllChats:              SchemaOriginTelegram,
	TagMessagesGetWebPage:               SchemaOriginTelegram,
	TagMessagesToggleDialogPin:          SchemaOriginTelegram,
	TagMessagesReorderPinnedDialogs:     SchemaOriginTelegram,
	TagMessagesGetPinnedDialogs:         SchemaOriginTelegram,
	TagMessagesSetBotShippingResults:    SchemaOriginTelegram,
	TagMessagesSetBotPrecheckoutResults: SchemaOriginTelegram,
	TagUpdatesGetState:                  SchemaOriginTelegram,
	TagUpdatesGetDifference:             SchemaOriginTelegram,
	TagUpdatesGetChannelDifference:      SchemaOriginTelegram,
	TagPhotosUpdateProfilePhoto:         SchemaOriginTelegram,
	TagPhotosUploadProfilePhoto:         SchemaOriginTelegram,
	TagPhotosDeletePhotos:               SchemaOriginTelegram,
	TagPhotosGetUserPhotos:              SchemaOriginTelegram,
	TagUploadSaveFilePart:               SchemaOriginTelegram,
	TagUploadGetFile:                    SchemaOriginTelegram,
	TagUploadSaveBigFilePart:            SchemaOriginTelegram,
	TagUploadGetWebFile:                 SchemaOriginTelegram,
	TagHelpGetConfig:                    SchemaOriginTelegram,
	TagHelpGetNearestDC:                 SchemaOriginTelegram,
	TagHelpGetAppUpdate:                 SchemaOriginTelegram,
	TagHelpSaveAppLog:                   SchemaOriginTelegram,
	TagHelpGetInviteText:                SchemaOriginTelegram,
	TagHelpGetSupport:                   SchemaOriginTelegram,
	TagHelpGetAppChangelog:              SchemaOriginTelegram,
	TagHelpGetTermsOfService:            SchemaOriginTelegram,
	TagHelpSetBotUpdatesStatus:          SchemaOriginTelegram,
	TagChannelsReadHistory:              SchemaOriginTelegram,
	TagChannelsDeleteMessages:           SchemaOriginTelegram,
	TagChannelsDeleteUserHistory:        SchemaOriginTelegram,
	TagChannelsReportSpam:               SchemaOriginTelegram,
	TagChannelsGetMessages:              SchemaOriginTelegram,
	TagChannelsGetParticipants:          SchemaOriginTelegram,
	TagChannelsGetParticipant:           SchemaOriginTelegram,
	TagChannelsGetChannels:              SchemaOriginTelegram,
	TagChannelsGetFullChannel:           SchemaOriginTelegram,
	TagChannelsCreateChannel:            SchemaOriginTelegram,
	TagChannelsEditAbout:                SchemaOriginTelegram,
	TagChannelsEditAdmin:                SchemaOriginTelegram,
	TagChannelsEditTitle:                SchemaOriginTelegram,
	TagChannelsEditPhoto:                SchemaOriginTelegram,
	TagChannelsCheckUsername:            SchemaOriginTelegram,
	TagChannelsUpdateUsername:           SchemaOriginTelegram,
	TagChannelsJoinChannel:              SchemaOriginTelegram,
	TagChannelsLeaveChannel:             SchemaOriginTelegram,
	TagChannelsInviteToChannel:          SchemaOriginTelegram,
	TagChannelsKickFromChannel:          SchemaOriginTelegram,
	TagChannelsExportInvite:             SchemaOriginTelegram,
	TagChannelsDeleteChannel:            SchemaOriginTelegram,
	TagChannelsToggleInvites:            SchemaOriginTelegram,
	TagChannelsExportMessageLink:        SchemaOriginTelegram,
	TagChannelsToggleSignatures:         SchemaOriginTelegram,
	TagChannelsUpdatePinnedMessage:      SchemaOriginTelegram,
	TagChannelsGetAdminedPublicChannels: SchemaOriginTelegram,
	TagBotsSendCustomRequest:            SchemaOriginTelegram,
	TagBotsAnswerWebhookJSONQuery:       SchemaOriginTelegram,
	TagPaymentsGetPaymentForm:           SchemaOriginTelegram,
	TagPaymentsGetPaymentReceipt:        SchemaOriginTelegram,
	TagPaymentsValidateRequestedInfo:    SchemaOriginTelegram,
	TagPaymentsSendPaymentForm:          SchemaOriginTelegram,
	TagPaymentsGetSavedInfo:             SchemaOriginTelegram,
	TagPaymentsClearSavedInfo:           SchemaOriginTelegram,
	TagPhoneGetCallConfig:               SchemaOriginTelegram,
	TagPhoneRequestCall:                 SchemaOriginTelegram,
	TagPhoneAcceptCall:                  SchemaOriginTelegram,
	TagPhoneConfirmCall:                 SchemaOriginTelegram,
	TagPhoneReceivedCall:                SchemaOriginTelegram,
	TagPhoneDiscardCall:                 SchemaOriginTelegram,
	TagPhoneSetCallRating:               SchemaOriginTelegram,
	TagPhoneSaveCallDebug:               SchemaOriginTelegram,
	TagTrue:                             SchemaOriginBuiltin,
	TagBoolFalse:                        SchemaOriginBuiltin,
	TagBoolTrue:                         SchemaOriginBuiltin,
	TagString:                           SchemaOriginBuiltin,
	TagInt:                              SchemaOriginBuiltin,
	TagLong:                             SchemaOriginBuiltin,
	TagDouble:                           SchemaOriginBuiltin,
	TagBytes:                            SchemaOriginBuiltin,
	TagObject:                           SchemaOriginBuiltin,
	TagVector:                           SchemaOriginBuiltin,
}

// TLResPQ represents ctor resPQ#05162463 nonce:int128 server_nonce:int128 pq:bytes server_public_key_fingerprints:Vector<long> = ResPQ from MTProto
type TLResPQ struct {
	Nonce                       [16]byte // nonce:int128
	ServerNonce                 [16]byte // server_nonce:int128
	PQ                          *big.Int // pq:bytes
	ServerPublicKeyFingerprints []uint64 // server_public_key_fingerprints:Vector<long>
}

func (o *TLResPQ) Cmd() uint32 {
	return TagResPQ
}

func (o *TLResPQ) ReadBareFrom(r *tl.Reader) {
	r.ReadUint128(o.Nonce[:])
	r.ReadUint128(o.ServerNonce[:])
	o.PQ = r.ReadBigInt()
	if cmd := r.ReadCmd(); cmd != TagVector {
		r.Fail(errors.New("expected: vector"))
	}
	o.ServerPublicKeyFingerprints = make([]uint64, r.ReadInt())
	for i := 0; i < len(o.ServerPublicKeyFingerprints); i++ {
		o.ServerPublicKeyFingerprints[i] = r.ReadUint64()
	}
}

func (o *TLResPQ) WriteBareTo(w *tl.Writer) {
	w.WriteUint128(o.Nonce[:])
	w.WriteUint128(o.ServerNonce[:])
	w.WriteBigInt(o.PQ)
	w.WriteCmd(TagVector)
	w.WriteInt(len(o.ServerPublicKeyFingerprints))
	for i := 0; i < len(o.ServerPublicKeyFingerprints); i++ {
		w.WriteUint64(o.ServerPublicKeyFingerprints[i])
	}
}

func (o *TLResPQ) String() string {
	return tl.Pretty(o)
}

// TLPQInnerData represents ctor p_q_inner_data#83c95aec pq:bytes p:bytes q:bytes nonce:int128 server_nonce:int128 new_nonce:int256 = P_Q_inner_data from MTProto
type TLPQInnerData struct {
	PQ          *big.Int // pq:bytes
	P           *big.Int // p:bytes
	Q           *big.Int // q:bytes
	Nonce       [16]byte // nonce:int128
	ServerNonce [16]byte // server_nonce:int128
	NewNonce    [32]byte // new_nonce:int256
}

func (o *TLPQInnerData) Cmd() uint32 {
	return TagPQInnerData
}

func (o *TLPQInnerData) ReadBareFrom(r *tl.Reader) {
	o.PQ = r.ReadBigInt()
	o.P = r.ReadBigInt()
	o.Q = r.ReadBigInt()
	r.ReadUint128(o.Nonce[:])
	r.ReadUint128(o.ServerNonce[:])
	r.ReadFull(o.NewNonce[:])
}

func (o *TLPQInnerData) WriteBareTo(w *tl.Writer) {
	w.WriteBigInt(o.PQ)
	w.WriteBigInt(o.P)
	w.WriteBigInt(o.Q)
	w.WriteUint128(o.Nonce[:])
	w.WriteUint128(o.ServerNonce[:])
	w.Write(o.NewNonce[:])
}

func (o *TLPQInnerData) String() string {
	return tl.Pretty(o)
}

// TLServerDHParamsType represents Server_DH_Params from MTProto
type TLServerDHParamsType interface {
	IsTLServerDHParams()
	Cmd() uint32
	ReadBareFrom(r *tl.Reader)
	WriteBareTo(w *tl.Writer)
}

// TLServerDHInnerData represents ctor server_DH_inner_data#b5890dba nonce:int128 server_nonce:int128 g:int dh_prime:bytes g_a:bytes server_time:int = Server_DH_inner_data from MTProto
type TLServerDHInnerData struct {
	Nonce       [16]byte  // nonce:int128
	ServerNonce [16]byte  // server_nonce:int128
	G           int       // g:int
	DHPrime     *big.Int  // dh_prime:bytes
	GA          *big.Int  // g_a:bytes
	ServerTime  time.Time // server_time:int
}

func (o *TLServerDHInnerData) Cmd() uint32 {
	return TagServerDHInnerData
}

func (o *TLServerDHInnerData) ReadBareFrom(r *tl.Reader) {
	r.ReadUint128(o.Nonce[:])
	r.ReadUint128(o.ServerNonce[:])
	o.G = r.ReadInt()
	o.DHPrime = r.ReadBigInt()
	o.GA = r.ReadBigInt()
	o.ServerTime = r.ReadTimeSec32()
}

func (o *TLServerDHInnerData) WriteBareTo(w *tl.Writer) {
	w.WriteUint128(o.Nonce[:])
	w.WriteUint128(o.ServerNonce[:])
	w.WriteInt(o.G)
	w.WriteBigInt(o.DHPrime)
	w.WriteBigInt(o.GA)
	w.WriteTimeSec32(o.ServerTime)
}

func (o *TLServerDHInnerData) String() string {
	return tl.Pretty(o)
}

// TLClientDHInnerData represents ctor client_DH_inner_data#6643b654 nonce:int128 server_nonce:int128 retry_id:long g_b:bytes = Client_DH_Inner_Data from MTProto
type TLClientDHInnerData struct {
	Nonce       [16]byte // nonce:int128
	ServerNonce [16]byte // server_nonce:int128
	RetryID     uint64   // retry_id:long
	GB          *big.Int // g_b:bytes
}

func (o *TLClientDHInnerData) Cmd() uint32 {
	return TagClientDHInnerData
}

func (o *TLClientDHInnerData) ReadBareFrom(r *tl.Reader) {
	r.ReadUint128(o.Nonce[:])
	r.ReadUint128(o.ServerNonce[:])
	o.RetryID = r.ReadUint64()
	o.GB = r.ReadBigInt()
}

func (o *TLClientDHInnerData) WriteBareTo(w *tl.Writer) {
	w.WriteUint128(o.Nonce[:])
	w.WriteUint128(o.ServerNonce[:])
	w.WriteUint64(o.RetryID)
	w.WriteBigInt(o.GB)
}

func (o *TLClientDHInnerData) String() string {
	return tl.Pretty(o)
}

// TLSetClientDHParamsAnswerType represents Set_client_DH_params_answer from MTProto
type TLSetClientDHParamsAnswerType interface {
	IsTLSetClientDHParamsAnswer()
	Cmd() uint32
	ReadBareFrom(r *tl.Reader)
	WriteBareTo(w *tl.Writer)
}

// TLRPCResult represents ctor rpc_result#f35c6d01 req_msg_id:long result:Object = RpcResult from MTProto
type TLRPCResult struct {
	ReqMsgID uint64    // req_msg_id:long
	Result   tl.Object // result:Object
}

func (o *TLRPCResult) Cmd() uint32 {
	return TagRPCResult
}

func (o *TLRPCResult) ReadBareFrom(r *tl.Reader) {
	o.ReqMsgID = r.ReadUint64()
	o.Result = Schema.ReadBoxedObjectFrom(r)
}

func (o *TLRPCResult) WriteBareTo(w *tl.Writer) {
	w.WriteUint64(o.ReqMsgID)
	w.WriteCmd(o.Result.Cmd())
	o.Result.WriteBareTo(w)
}

func (o *TLRPCResult) String() string {
	return tl.Pretty(o)
}

// TLRPCError represents ctor rpc_error#2144ca19 error_code:int error_message:string = RpcError from MTProto
type TLRPCError struct {
	ErrorCode    int    // error_code:int
	ErrorMessage string // error_message:string
}

func (o *TLRPCError) Cmd() uint32 {
	return TagRPCError
}

func (o *TLRPCError) ReadBareFrom(r *tl.Reader) {
	o.ErrorCode = r.ReadInt()
	o.ErrorMessage = r.ReadString()
}

func (o *TLRPCError) WriteBareTo(w *tl.Writer) {
	w.WriteInt(o.ErrorCode)
	w.WriteString(o.ErrorMessage)
}

func (o *TLRPCError) String() string {
	return tl.Pretty(o)
}

// TLRPCDropAnswerType represents RpcDropAnswer from MTProto
type TLRPCDropAnswerType interface {
	IsTLRPCDropAnswer()
	Cmd() uint32
	ReadBareFrom(r *tl.Reader)
	WriteBareTo(w *tl.Writer)
}

// TLFutureSalt represents ctor future_salt#0949d9dc valid_since:int valid_until:int salt:long = FutureSalt from MTProto
type TLFutureSalt struct {
	ValidSince int    // valid_since:int
	ValidUntil int    // valid_until:int
	Salt       uint64 // salt:long
}

func (o *TLFutureSalt) Cmd() uint32 {
	return TagFutureSalt
}

func (o *TLFutureSalt) ReadBareFrom(r *tl.Reader) {
	o.ValidSince = r.ReadInt()
	o.ValidUntil = r.ReadInt()
	o.Salt = r.ReadUint64()
}

func (o *TLFutureSalt) WriteBareTo(w *tl.Writer) {
	w.WriteInt(o.ValidSince)
	w.WriteInt(o.ValidUntil)
	w.WriteUint64(o.Salt)
}

func (o *TLFutureSalt) String() string {
	return tl.Pretty(o)
}

// TLFutureSalts represents ctor future_salts#ae500895 req_msg_id:long now:int salts:vector<future_salt> = FutureSalts from MTProto
type TLFutureSalts struct {
	ReqMsgID uint64          // req_msg_id:long
	Now      int             // now:int
	Salts    []*TLFutureSalt // salts:vector<future_salt>
}

func (o *TLFutureSalts) Cmd() uint32 {
	return TagFutureSalts
}

func (o *TLFutureSalts) ReadBareFrom(r *tl.Reader) {
	o.ReqMsgID = r.ReadUint64()
	o.Now = r.ReadInt()
	o.Salts = make([]*TLFutureSalt, r.ReadInt())
	for i := 0; i < len(o.Salts); i++ {
		o.Salts[i] = new(TLFutureSalt)
		o.Salts[i].ReadBareFrom(r)
	}
}

func (o *TLFutureSalts) WriteBareTo(w *tl.Writer) {
	w.WriteUint64(o.ReqMsgID)
	w.WriteInt(o.Now)
	w.WriteInt(len(o.Salts))
	for i := 0; i < len(o.Salts); i++ {
		o.Salts[i].WriteBareTo(w)
	}
}

func (o *TLFutureSalts) String() string {
	return tl.Pretty(o)
}

// TLPong represents ctor pong#347773c5 msg_id:long ping_id:long = Pong from MTProto
type TLPong struct {
	MsgID  uint64 // msg_id:long
	PingID uint64 // ping_id:long
}

func (o *TLPong) Cmd() uint32 {
	return TagPong
}

func (o *TLPong) ReadBareFrom(r *tl.Reader) {
	o.MsgID = r.ReadUint64()
	o.PingID = r.ReadUint64()
}

func (o *TLPong) WriteBareTo(w *tl.Writer) {
	w.WriteUint64(o.MsgID)
	w.WriteUint64(o.PingID)
}

func (o *TLPong) String() string {
	return tl.Pretty(o)
}

// TLDestroySessionResType represents DestroySessionRes from MTProto
type TLDestroySessionResType interface {
	IsTLDestroySessionRes()
	Cmd() uint32
	ReadBareFrom(r *tl.Reader)
	WriteBareTo(w *tl.Writer)
}

// TLNewSessionCreated represents ctor new_session_created#9ec20908 first_msg_id:long unique_id:long server_salt:long = NewSession from MTProto
type TLNewSessionCreated struct {
	FirstMsgID uint64 // first_msg_id:long
	UniqueID   uint64 // unique_id:long
	ServerSalt uint64 // server_salt:long
}

func (o *TLNewSessionCreated) Cmd() uint32 {
	return TagNewSessionCreated
}

func (o *TLNewSessionCreated) ReadBareFrom(r *tl.Reader) {
	o.FirstMsgID = r.ReadUint64()
	o.UniqueID = r.ReadUint64()
	o.ServerSalt = r.ReadUint64()
}

func (o *TLNewSessionCreated) WriteBareTo(w *tl.Writer) {
	w.WriteUint64(o.FirstMsgID)
	w.WriteUint64(o.UniqueID)
	w.WriteUint64(o.ServerSalt)
}

func (o *TLNewSessionCreated) String() string {
	return tl.Pretty(o)
}

// TLMsgContainer represents ctor msg_container#73f1f8dc messages:vector<%ProtoMessage> = MessageContainer from MTProto
type TLMsgContainer struct {
	Messages []*TLProtoMessage // messages:vector<%ProtoMessage>
}

func (o *TLMsgContainer) Cmd() uint32 {
	return TagMsgContainer
}

func (o *TLMsgContainer) ReadBareFrom(r *tl.Reader) {
	o.Messages = make([]*TLProtoMessage, r.ReadInt())
	for i := 0; i < len(o.Messages); i++ {
		o.Messages[i] = new(TLProtoMessage)
		o.Messages[i].ReadBareFrom(r)
	}
}

func (o *TLMsgContainer) WriteBareTo(w *tl.Writer) {
	w.WriteInt(len(o.Messages))
	for i := 0; i < len(o.Messages); i++ {
		o.Messages[i].WriteBareTo(w)
	}
}

func (o *TLMsgContainer) String() string {
	return tl.Pretty(o)
}

// TLProtoMessage represents ctor proto_message#5bb8e511 msg_id:long seqno:int bytes:int body:Object = ProtoMessage from MTProto
type TLProtoMessage struct {
	MsgID uint64    // msg_id:long
	Seqno int       // seqno:int
	Bytes int       // bytes:int
	Body  tl.Object // body:Object
}

func (o *TLProtoMessage) Cmd() uint32 {
	return TagProtoMessage
}

func (o *TLProtoMessage) ReadBareFrom(r *tl.Reader) {
	o.MsgID = r.ReadUint64()
	o.Seqno = r.ReadInt()
	o.Bytes = r.ReadInt()
	o.Body = Schema.ReadBoxedObjectFrom(r)
}

func (o *TLProtoMessage) WriteBareTo(w *tl.Writer) {
	w.WriteUint64(o.MsgID)
	w.WriteInt(o.Seqno)
	w.WriteInt(o.Bytes)
	w.WriteCmd(o.Body.Cmd())
	o.Body.WriteBareTo(w)
}

func (o *TLProtoMessage) String() string {
	return tl.Pretty(o)
}

// TLMsgCopy represents ctor msg_copy#e06046b2 orig_message:Message = MessageCopy from MTProto
type TLMsgCopy struct {
	OrigMessage TLMessageType // orig_message:Message
}

func (o *TLMsgCopy) Cmd() uint32 {
	return TagMsgCopy
}

func (o *TLMsgCopy) ReadBareFrom(r *tl.Reader) {
	o.OrigMessage = Schema.ReadLimitedBoxedObjectFrom(r, TagMessageEmpty, TagMessage, TagMessageService).(TLMessageType)
}

func (o *TLMsgCopy) WriteBareTo(w *tl.Writer) {
	w.WriteCmd(o.OrigMessage.Cmd())
	o.OrigMessage.WriteBareTo(w)
}

func (o *TLMsgCopy) String() string {
	return tl.Pretty(o)
}

// TLMsgsAck represents ctor msgs_ack#62d6b459 msg_ids:Vector<long> = MsgsAck from MTProto
type TLMsgsAck struct {
	MsgIDs []uint64 // msg_ids:Vector<long>
}

func (o *TLMsgsAck) Cmd() uint32 {
	return TagMsgsAck
}

func (o *TLMsgsAck) ReadBareFrom(r *tl.Reader) {
	if cmd := r.ReadCmd(); cmd != TagVector {
		r.Fail(errors.New("expected: vector"))
	}
	o.MsgIDs = make([]uint64, r.ReadInt())
	for i := 0; i < len(o.MsgIDs); i++ {
		o.MsgIDs[i] = r.ReadUint64()
	}
}

func (o *TLMsgsAck) WriteBareTo(w *tl.Writer) {
	w.WriteCmd(TagVector)
	w.WriteInt(len(o.MsgIDs))
	for i := 0; i < len(o.MsgIDs); i++ {
		w.WriteUint64(o.MsgIDs[i])
	}
}

func (o *TLMsgsAck) String() string {
	return tl.Pretty(o)
}

// TLBadMsgNotificationType represents BadMsgNotification from MTProto
type TLBadMsgNotificationType interface {
	IsTLBadMsgNotification()
	Cmd() uint32
	ReadBareFrom(r *tl.Reader)
	WriteBareTo(w *tl.Writer)
}

// TLMsgResendReq represents ctor msg_resend_req#7d861a08 msg_ids:Vector<long> = MsgResendReq from MTProto
type TLMsgResendReq struct {
	MsgIDs []uint64 // msg_ids:Vector<long>
}

func (o *TLMsgResendReq) Cmd() uint32 {
	return TagMsgResendReq
}

func (o *TLMsgResendReq) ReadBareFrom(r *tl.Reader) {
	if cmd := r.ReadCmd(); cmd != TagVector {
		r.Fail(errors.New("expected: vector"))
	}
	o.MsgIDs = make([]uint64, r.ReadInt())
	for i := 0; i < len(o.MsgIDs); i++ {
		o.MsgIDs[i] = r.ReadUint64()
	}
}

func (o *TLMsgResendReq) WriteBareTo(w *tl.Writer) {
	w.WriteCmd(TagVector)
	w.WriteInt(len(o.MsgIDs))
	for i := 0; i < len(o.MsgIDs); i++ {
		w.WriteUint64(o.MsgIDs[i])
	}
}

func (o *TLMsgResendReq) String() string {
	return tl.Pretty(o)
}

// TLMsgsStateReq represents ctor msgs_state_req#da69fb52 msg_ids:Vector<long> = MsgsStateReq from MTProto
type TLMsgsStateReq struct {
	MsgIDs []uint64 // msg_ids:Vector<long>
}

func (o *TLMsgsStateReq) Cmd() uint32 {
	return TagMsgsStateReq
}

func (o *TLMsgsStateReq) ReadBareFrom(r *tl.Reader) {
	if cmd := r.ReadCmd(); cmd != TagVector {
		r.Fail(errors.New("expected: vector"))
	}
	o.MsgIDs = make([]uint64, r.ReadInt())
	for i := 0; i < len(o.MsgIDs); i++ {
		o.MsgIDs[i] = r.ReadUint64()
	}
}

func (o *TLMsgsStateReq) WriteBareTo(w *tl.Writer) {
	w.WriteCmd(TagVector)
	w.WriteInt(len(o.MsgIDs))
	for i := 0; i < len(o.MsgIDs); i++ {
		w.WriteUint64(o.MsgIDs[i])
	}
}

func (o *TLMsgsStateReq) String() string {
	return tl.Pretty(o)
}

// TLMsgsStateInfo represents ctor msgs_state_info#04deb57d req_msg_id:long info:bytes = MsgsStateInfo from MTProto
type TLMsgsStateInfo struct {
	ReqMsgID uint64 // req_msg_id:long
	Info     []byte // info:bytes
}

func (o *TLMsgsStateInfo) Cmd() uint32 {
	return TagMsgsStateInfo
}

func (o *TLMsgsStateInfo) ReadBareFrom(r *tl.Reader) {
	o.ReqMsgID = r.ReadUint64()
	o.Info = r.ReadBlob()
}

func (o *TLMsgsStateInfo) WriteBareTo(w *tl.Writer) {
	w.WriteUint64(o.ReqMsgID)
	w.WriteBlob(o.Info)
}

func (o *TLMsgsStateInfo) String() string {
	return tl.Pretty(o)
}

// TLMsgsAllInfo represents ctor msgs_all_info#8cc0d131 msg_ids:Vector<long> info:bytes = MsgsAllInfo from MTProto
type TLMsgsAllInfo struct {
	MsgIDs []uint64 // msg_ids:Vector<long>
	Info   []byte   // info:bytes
}

func (o *TLMsgsAllInfo) Cmd() uint32 {
	return TagMsgsAllInfo
}

func (o *TLMsgsAllInfo) ReadBareFrom(r *tl.Reader) {
	if cmd := r.ReadCmd(); cmd != TagVector {
		r.Fail(errors.New("expected: vector"))
	}
	o.MsgIDs = make([]uint64, r.ReadInt())
	for i := 0; i < len(o.MsgIDs); i++ {
		o.MsgIDs[i] = r.ReadUint64()
	}
	o.Info = r.ReadBlob()
}

func (o *TLMsgsAllInfo) WriteBareTo(w *tl.Writer) {
	w.WriteCmd(TagVector)
	w.WriteInt(len(o.MsgIDs))
	for i := 0; i < len(o.MsgIDs); i++ {
		w.WriteUint64(o.MsgIDs[i])
	}
	w.WriteBlob(o.Info)
}

func (o *TLMsgsAllInfo) String() string {
	return tl.Pretty(o)
}

// TLMsgDetailedInfoType represents MsgDetailedInfo from MTProto
type TLMsgDetailedInfoType interface {
	IsTLMsgDetailedInfo()
	Cmd() uint32
	ReadBareFrom(r *tl.Reader)
	WriteBareTo(w *tl.Writer)
}

// TLError represents ctor error#c4b9f9bb code:int text:string = Error from Telegram
type TLError struct {
	Code int    // code:int
	Text string // text:string
}

func (o *TLError) Cmd() uint32 {
	return TagError
}

func (o *TLError) ReadBareFrom(r *tl.Reader) {
	o.Code = r.ReadInt()
	o.Text = r.ReadString()
}

func (o *TLError) WriteBareTo(w *tl.Writer) {
	w.WriteInt(o.Code)
	w.WriteString(o.Text)
}

func (o *TLError) String() string {
	return tl.Pretty(o)
}

// TLNull represents ctor null#56730bcc = Null from Telegram
type TLNull struct {
}

func (o *TLNull) Cmd() uint32 {
	return TagNull
}

func (o *TLNull) ReadBareFrom(r *tl.Reader) {
}

func (o *TLNull) WriteBareTo(w *tl.Writer) {
}

func (o *TLNull) String() string {
	return tl.Pretty(o)
}

// TLInputPeerType represents InputPeer from Telegram
type TLInputPeerType interface {
	IsTLInputPeer()
	Cmd() uint32
	ReadBareFrom(r *tl.Reader)
	WriteBareTo(w *tl.Writer)
}

// TLInputUserType represents InputUser from Telegram
type TLInputUserType interface {
	IsTLInputUser()
	Cmd() uint32
	ReadBareFrom(r *tl.Reader)
	WriteBareTo(w *tl.Writer)
}

// TLInputPhoneContact represents ctor inputPhoneContact#f392b7f4 client_id:long phone:string first_name:string last_name:string = InputContact from Telegram
type TLInputPhoneContact struct {
	ClientID  uint64 // client_id:long
	Phone     string // phone:string
	FirstName string // first_name:string
	LastName  string // last_name:string
}

func (o *TLInputPhoneContact) Cmd() uint32 {
	return TagInputPhoneContact
}

func (o *TLInputPhoneContact) ReadBareFrom(r *tl.Reader) {
	o.ClientID = r.ReadUint64()
	o.Phone = r.ReadString()
	o.FirstName = r.ReadString()
	o.LastName = r.ReadString()
}

func (o *TLInputPhoneContact) WriteBareTo(w *tl.Writer) {
	w.WriteUint64(o.ClientID)
	w.WriteString(o.Phone)
	w.WriteString(o.FirstName)
	w.WriteString(o.LastName)
}

func (o *TLInputPhoneContact) String() string {
	return tl.Pretty(o)
}

// TLInputFileType represents InputFile from Telegram
type TLInputFileType interface {
	IsTLInputFile()
	Cmd() uint32
	ReadBareFrom(r *tl.Reader)
	WriteBareTo(w *tl.Writer)
}

// TLInputMediaType represents InputMedia from Telegram
type TLInputMediaType interface {
	IsTLInputMedia()
	Cmd() uint32
	ReadBareFrom(r *tl.Reader)
	WriteBareTo(w *tl.Writer)
}

// TLInputChatPhotoType represents InputChatPhoto from Telegram
type TLInputChatPhotoType interface {
	IsTLInputChatPhoto()
	Cmd() uint32
	ReadBareFrom(r *tl.Reader)
	WriteBareTo(w *tl.Writer)
}

// TLInputGeoPointType represents InputGeoPoint from Telegram
type TLInputGeoPointType interface {
	IsTLInputGeoPoint()
	Cmd() uint32
	ReadBareFrom(r *tl.Reader)
	WriteBareTo(w *tl.Writer)
}

// TLInputPhotoType represents InputPhoto from Telegram
type TLInputPhotoType interface {
	IsTLInputPhoto()
	Cmd() uint32
	ReadBareFrom(r *tl.Reader)
	WriteBareTo(w *tl.Writer)
}

// TLInputFileLocationType represents InputFileLocation from Telegram
type TLInputFileLocationType interface {
	IsTLInputFileLocation()
	Cmd() uint32
	ReadBareFrom(r *tl.Reader)
	WriteBareTo(w *tl.Writer)
}

// TLInputAppEvent represents ctor inputAppEvent#770656a8 time:double type:string peer:long data:string = InputAppEvent from Telegram
type TLInputAppEvent struct {
	Time float64 // time:double
	Type string  // type:string
	Peer uint64  // peer:long
	Data string  // data:string
}

func (o *TLInputAppEvent) Cmd() uint32 {
	return TagInputAppEvent
}

func (o *TLInputAppEvent) ReadBareFrom(r *tl.Reader) {
	o.Time = r.ReadFloat64()
	o.Type = r.ReadString()
	o.Peer = r.ReadUint64()
	o.Data = r.ReadString()
}

func (o *TLInputAppEvent) WriteBareTo(w *tl.Writer) {
	w.WriteFloat64(o.Time)
	w.WriteString(o.Type)
	w.WriteUint64(o.Peer)
	w.WriteString(o.Data)
}

func (o *TLInputAppEvent) String() string {
	return tl.Pretty(o)
}

// TLPeerType represents Peer from Telegram
type TLPeerType interface {
	IsTLPeer()
	Cmd() uint32
	ReadBareFrom(r *tl.Reader)
	WriteBareTo(w *tl.Writer)
}

// TLStorageFileTypeType represents storage.FileType from Telegram
type TLStorageFileTypeType interface {
	IsTLStorageFileType()
	Cmd() uint32
	ReadBareFrom(r *tl.Reader)
	WriteBareTo(w *tl.Writer)
}

// TLFileLocationType represents FileLocation from Telegram
type TLFileLocationType interface {
	IsTLFileLocation()
	Cmd() uint32
	ReadBareFrom(r *tl.Reader)
	WriteBareTo(w *tl.Writer)
}

// TLUserType represents User from Telegram
type TLUserType interface {
	IsTLUser()
	Cmd() uint32
	ReadBareFrom(r *tl.Reader)
	WriteBareTo(w *tl.Writer)
}

// TLUserProfilePhotoType represents UserProfilePhoto from Telegram
type TLUserProfilePhotoType interface {
	IsTLUserProfilePhoto()
	Cmd() uint32
	ReadBareFrom(r *tl.Reader)
	WriteBareTo(w *tl.Writer)
}

// TLUserStatusType represents UserStatus from Telegram
type TLUserStatusType interface {
	IsTLUserStatus()
	Cmd() uint32
	ReadBareFrom(r *tl.Reader)
	WriteBareTo(w *tl.Writer)
}

// TLChatType represents Chat from Telegram
type TLChatType interface {
	IsTLChat()
	Cmd() uint32
	ReadBareFrom(r *tl.Reader)
	WriteBareTo(w *tl.Writer)
}

// TLChatFullType represents ChatFull from Telegram
type TLChatFullType interface {
	IsTLChatFull()
	Cmd() uint32
	ReadBareFrom(r *tl.Reader)
	WriteBareTo(w *tl.Writer)
}

// TLChatParticipantType represents ChatParticipant from Telegram
type TLChatParticipantType interface {
	IsTLChatParticipant()
	Cmd() uint32
	ReadBareFrom(r *tl.Reader)
	WriteBareTo(w *tl.Writer)
}

// TLChatParticipantsType represents ChatParticipants from Telegram
type TLChatParticipantsType interface {
	IsTLChatParticipants()
	Cmd() uint32
	ReadBareFrom(r *tl.Reader)
	WriteBareTo(w *tl.Writer)
}

// TLChatPhotoType represents ChatPhoto from Telegram
type TLChatPhotoType interface {
	IsTLChatPhoto()
	Cmd() uint32
	ReadBareFrom(r *tl.Reader)
	WriteBareTo(w *tl.Writer)
}

// TLMessageType represents Message from Telegram
type TLMessageType interface {
	IsTLMessage()
	Cmd() uint32
	ReadBareFrom(r *tl.Reader)
	WriteBareTo(w *tl.Writer)
}

// TLMessageMediaType represents MessageMedia from Telegram
type TLMessageMediaType interface {
	IsTLMessageMedia()
	Cmd() uint32
	ReadBareFrom(r *tl.Reader)
	WriteBareTo(w *tl.Writer)
}

// TLMessageActionType represents MessageAction from Telegram
type TLMessageActionType interface {
	IsTLMessageAction()
	Cmd() uint32
	ReadBareFrom(r *tl.Reader)
	WriteBareTo(w *tl.Writer)
}

// TLDialog represents ctor dialog#66ffba14 flags:# flags.2?pinned:true peer:Peer top_message:int read_inbox_max_id:int read_outbox_max_id:int unread_count:int notify_settings:PeerNotifySettings flags.0?pts:int flags.1?draft:DraftMessage = Dialog from Telegram
type TLDialog struct {
	Flags           uint                     // flags:#
	Pinned          bool                     // flags.2?pinned:true
	Peer            TLPeerType               // peer:Peer
	TopMessage      int                      // top_message:int
	ReadInboxMaxID  int                      // read_inbox_max_id:int
	ReadOutboxMaxID int                      // read_outbox_max_id:int
	UnreadCount     int                      // unread_count:int
	NotifySettings  TLPeerNotifySettingsType // notify_settings:PeerNotifySettings
	Pts             int                      // flags.0?pts:int
	Draft           TLDraftMessageType       // flags.1?draft:DraftMessage
}

func (o *TLDialog) Cmd() uint32 {
	return TagDialog
}

func (o *TLDialog) ReadBareFrom(r *tl.Reader) {
	o.Flags = uint(r.ReadUint32())
	o.Pinned = true
	o.Peer = Schema.ReadLimitedBoxedObjectFrom(r, TagPeerUser, TagPeerChat, TagPeerChannel).(TLPeerType)
	o.TopMessage = r.ReadInt()
	o.ReadInboxMaxID = r.ReadInt()
	o.ReadOutboxMaxID = r.ReadInt()
	o.UnreadCount = r.ReadInt()
	o.NotifySettings = Schema.ReadLimitedBoxedObjectFrom(r, TagPeerNotifySettingsEmpty, TagPeerNotifySettings).(TLPeerNotifySettingsType)
	o.Pts = r.ReadInt()
	o.Draft = Schema.ReadLimitedBoxedObjectFrom(r, TagDraftMessageEmpty, TagDraftMessage).(TLDraftMessageType)
}

func (o *TLDialog) WriteBareTo(w *tl.Writer) {
	w.WriteUint32(uint32(o.Flags))
	w.WriteCmd(o.Peer.Cmd())
	o.Peer.WriteBareTo(w)
	w.WriteInt(o.TopMessage)
	w.WriteInt(o.ReadInboxMaxID)
	w.WriteInt(o.ReadOutboxMaxID)
	w.WriteInt(o.UnreadCount)
	w.WriteCmd(o.NotifySettings.Cmd())
	o.NotifySettings.WriteBareTo(w)
	w.WriteInt(o.Pts)
	w.WriteCmd(o.Draft.Cmd())
	o.Draft.WriteBareTo(w)
}

func (o *TLDialog) String() string {
	return tl.Pretty(o)
}

// TLPhotoType represents Photo from Telegram
type TLPhotoType interface {
	IsTLPhoto()
	Cmd() uint32
	ReadBareFrom(r *tl.Reader)
	WriteBareTo(w *tl.Writer)
}

// TLPhotoSizeType represents PhotoSize from Telegram
type TLPhotoSizeType interface {
	IsTLPhotoSize()
	Cmd() uint32
	ReadBareFrom(r *tl.Reader)
	WriteBareTo(w *tl.Writer)
}

// TLGeoPointType represents GeoPoint from Telegram
type TLGeoPointType interface {
	IsTLGeoPoint()
	Cmd() uint32
	ReadBareFrom(r *tl.Reader)
	WriteBareTo(w *tl.Writer)
}

// TLAuthCheckedPhone represents ctor auth.checkedPhone#811ea28e phone_registered:Bool = auth.CheckedPhone from Telegram
type TLAuthCheckedPhone struct {
	PhoneRegistered bool // phone_registered:Bool
}

func (o *TLAuthCheckedPhone) Cmd() uint32 {
	return TagAuthCheckedPhone
}

func (o *TLAuthCheckedPhone) ReadBareFrom(r *tl.Reader) {
	r.ExpectCmd(TagBoolTrue, TagBoolFalse)
	o.PhoneRegistered = (r.ReadCmd() == TagBoolTrue)
}

func (o *TLAuthCheckedPhone) WriteBareTo(w *tl.Writer) {
	if o.PhoneRegistered {
		w.WriteCmd(TagBoolTrue)
	} else {
		w.WriteCmd(TagBoolFalse)
	}
}

func (o *TLAuthCheckedPhone) String() string {
	return tl.Pretty(o)
}

// TLAuthSentCode represents ctor auth.sentCode#5e002502 flags:# flags.0?phone_registered:true type:auth.SentCodeType phone_code_hash:string flags.1?next_type:auth.CodeType flags.2?timeout:int = auth.SentCode from Telegram
type TLAuthSentCode struct {
	Flags           uint                   // flags:#
	PhoneRegistered bool                   // flags.0?phone_registered:true
	Type            TLAuthSentCodeTypeType // type:auth.SentCodeType
	PhoneCodeHash   string                 // phone_code_hash:string
	NextType        TLAuthCodeTypeType     // flags.1?next_type:auth.CodeType
	Timeout         int                    // flags.2?timeout:int
}

func (o *TLAuthSentCode) Cmd() uint32 {
	return TagAuthSentCode
}

func (o *TLAuthSentCode) ReadBareFrom(r *tl.Reader) {
	o.Flags = uint(r.ReadUint32())
	o.PhoneRegistered = true
	o.Type = Schema.ReadLimitedBoxedObjectFrom(r, TagAuthSentCodeTypeApp, TagAuthSentCodeTypeSms, TagAuthSentCodeTypeCall, TagAuthSentCodeTypeFlashCall).(TLAuthSentCodeTypeType)
	o.PhoneCodeHash = r.ReadString()
	o.NextType = Schema.ReadLimitedBoxedObjectFrom(r, TagAuthCodeTypeSms, TagAuthCodeTypeCall, TagAuthCodeTypeFlashCall).(TLAuthCodeTypeType)
	o.Timeout = r.ReadInt()
}

func (o *TLAuthSentCode) WriteBareTo(w *tl.Writer) {
	w.WriteUint32(uint32(o.Flags))
	w.WriteCmd(o.Type.Cmd())
	o.Type.WriteBareTo(w)
	w.WriteString(o.PhoneCodeHash)
	w.WriteCmd(o.NextType.Cmd())
	o.NextType.WriteBareTo(w)
	w.WriteInt(o.Timeout)
}

func (o *TLAuthSentCode) String() string {
	return tl.Pretty(o)
}

// TLAuthAuthorization represents ctor auth.authorization#cd050916 flags:# flags.0?tmp_sessions:int user:User = auth.Authorization from Telegram
type TLAuthAuthorization struct {
	Flags       uint       // flags:#
	TmpSessions int        // flags.0?tmp_sessions:int
	User        TLUserType // user:User
}

func (o *TLAuthAuthorization) Cmd() uint32 {
	return TagAuthAuthorization
}

func (o *TLAuthAuthorization) ReadBareFrom(r *tl.Reader) {
	o.Flags = uint(r.ReadUint32())
	o.TmpSessions = r.ReadInt()
	o.User = Schema.ReadLimitedBoxedObjectFrom(r, TagUserEmpty, TagUser).(TLUserType)
}

func (o *TLAuthAuthorization) WriteBareTo(w *tl.Writer) {
	w.WriteUint32(uint32(o.Flags))
	w.WriteInt(o.TmpSessions)
	w.WriteCmd(o.User.Cmd())
	o.User.WriteBareTo(w)
}

func (o *TLAuthAuthorization) String() string {
	return tl.Pretty(o)
}

// TLAuthExportedAuthorization represents ctor auth.exportedAuthorization#df969c2d id:int bytes:bytes = auth.ExportedAuthorization from Telegram
type TLAuthExportedAuthorization struct {
	ID    int    // id:int
	Bytes []byte // bytes:bytes
}

func (o *TLAuthExportedAuthorization) Cmd() uint32 {
	return TagAuthExportedAuthorization
}

func (o *TLAuthExportedAuthorization) ReadBareFrom(r *tl.Reader) {
	o.ID = r.ReadInt()
	o.Bytes = r.ReadBlob()
}

func (o *TLAuthExportedAuthorization) WriteBareTo(w *tl.Writer) {
	w.WriteInt(o.ID)
	w.WriteBlob(o.Bytes)
}

func (o *TLAuthExportedAuthorization) String() string {
	return tl.Pretty(o)
}

// TLInputNotifyPeerType represents InputNotifyPeer from Telegram
type TLInputNotifyPeerType interface {
	IsTLInputNotifyPeer()
	Cmd() uint32
	ReadBareFrom(r *tl.Reader)
	WriteBareTo(w *tl.Writer)
}

// TLInputPeerNotifyEventsType represents InputPeerNotifyEvents from Telegram
type TLInputPeerNotifyEventsType interface {
	IsTLInputPeerNotifyEvents()
	Cmd() uint32
	ReadBareFrom(r *tl.Reader)
	WriteBareTo(w *tl.Writer)
}

// TLInputPeerNotifySettings represents ctor inputPeerNotifySettings#38935eb2 flags:# flags.0?show_previews:true flags.1?silent:true mute_until:int sound:string = InputPeerNotifySettings from Telegram
type TLInputPeerNotifySettings struct {
	Flags        uint   // flags:#
	ShowPreviews bool   // flags.0?show_previews:true
	Silent       bool   // flags.1?silent:true
	MuteUntil    int    // mute_until:int
	Sound        string // sound:string
}

func (o *TLInputPeerNotifySettings) Cmd() uint32 {
	return TagInputPeerNotifySettings
}

func (o *TLInputPeerNotifySettings) ReadBareFrom(r *tl.Reader) {
	o.Flags = uint(r.ReadUint32())
	o.ShowPreviews = true
	o.Silent = true
	o.MuteUntil = r.ReadInt()
	o.Sound = r.ReadString()
}

func (o *TLInputPeerNotifySettings) WriteBareTo(w *tl.Writer) {
	w.WriteUint32(uint32(o.Flags))
	w.WriteInt(o.MuteUntil)
	w.WriteString(o.Sound)
}

func (o *TLInputPeerNotifySettings) String() string {
	return tl.Pretty(o)
}

// TLPeerNotifyEventsType represents PeerNotifyEvents from Telegram
type TLPeerNotifyEventsType interface {
	IsTLPeerNotifyEvents()
	Cmd() uint32
	ReadBareFrom(r *tl.Reader)
	WriteBareTo(w *tl.Writer)
}

// TLPeerNotifySettingsType represents PeerNotifySettings from Telegram
type TLPeerNotifySettingsType interface {
	IsTLPeerNotifySettings()
	Cmd() uint32
	ReadBareFrom(r *tl.Reader)
	WriteBareTo(w *tl.Writer)
}

// TLPeerSettings represents ctor peerSettings#818426cd flags:# flags.0?report_spam:true = PeerSettings from Telegram
type TLPeerSettings struct {
	Flags      uint // flags:#
	ReportSpam bool // flags.0?report_spam:true
}

func (o *TLPeerSettings) Cmd() uint32 {
	return TagPeerSettings
}

func (o *TLPeerSettings) ReadBareFrom(r *tl.Reader) {
	o.Flags = uint(r.ReadUint32())
	o.ReportSpam = true
}

func (o *TLPeerSettings) WriteBareTo(w *tl.Writer) {
	w.WriteUint32(uint32(o.Flags))
}

func (o *TLPeerSettings) String() string {
	return tl.Pretty(o)
}

// TLWallPaperType represents WallPaper from Telegram
type TLWallPaperType interface {
	IsTLWallPaper()
	Cmd() uint32
	ReadBareFrom(r *tl.Reader)
	WriteBareTo(w *tl.Writer)
}

// TLReportReasonType represents ReportReason from Telegram
type TLReportReasonType interface {
	IsTLReportReason()
	Cmd() uint32
	ReadBareFrom(r *tl.Reader)
	WriteBareTo(w *tl.Writer)
}

// TLUserFull represents ctor userFull#0f220f3f flags:# flags.0?blocked:true flags.4?phone_calls_available:true flags.5?phone_calls_private:true user:User flags.1?about:string link:contacts.Link flags.2?profile_photo:Photo notify_settings:PeerNotifySettings flags.3?bot_info:BotInfo common_chats_count:int = UserFull from Telegram
type TLUserFull struct {
	Flags               uint                     // flags:#
	Blocked             bool                     // flags.0?blocked:true
	PhoneCallsAvailable bool                     // flags.4?phone_calls_available:true
	PhoneCallsPrivate   bool                     // flags.5?phone_calls_private:true
	User                TLUserType               // user:User
	About               string                   // flags.1?about:string
	Link                *TLContactsLink          // link:contacts.Link
	ProfilePhoto        TLPhotoType              // flags.2?profile_photo:Photo
	NotifySettings      TLPeerNotifySettingsType // notify_settings:PeerNotifySettings
	BotInfo             *TLBotInfo               // flags.3?bot_info:BotInfo
	CommonChatsCount    int                      // common_chats_count:int
}

func (o *TLUserFull) Cmd() uint32 {
	return TagUserFull
}

func (o *TLUserFull) ReadBareFrom(r *tl.Reader) {
	o.Flags = uint(r.ReadUint32())
	o.Blocked = true
	o.PhoneCallsAvailable = true
	o.PhoneCallsPrivate = true
	o.User = Schema.ReadLimitedBoxedObjectFrom(r, TagUserEmpty, TagUser).(TLUserType)
	o.About = r.ReadString()
	if cmd := r.ReadCmd(); cmd != TagContactsLink {
		r.Fail(errors.New("expected: contacts.link"))
	}
	o.Link = new(TLContactsLink)
	o.Link.ReadBareFrom(r)
	o.ProfilePhoto = Schema.ReadLimitedBoxedObjectFrom(r, TagPhotoEmpty, TagPhoto).(TLPhotoType)
	o.NotifySettings = Schema.ReadLimitedBoxedObjectFrom(r, TagPeerNotifySettingsEmpty, TagPeerNotifySettings).(TLPeerNotifySettingsType)
	if cmd := r.ReadCmd(); cmd != TagBotInfo {
		r.Fail(errors.New("expected: botInfo"))
	}
	o.BotInfo = new(TLBotInfo)
	o.BotInfo.ReadBareFrom(r)
	o.CommonChatsCount = r.ReadInt()
}

func (o *TLUserFull) WriteBareTo(w *tl.Writer) {
	w.WriteUint32(uint32(o.Flags))
	w.WriteCmd(o.User.Cmd())
	o.User.WriteBareTo(w)
	w.WriteString(o.About)
	w.WriteCmd(TagContactsLink)
	o.Link.WriteBareTo(w)
	w.WriteCmd(o.ProfilePhoto.Cmd())
	o.ProfilePhoto.WriteBareTo(w)
	w.WriteCmd(o.NotifySettings.Cmd())
	o.NotifySettings.WriteBareTo(w)
	w.WriteCmd(TagBotInfo)
	o.BotInfo.WriteBareTo(w)
	w.WriteInt(o.CommonChatsCount)
}

func (o *TLUserFull) String() string {
	return tl.Pretty(o)
}

// TLContact represents ctor contact#f911c994 user_id:int mutual:Bool = Contact from Telegram
type TLContact struct {
	UserID int  // user_id:int
	Mutual bool // mutual:Bool
}

func (o *TLContact) Cmd() uint32 {
	return TagContact
}

func (o *TLContact) ReadBareFrom(r *tl.Reader) {
	o.UserID = r.ReadInt()
	r.ExpectCmd(TagBoolTrue, TagBoolFalse)
	o.Mutual = (r.ReadCmd() == TagBoolTrue)
}

func (o *TLContact) WriteBareTo(w *tl.Writer) {
	w.WriteInt(o.UserID)
	if o.Mutual {
		w.WriteCmd(TagBoolTrue)
	} else {
		w.WriteCmd(TagBoolFalse)
	}
}

func (o *TLContact) String() string {
	return tl.Pretty(o)
}

// TLImportedContact represents ctor importedContact#d0028438 user_id:int client_id:long = ImportedContact from Telegram
type TLImportedContact struct {
	UserID   int    // user_id:int
	ClientID uint64 // client_id:long
}

func (o *TLImportedContact) Cmd() uint32 {
	return TagImportedContact
}

func (o *TLImportedContact) ReadBareFrom(r *tl.Reader) {
	o.UserID = r.ReadInt()
	o.ClientID = r.ReadUint64()
}

func (o *TLImportedContact) WriteBareTo(w *tl.Writer) {
	w.WriteInt(o.UserID)
	w.WriteUint64(o.ClientID)
}

func (o *TLImportedContact) String() string {
	return tl.Pretty(o)
}

// TLContactBlocked represents ctor contactBlocked#561bc879 user_id:int date:int = ContactBlocked from Telegram
type TLContactBlocked struct {
	UserID int // user_id:int
	Date   int // date:int
}

func (o *TLContactBlocked) Cmd() uint32 {
	return TagContactBlocked
}

func (o *TLContactBlocked) ReadBareFrom(r *tl.Reader) {
	o.UserID = r.ReadInt()
	o.Date = r.ReadInt()
}

func (o *TLContactBlocked) WriteBareTo(w *tl.Writer) {
	w.WriteInt(o.UserID)
	w.WriteInt(o.Date)
}

func (o *TLContactBlocked) String() string {
	return tl.Pretty(o)
}

// TLContactStatus represents ctor contactStatus#d3680c61 user_id:int status:UserStatus = ContactStatus from Telegram
type TLContactStatus struct {
	UserID int              // user_id:int
	Status TLUserStatusType // status:UserStatus
}

func (o *TLContactStatus) Cmd() uint32 {
	return TagContactStatus
}

func (o *TLContactStatus) ReadBareFrom(r *tl.Reader) {
	o.UserID = r.ReadInt()
	o.Status = Schema.ReadLimitedBoxedObjectFrom(r, TagUserStatusEmpty, TagUserStatusOnline, TagUserStatusOffline, TagUserStatusRecently, TagUserStatusLastWeek, TagUserStatusLastMonth).(TLUserStatusType)
}

func (o *TLContactStatus) WriteBareTo(w *tl.Writer) {
	w.WriteInt(o.UserID)
	w.WriteCmd(o.Status.Cmd())
	o.Status.WriteBareTo(w)
}

func (o *TLContactStatus) String() string {
	return tl.Pretty(o)
}

// TLContactsLink represents ctor contacts.link#3ace484c my_link:ContactLink foreign_link:ContactLink user:User = contacts.Link from Telegram
type TLContactsLink struct {
	MyLink      TLContactLinkType // my_link:ContactLink
	ForeignLink TLContactLinkType // foreign_link:ContactLink
	User        TLUserType        // user:User
}

func (o *TLContactsLink) Cmd() uint32 {
	return TagContactsLink
}

func (o *TLContactsLink) ReadBareFrom(r *tl.Reader) {
	o.MyLink = Schema.ReadLimitedBoxedObjectFrom(r, TagContactLinkUnknown, TagContactLinkNone, TagContactLinkHasPhone, TagContactLinkContact).(TLContactLinkType)
	o.ForeignLink = Schema.ReadLimitedBoxedObjectFrom(r, TagContactLinkUnknown, TagContactLinkNone, TagContactLinkHasPhone, TagContactLinkContact).(TLContactLinkType)
	o.User = Schema.ReadLimitedBoxedObjectFrom(r, TagUserEmpty, TagUser).(TLUserType)
}

func (o *TLContactsLink) WriteBareTo(w *tl.Writer) {
	w.WriteCmd(o.MyLink.Cmd())
	o.MyLink.WriteBareTo(w)
	w.WriteCmd(o.ForeignLink.Cmd())
	o.ForeignLink.WriteBareTo(w)
	w.WriteCmd(o.User.Cmd())
	o.User.WriteBareTo(w)
}

func (o *TLContactsLink) String() string {
	return tl.Pretty(o)
}

// TLContactsContactsType represents contacts.Contacts from Telegram
type TLContactsContactsType interface {
	IsTLContactsContacts()
	Cmd() uint32
	ReadBareFrom(r *tl.Reader)
	WriteBareTo(w *tl.Writer)
}

// TLContactsImportedContacts represents ctor contacts.importedContacts#ad524315 imported:Vector<ImportedContact> retry_contacts:Vector<long> users:Vector<User> = contacts.ImportedContacts from Telegram
type TLContactsImportedContacts struct {
	Imported      []*TLImportedContact // imported:Vector<ImportedContact>
	RetryContacts []uint64             // retry_contacts:Vector<long>
	Users         []TLUserType         // users:Vector<User>
}

func (o *TLContactsImportedContacts) Cmd() uint32 {
	return TagContactsImportedContacts
}

func (o *TLContactsImportedContacts) ReadBareFrom(r *tl.Reader) {
	if cmd := r.ReadCmd(); cmd != TagVector {
		r.Fail(errors.New("expected: vector"))
	}
	o.Imported = make([]*TLImportedContact, r.ReadInt())
	for i := 0; i < len(o.Imported); i++ {
		if cmd := r.ReadCmd(); cmd != TagImportedContact {
			r.Fail(errors.New("expected: importedContact"))
		}
		o.Imported[i] = new(TLImportedContact)
		o.Imported[i].ReadBareFrom(r)
	}
	if cmd := r.ReadCmd(); cmd != TagVector {
		r.Fail(errors.New("expected: vector"))
	}
	o.RetryContacts = make([]uint64, r.ReadInt())
	for i := 0; i < len(o.RetryContacts); i++ {
		o.RetryContacts[i] = r.ReadUint64()
	}
	if cmd := r.ReadCmd(); cmd != TagVector {
		r.Fail(errors.New("expected: vector"))
	}
	o.Users = make([]TLUserType, r.ReadInt())
	for i := 0; i < len(o.Users); i++ {
		o.Users[i] = Schema.ReadLimitedBoxedObjectFrom(r, TagUserEmpty, TagUser).(TLUserType)
	}
}

func (o *TLContactsImportedContacts) WriteBareTo(w *tl.Writer) {
	w.WriteCmd(TagVector)
	w.WriteInt(len(o.Imported))
	for i := 0; i < len(o.Imported); i++ {
		w.WriteCmd(TagImportedContact)
		o.Imported[i].WriteBareTo(w)
	}
	w.WriteCmd(TagVector)
	w.WriteInt(len(o.RetryContacts))
	for i := 0; i < len(o.RetryContacts); i++ {
		w.WriteUint64(o.RetryContacts[i])
	}
	w.WriteCmd(TagVector)
	w.WriteInt(len(o.Users))
	for i := 0; i < len(o.Users); i++ {
		w.WriteCmd(o.Users[i].Cmd())
		o.Users[i].WriteBareTo(w)
	}
}

func (o *TLContactsImportedContacts) String() string {
	return tl.Pretty(o)
}

// TLContactsBlockedType represents contacts.Blocked from Telegram
type TLContactsBlockedType interface {
	IsTLContactsBlocked()
	Cmd() uint32
	ReadBareFrom(r *tl.Reader)
	WriteBareTo(w *tl.Writer)
}

// TLMessagesDialogsType represents messages.Dialogs from Telegram
type TLMessagesDialogsType interface {
	IsTLMessagesDialogs()
	Cmd() uint32
	ReadBareFrom(r *tl.Reader)
	WriteBareTo(w *tl.Writer)
}

// TLMessagesMessagesType represents messages.Messages from Telegram
type TLMessagesMessagesType interface {
	IsTLMessagesMessages()
	Cmd() uint32
	ReadBareFrom(r *tl.Reader)
	WriteBareTo(w *tl.Writer)
}

// TLMessagesChatsType represents messages.Chats from Telegram
type TLMessagesChatsType interface {
	IsTLMessagesChats()
	Cmd() uint32
	ReadBareFrom(r *tl.Reader)
	WriteBareTo(w *tl.Writer)
}

// TLMessagesChatFull represents ctor messages.chatFull#e5d7d19c full_chat:ChatFull chats:Vector<Chat> users:Vector<User> = messages.ChatFull from Telegram
type TLMessagesChatFull struct {
	FullChat TLChatFullType // full_chat:ChatFull
	Chats    []TLChatType   // chats:Vector<Chat>
	Users    []TLUserType   // users:Vector<User>
}

func (o *TLMessagesChatFull) Cmd() uint32 {
	return TagMessagesChatFull
}

func (o *TLMessagesChatFull) ReadBareFrom(r *tl.Reader) {
	o.FullChat = Schema.ReadLimitedBoxedObjectFrom(r, TagChatFull, TagChannelFull).(TLChatFullType)
	if cmd := r.ReadCmd(); cmd != TagVector {
		r.Fail(errors.New("expected: vector"))
	}
	o.Chats = make([]TLChatType, r.ReadInt())
	for i := 0; i < len(o.Chats); i++ {
		o.Chats[i] = Schema.ReadLimitedBoxedObjectFrom(r, TagChatEmpty, TagChat, TagChatForbidden, TagChannel, TagChannelForbidden).(TLChatType)
	}
	if cmd := r.ReadCmd(); cmd != TagVector {
		r.Fail(errors.New("expected: vector"))
	}
	o.Users = make([]TLUserType, r.ReadInt())
	for i := 0; i < len(o.Users); i++ {
		o.Users[i] = Schema.ReadLimitedBoxedObjectFrom(r, TagUserEmpty, TagUser).(TLUserType)
	}
}

func (o *TLMessagesChatFull) WriteBareTo(w *tl.Writer) {
	w.WriteCmd(o.FullChat.Cmd())
	o.FullChat.WriteBareTo(w)
	w.WriteCmd(TagVector)
	w.WriteInt(len(o.Chats))
	for i := 0; i < len(o.Chats); i++ {
		w.WriteCmd(o.Chats[i].Cmd())
		o.Chats[i].WriteBareTo(w)
	}
	w.WriteCmd(TagVector)
	w.WriteInt(len(o.Users))
	for i := 0; i < len(o.Users); i++ {
		w.WriteCmd(o.Users[i].Cmd())
		o.Users[i].WriteBareTo(w)
	}
}

func (o *TLMessagesChatFull) String() string {
	return tl.Pretty(o)
}

// TLMessagesAffectedHistory represents ctor messages.affectedHistory#b45c69d1 pts:int pts_count:int offset:int = messages.AffectedHistory from Telegram
type TLMessagesAffectedHistory struct {
	Pts      int // pts:int
	PtsCount int // pts_count:int
	Offset   int // offset:int
}

func (o *TLMessagesAffectedHistory) Cmd() uint32 {
	return TagMessagesAffectedHistory
}

func (o *TLMessagesAffectedHistory) ReadBareFrom(r *tl.Reader) {
	o.Pts = r.ReadInt()
	o.PtsCount = r.ReadInt()
	o.Offset = r.ReadInt()
}

func (o *TLMessagesAffectedHistory) WriteBareTo(w *tl.Writer) {
	w.WriteInt(o.Pts)
	w.WriteInt(o.PtsCount)
	w.WriteInt(o.Offset)
}

func (o *TLMessagesAffectedHistory) String() string {
	return tl.Pretty(o)
}

// TLMessagesFilterType represents MessagesFilter from Telegram
type TLMessagesFilterType interface {
	IsTLMessagesFilter()
	Cmd() uint32
	ReadBareFrom(r *tl.Reader)
	WriteBareTo(w *tl.Writer)
}

// TLUpdateType represents Update from Telegram
type TLUpdateType interface {
	IsTLUpdate()
	Cmd() uint32
	ReadBareFrom(r *tl.Reader)
	WriteBareTo(w *tl.Writer)
}

// TLUpdatesState represents ctor updates.state#a56c2a3e pts:int qts:int date:int seq:int unread_count:int = updates.State from Telegram
type TLUpdatesState struct {
	Pts         int // pts:int
	Qts         int // qts:int
	Date        int // date:int
	Seq         int // seq:int
	UnreadCount int // unread_count:int
}

func (o *TLUpdatesState) Cmd() uint32 {
	return TagUpdatesState
}

func (o *TLUpdatesState) ReadBareFrom(r *tl.Reader) {
	o.Pts = r.ReadInt()
	o.Qts = r.ReadInt()
	o.Date = r.ReadInt()
	o.Seq = r.ReadInt()
	o.UnreadCount = r.ReadInt()
}

func (o *TLUpdatesState) WriteBareTo(w *tl.Writer) {
	w.WriteInt(o.Pts)
	w.WriteInt(o.Qts)
	w.WriteInt(o.Date)
	w.WriteInt(o.Seq)
	w.WriteInt(o.UnreadCount)
}

func (o *TLUpdatesState) String() string {
	return tl.Pretty(o)
}

// TLUpdatesDifferenceType represents updates.Difference from Telegram
type TLUpdatesDifferenceType interface {
	IsTLUpdatesDifference()
	Cmd() uint32
	ReadBareFrom(r *tl.Reader)
	WriteBareTo(w *tl.Writer)
}

// TLUpdatesType represents Updates from Telegram
type TLUpdatesType interface {
	IsTLUpdates()
	Cmd() uint32
	ReadBareFrom(r *tl.Reader)
	WriteBareTo(w *tl.Writer)
}

// TLPhotosPhotosType represents photos.Photos from Telegram
type TLPhotosPhotosType interface {
	IsTLPhotosPhotos()
	Cmd() uint32
	ReadBareFrom(r *tl.Reader)
	WriteBareTo(w *tl.Writer)
}

// TLPhotosPhoto represents ctor photos.photo#20212ca8 photo:Photo users:Vector<User> = photos.Photo from Telegram
type TLPhotosPhoto struct {
	Photo TLPhotoType  // photo:Photo
	Users []TLUserType // users:Vector<User>
}

func (o *TLPhotosPhoto) Cmd() uint32 {
	return TagPhotosPhoto
}

func (o *TLPhotosPhoto) ReadBareFrom(r *tl.Reader) {
	o.Photo = Schema.ReadLimitedBoxedObjectFrom(r, TagPhotoEmpty, TagPhoto).(TLPhotoType)
	if cmd := r.ReadCmd(); cmd != TagVector {
		r.Fail(errors.New("expected: vector"))
	}
	o.Users = make([]TLUserType, r.ReadInt())
	for i := 0; i < len(o.Users); i++ {
		o.Users[i] = Schema.ReadLimitedBoxedObjectFrom(r, TagUserEmpty, TagUser).(TLUserType)
	}
}

func (o *TLPhotosPhoto) WriteBareTo(w *tl.Writer) {
	w.WriteCmd(o.Photo.Cmd())
	o.Photo.WriteBareTo(w)
	w.WriteCmd(TagVector)
	w.WriteInt(len(o.Users))
	for i := 0; i < len(o.Users); i++ {
		w.WriteCmd(o.Users[i].Cmd())
		o.Users[i].WriteBareTo(w)
	}
}

func (o *TLPhotosPhoto) String() string {
	return tl.Pretty(o)
}

// TLUploadFile represents ctor upload.file#096a18d5 type:storage.FileType mtime:int bytes:bytes = upload.File from Telegram
type TLUploadFile struct {
	Type  TLStorageFileTypeType // type:storage.FileType
	Mtime int                   // mtime:int
	Bytes []byte                // bytes:bytes
}

func (o *TLUploadFile) Cmd() uint32 {
	return TagUploadFile
}

func (o *TLUploadFile) ReadBareFrom(r *tl.Reader) {
	o.Type = Schema.ReadLimitedBoxedObjectFrom(r, TagStorageFileUnknown, TagStorageFilePartial, TagStorageFileJpeg, TagStorageFileGif, TagStorageFilePng, TagStorageFilePdf, TagStorageFileMp3, TagStorageFileMov, TagStorageFileMp4, TagStorageFileWebp).(TLStorageFileTypeType)
	o.Mtime = r.ReadInt()
	o.Bytes = r.ReadBlob()
}

func (o *TLUploadFile) WriteBareTo(w *tl.Writer) {
	w.WriteCmd(o.Type.Cmd())
	o.Type.WriteBareTo(w)
	w.WriteInt(o.Mtime)
	w.WriteBlob(o.Bytes)
}

func (o *TLUploadFile) String() string {
	return tl.Pretty(o)
}

// TLDCOption represents ctor dcOption#05d8c6cc flags:# flags.0?ipv6:true flags.1?media_only:true flags.2?tcpo_only:true id:int ip_address:string port:int = DcOption from Telegram
type TLDCOption struct {
	Flags     uint   // flags:#
	Ipv6      bool   // flags.0?ipv6:true
	MediaOnly bool   // flags.1?media_only:true
	TcpoOnly  bool   // flags.2?tcpo_only:true
	ID        int    // id:int
	IPAddress string // ip_address:string
	Port      int    // port:int
}

func (o *TLDCOption) Cmd() uint32 {
	return TagDCOption
}

func (o *TLDCOption) ReadBareFrom(r *tl.Reader) {
	o.Flags = uint(r.ReadUint32())
	o.Ipv6 = true
	o.MediaOnly = true
	o.TcpoOnly = true
	o.ID = r.ReadInt()
	o.IPAddress = r.ReadString()
	o.Port = r.ReadInt()
}

func (o *TLDCOption) WriteBareTo(w *tl.Writer) {
	w.WriteUint32(uint32(o.Flags))
	w.WriteInt(o.ID)
	w.WriteString(o.IPAddress)
	w.WriteInt(o.Port)
}

func (o *TLDCOption) String() string {
	return tl.Pretty(o)
}

// TLConfig represents ctor config#cb601684 flags:# flags.1?phonecalls_enabled:true date:int expires:int test_mode:Bool this_dc:int dc_options:Vector<DcOption> chat_size_max:int megagroup_size_max:int forwarded_count_max:int online_update_period_ms:int offline_blur_timeout_ms:int offline_idle_timeout_ms:int online_cloud_timeout_ms:int notify_cloud_delay_ms:int notify_default_delay_ms:int chat_big_size:int push_chat_period_ms:int push_chat_limit:int saved_gifs_limit:int edit_time_limit:int rating_e_decay:int stickers_recent_limit:int flags.0?tmp_sessions:int pinned_dialogs_count_max:int call_receive_timeout_ms:int call_ring_timeout_ms:int call_connect_timeout_ms:int call_packet_timeout_ms:int me_url_prefix:string disabled_features:Vector<DisabledFeature> = Config from Telegram
type TLConfig struct {
	Flags                 uint                 // flags:#
	PhonecallsEnabled     bool                 // flags.1?phonecalls_enabled:true
	Date                  int                  // date:int
	Expires               int                  // expires:int
	TestMode              bool                 // test_mode:Bool
	ThisDC                int                  // this_dc:int
	DCOptions             []*TLDCOption        // dc_options:Vector<DcOption>
	ChatSizeMax           int                  // chat_size_max:int
	MegagroupSizeMax      int                  // megagroup_size_max:int
	ForwardedCountMax     int                  // forwarded_count_max:int
	OnlineUpdatePeriodMs  int                  // online_update_period_ms:int
	OfflineBlurTimeoutMs  int                  // offline_blur_timeout_ms:int
	OfflineIdleTimeoutMs  int                  // offline_idle_timeout_ms:int
	OnlineCloudTimeoutMs  int                  // online_cloud_timeout_ms:int
	NotifyCloudDelayMs    int                  // notify_cloud_delay_ms:int
	NotifyDefaultDelayMs  int                  // notify_default_delay_ms:int
	ChatBigSize           int                  // chat_big_size:int
	PushChatPeriodMs      int                  // push_chat_period_ms:int
	PushChatLimit         int                  // push_chat_limit:int
	SavedGifsLimit        int                  // saved_gifs_limit:int
	EditTimeLimit         int                  // edit_time_limit:int
	RatingEDecay          int                  // rating_e_decay:int
	StickersRecentLimit   int                  // stickers_recent_limit:int
	TmpSessions           int                  // flags.0?tmp_sessions:int
	PinnedDialogsCountMax int                  // pinned_dialogs_count_max:int
	CallReceiveTimeoutMs  int                  // call_receive_timeout_ms:int
	CallRingTimeoutMs     int                  // call_ring_timeout_ms:int
	CallConnectTimeoutMs  int                  // call_connect_timeout_ms:int
	CallPacketTimeoutMs   int                  // call_packet_timeout_ms:int
	MeUrlPrefix           string               // me_url_prefix:string
	DisabledFeatures      []*TLDisabledFeature // disabled_features:Vector<DisabledFeature>
}

func (o *TLConfig) Cmd() uint32 {
	return TagConfig
}

func (o *TLConfig) ReadBareFrom(r *tl.Reader) {
	o.Flags = uint(r.ReadUint32())
	o.PhonecallsEnabled = true
	o.Date = r.ReadInt()
	o.Expires = r.ReadInt()
	r.ExpectCmd(TagBoolTrue, TagBoolFalse)
	o.TestMode = (r.ReadCmd() == TagBoolTrue)
	o.ThisDC = r.ReadInt()
	if cmd := r.ReadCmd(); cmd != TagVector {
		r.Fail(errors.New("expected: vector"))
	}
	o.DCOptions = make([]*TLDCOption, r.ReadInt())
	for i := 0; i < len(o.DCOptions); i++ {
		if cmd := r.ReadCmd(); cmd != TagDCOption {
			r.Fail(errors.New("expected: dcOption"))
		}
		o.DCOptions[i] = new(TLDCOption)
		o.DCOptions[i].ReadBareFrom(r)
	}
	o.ChatSizeMax = r.ReadInt()
	o.MegagroupSizeMax = r.ReadInt()
	o.ForwardedCountMax = r.ReadInt()
	o.OnlineUpdatePeriodMs = r.ReadInt()
	o.OfflineBlurTimeoutMs = r.ReadInt()
	o.OfflineIdleTimeoutMs = r.ReadInt()
	o.OnlineCloudTimeoutMs = r.ReadInt()
	o.NotifyCloudDelayMs = r.ReadInt()
	o.NotifyDefaultDelayMs = r.ReadInt()
	o.ChatBigSize = r.ReadInt()
	o.PushChatPeriodMs = r.ReadInt()
	o.PushChatLimit = r.ReadInt()
	o.SavedGifsLimit = r.ReadInt()
	o.EditTimeLimit = r.ReadInt()
	o.RatingEDecay = r.ReadInt()
	o.StickersRecentLimit = r.ReadInt()
	o.TmpSessions = r.ReadInt()
	o.PinnedDialogsCountMax = r.ReadInt()
	o.CallReceiveTimeoutMs = r.ReadInt()
	o.CallRingTimeoutMs = r.ReadInt()
	o.CallConnectTimeoutMs = r.ReadInt()
	o.CallPacketTimeoutMs = r.ReadInt()
	o.MeUrlPrefix = r.ReadString()
	if cmd := r.ReadCmd(); cmd != TagVector {
		r.Fail(errors.New("expected: vector"))
	}
	o.DisabledFeatures = make([]*TLDisabledFeature, r.ReadInt())
	for i := 0; i < len(o.DisabledFeatures); i++ {
		if cmd := r.ReadCmd(); cmd != TagDisabledFeature {
			r.Fail(errors.New("expected: disabledFeature"))
		}
		o.DisabledFeatures[i] = new(TLDisabledFeature)
		o.DisabledFeatures[i].ReadBareFrom(r)
	}
}

func (o *TLConfig) WriteBareTo(w *tl.Writer) {
	w.WriteUint32(uint32(o.Flags))
	w.WriteInt(o.Date)
	w.WriteInt(o.Expires)
	if o.TestMode {
		w.WriteCmd(TagBoolTrue)
	} else {
		w.WriteCmd(TagBoolFalse)
	}
	w.WriteInt(o.ThisDC)
	w.WriteCmd(TagVector)
	w.WriteInt(len(o.DCOptions))
	for i := 0; i < len(o.DCOptions); i++ {
		w.WriteCmd(TagDCOption)
		o.DCOptions[i].WriteBareTo(w)
	}
	w.WriteInt(o.ChatSizeMax)
	w.WriteInt(o.MegagroupSizeMax)
	w.WriteInt(o.ForwardedCountMax)
	w.WriteInt(o.OnlineUpdatePeriodMs)
	w.WriteInt(o.OfflineBlurTimeoutMs)
	w.WriteInt(o.OfflineIdleTimeoutMs)
	w.WriteInt(o.OnlineCloudTimeoutMs)
	w.WriteInt(o.NotifyCloudDelayMs)
	w.WriteInt(o.NotifyDefaultDelayMs)
	w.WriteInt(o.ChatBigSize)
	w.WriteInt(o.PushChatPeriodMs)
	w.WriteInt(o.PushChatLimit)
	w.WriteInt(o.SavedGifsLimit)
	w.WriteInt(o.EditTimeLimit)
	w.WriteInt(o.RatingEDecay)
	w.WriteInt(o.StickersRecentLimit)
	w.WriteInt(o.TmpSessions)
	w.WriteInt(o.PinnedDialogsCountMax)
	w.WriteInt(o.CallReceiveTimeoutMs)
	w.WriteInt(o.CallRingTimeoutMs)
	w.WriteInt(o.CallConnectTimeoutMs)
	w.WriteInt(o.CallPacketTimeoutMs)
	w.WriteString(o.MeUrlPrefix)
	w.WriteCmd(TagVector)
	w.WriteInt(len(o.DisabledFeatures))
	for i := 0; i < len(o.DisabledFeatures); i++ {
		w.WriteCmd(TagDisabledFeature)
		o.DisabledFeatures[i].WriteBareTo(w)
	}
}

func (o *TLConfig) String() string {
	return tl.Pretty(o)
}

// TLNearestDC represents ctor nearestDc#8e1a1775 country:string this_dc:int nearest_dc:int = NearestDc from Telegram
type TLNearestDC struct {
	Country   string // country:string
	ThisDC    int    // this_dc:int
	NearestDC int    // nearest_dc:int
}

func (o *TLNearestDC) Cmd() uint32 {
	return TagNearestDC
}

func (o *TLNearestDC) ReadBareFrom(r *tl.Reader) {
	o.Country = r.ReadString()
	o.ThisDC = r.ReadInt()
	o.NearestDC = r.ReadInt()
}

func (o *TLNearestDC) WriteBareTo(w *tl.Writer) {
	w.WriteString(o.Country)
	w.WriteInt(o.ThisDC)
	w.WriteInt(o.NearestDC)
}

func (o *TLNearestDC) String() string {
	return tl.Pretty(o)
}

// TLHelpAppUpdateType represents help.AppUpdate from Telegram
type TLHelpAppUpdateType interface {
	IsTLHelpAppUpdate()
	Cmd() uint32
	ReadBareFrom(r *tl.Reader)
	WriteBareTo(w *tl.Writer)
}

// TLHelpInviteText represents ctor help.inviteText#18cb9f78 message:string = help.InviteText from Telegram
type TLHelpInviteText struct {
	Message string // message:string
}

func (o *TLHelpInviteText) Cmd() uint32 {
	return TagHelpInviteText
}

func (o *TLHelpInviteText) ReadBareFrom(r *tl.Reader) {
	o.Message = r.ReadString()
}

func (o *TLHelpInviteText) WriteBareTo(w *tl.Writer) {
	w.WriteString(o.Message)
}

func (o *TLHelpInviteText) String() string {
	return tl.Pretty(o)
}

// TLEncryptedChatType represents EncryptedChat from Telegram
type TLEncryptedChatType interface {
	IsTLEncryptedChat()
	Cmd() uint32
	ReadBareFrom(r *tl.Reader)
	WriteBareTo(w *tl.Writer)
}

// TLInputEncryptedChat represents ctor inputEncryptedChat#f141b5e1 chat_id:int access_hash:long = InputEncryptedChat from Telegram
type TLInputEncryptedChat struct {
	ChatID     int    // chat_id:int
	AccessHash uint64 // access_hash:long
}

func (o *TLInputEncryptedChat) Cmd() uint32 {
	return TagInputEncryptedChat
}

func (o *TLInputEncryptedChat) ReadBareFrom(r *tl.Reader) {
	o.ChatID = r.ReadInt()
	o.AccessHash = r.ReadUint64()
}

func (o *TLInputEncryptedChat) WriteBareTo(w *tl.Writer) {
	w.WriteInt(o.ChatID)
	w.WriteUint64(o.AccessHash)
}

func (o *TLInputEncryptedChat) String() string {
	return tl.Pretty(o)
}

// TLEncryptedFileType represents EncryptedFile from Telegram
type TLEncryptedFileType interface {
	IsTLEncryptedFile()
	Cmd() uint32
	ReadBareFrom(r *tl.Reader)
	WriteBareTo(w *tl.Writer)
}

// TLInputEncryptedFileType represents InputEncryptedFile from Telegram
type TLInputEncryptedFileType interface {
	IsTLInputEncryptedFile()
	Cmd() uint32
	ReadBareFrom(r *tl.Reader)
	WriteBareTo(w *tl.Writer)
}

// TLEncryptedMessageType represents EncryptedMessage from Telegram
type TLEncryptedMessageType interface {
	IsTLEncryptedMessage()
	Cmd() uint32
	ReadBareFrom(r *tl.Reader)
	WriteBareTo(w *tl.Writer)
}

// TLMessagesDHConfigType represents messages.DhConfig from Telegram
type TLMessagesDHConfigType interface {
	IsTLMessagesDHConfig()
	Cmd() uint32
	ReadBareFrom(r *tl.Reader)
	WriteBareTo(w *tl.Writer)
}

// TLMessagesSentEncryptedMessageType represents messages.SentEncryptedMessage from Telegram
type TLMessagesSentEncryptedMessageType interface {
	IsTLMessagesSentEncryptedMessage()
	Cmd() uint32
	ReadBareFrom(r *tl.Reader)
	WriteBareTo(w *tl.Writer)
}

// TLInputDocumentType represents InputDocument from Telegram
type TLInputDocumentType interface {
	IsTLInputDocument()
	Cmd() uint32
	ReadBareFrom(r *tl.Reader)
	WriteBareTo(w *tl.Writer)
}

// TLDocumentType represents Document from Telegram
type TLDocumentType interface {
	IsTLDocument()
	Cmd() uint32
	ReadBareFrom(r *tl.Reader)
	WriteBareTo(w *tl.Writer)
}

// TLHelpSupport represents ctor help.support#17c6b5f6 phone_number:string user:User = help.Support from Telegram
type TLHelpSupport struct {
	PhoneNumber string     // phone_number:string
	User        TLUserType // user:User
}

func (o *TLHelpSupport) Cmd() uint32 {
	return TagHelpSupport
}

func (o *TLHelpSupport) ReadBareFrom(r *tl.Reader) {
	o.PhoneNumber = r.ReadString()
	o.User = Schema.ReadLimitedBoxedObjectFrom(r, TagUserEmpty, TagUser).(TLUserType)
}

func (o *TLHelpSupport) WriteBareTo(w *tl.Writer) {
	w.WriteString(o.PhoneNumber)
	w.WriteCmd(o.User.Cmd())
	o.User.WriteBareTo(w)
}

func (o *TLHelpSupport) String() string {
	return tl.Pretty(o)
}

// TLNotifyPeerType represents NotifyPeer from Telegram
type TLNotifyPeerType interface {
	IsTLNotifyPeer()
	Cmd() uint32
	ReadBareFrom(r *tl.Reader)
	WriteBareTo(w *tl.Writer)
}

// TLSendMessageActionType represents SendMessageAction from Telegram
type TLSendMessageActionType interface {
	IsTLSendMessageAction()
	Cmd() uint32
	ReadBareFrom(r *tl.Reader)
	WriteBareTo(w *tl.Writer)
}

// TLContactsFound represents ctor contacts.found#1aa1f784 results:Vector<Peer> chats:Vector<Chat> users:Vector<User> = contacts.Found from Telegram
type TLContactsFound struct {
	Results []TLPeerType // results:Vector<Peer>
	Chats   []TLChatType // chats:Vector<Chat>
	Users   []TLUserType // users:Vector<User>
}

func (o *TLContactsFound) Cmd() uint32 {
	return TagContactsFound
}

func (o *TLContactsFound) ReadBareFrom(r *tl.Reader) {
	if cmd := r.ReadCmd(); cmd != TagVector {
		r.Fail(errors.New("expected: vector"))
	}
	o.Results = make([]TLPeerType, r.ReadInt())
	for i := 0; i < len(o.Results); i++ {
		o.Results[i] = Schema.ReadLimitedBoxedObjectFrom(r, TagPeerUser, TagPeerChat, TagPeerChannel).(TLPeerType)
	}
	if cmd := r.ReadCmd(); cmd != TagVector {
		r.Fail(errors.New("expected: vector"))
	}
	o.Chats = make([]TLChatType, r.ReadInt())
	for i := 0; i < len(o.Chats); i++ {
		o.Chats[i] = Schema.ReadLimitedBoxedObjectFrom(r, TagChatEmpty, TagChat, TagChatForbidden, TagChannel, TagChannelForbidden).(TLChatType)
	}
	if cmd := r.ReadCmd(); cmd != TagVector {
		r.Fail(errors.New("expected: vector"))
	}
	o.Users = make([]TLUserType, r.ReadInt())
	for i := 0; i < len(o.Users); i++ {
		o.Users[i] = Schema.ReadLimitedBoxedObjectFrom(r, TagUserEmpty, TagUser).(TLUserType)
	}
}

func (o *TLContactsFound) WriteBareTo(w *tl.Writer) {
	w.WriteCmd(TagVector)
	w.WriteInt(len(o.Results))
	for i := 0; i < len(o.Results); i++ {
		w.WriteCmd(o.Results[i].Cmd())
		o.Results[i].WriteBareTo(w)
	}
	w.WriteCmd(TagVector)
	w.WriteInt(len(o.Chats))
	for i := 0; i < len(o.Chats); i++ {
		w.WriteCmd(o.Chats[i].Cmd())
		o.Chats[i].WriteBareTo(w)
	}
	w.WriteCmd(TagVector)
	w.WriteInt(len(o.Users))
	for i := 0; i < len(o.Users); i++ {
		w.WriteCmd(o.Users[i].Cmd())
		o.Users[i].WriteBareTo(w)
	}
}

func (o *TLContactsFound) String() string {
	return tl.Pretty(o)
}

// TLInputPrivacyKeyType represents InputPrivacyKey from Telegram
type TLInputPrivacyKeyType interface {
	IsTLInputPrivacyKey()
	Cmd() uint32
	ReadBareFrom(r *tl.Reader)
	WriteBareTo(w *tl.Writer)
}

// TLPrivacyKeyType represents PrivacyKey from Telegram
type TLPrivacyKeyType interface {
	IsTLPrivacyKey()
	Cmd() uint32
	ReadBareFrom(r *tl.Reader)
	WriteBareTo(w *tl.Writer)
}

// TLInputPrivacyRuleType represents InputPrivacyRule from Telegram
type TLInputPrivacyRuleType interface {
	IsTLInputPrivacyRule()
	Cmd() uint32
	ReadBareFrom(r *tl.Reader)
	WriteBareTo(w *tl.Writer)
}

// TLPrivacyRuleType represents PrivacyRule from Telegram
type TLPrivacyRuleType interface {
	IsTLPrivacyRule()
	Cmd() uint32
	ReadBareFrom(r *tl.Reader)
	WriteBareTo(w *tl.Writer)
}

// TLAccountPrivacyRules represents ctor account.privacyRules#554abb6f rules:Vector<PrivacyRule> users:Vector<User> = account.PrivacyRules from Telegram
type TLAccountPrivacyRules struct {
	Rules []TLPrivacyRuleType // rules:Vector<PrivacyRule>
	Users []TLUserType        // users:Vector<User>
}

func (o *TLAccountPrivacyRules) Cmd() uint32 {
	return TagAccountPrivacyRules
}

func (o *TLAccountPrivacyRules) ReadBareFrom(r *tl.Reader) {
	if cmd := r.ReadCmd(); cmd != TagVector {
		r.Fail(errors.New("expected: vector"))
	}
	o.Rules = make([]TLPrivacyRuleType, r.ReadInt())
	for i := 0; i < len(o.Rules); i++ {
		o.Rules[i] = Schema.ReadLimitedBoxedObjectFrom(r, TagPrivacyValueAllowContacts, TagPrivacyValueAllowAll, TagPrivacyValueAllowUsers, TagPrivacyValueDisallowContacts, TagPrivacyValueDisallowAll, TagPrivacyValueDisallowUsers).(TLPrivacyRuleType)
	}
	if cmd := r.ReadCmd(); cmd != TagVector {
		r.Fail(errors.New("expected: vector"))
	}
	o.Users = make([]TLUserType, r.ReadInt())
	for i := 0; i < len(o.Users); i++ {
		o.Users[i] = Schema.ReadLimitedBoxedObjectFrom(r, TagUserEmpty, TagUser).(TLUserType)
	}
}

func (o *TLAccountPrivacyRules) WriteBareTo(w *tl.Writer) {
	w.WriteCmd(TagVector)
	w.WriteInt(len(o.Rules))
	for i := 0; i < len(o.Rules); i++ {
		w.WriteCmd(o.Rules[i].Cmd())
		o.Rules[i].WriteBareTo(w)
	}
	w.WriteCmd(TagVector)
	w.WriteInt(len(o.Users))
	for i := 0; i < len(o.Users); i++ {
		w.WriteCmd(o.Users[i].Cmd())
		o.Users[i].WriteBareTo(w)
	}
}

func (o *TLAccountPrivacyRules) String() string {
	return tl.Pretty(o)
}

// TLAccountDaysTTL represents ctor accountDaysTTL#b8d0afdf days:int = AccountDaysTTL from Telegram
type TLAccountDaysTTL struct {
	Days int // days:int
}

func (o *TLAccountDaysTTL) Cmd() uint32 {
	return TagAccountDaysTTL
}

func (o *TLAccountDaysTTL) ReadBareFrom(r *tl.Reader) {
	o.Days = r.ReadInt()
}

func (o *TLAccountDaysTTL) WriteBareTo(w *tl.Writer) {
	w.WriteInt(o.Days)
}

func (o *TLAccountDaysTTL) String() string {
	return tl.Pretty(o)
}

// TLDocumentAttributeType represents DocumentAttribute from Telegram
type TLDocumentAttributeType interface {
	IsTLDocumentAttribute()
	Cmd() uint32
	ReadBareFrom(r *tl.Reader)
	WriteBareTo(w *tl.Writer)
}

// TLMessagesStickersType represents messages.Stickers from Telegram
type TLMessagesStickersType interface {
	IsTLMessagesStickers()
	Cmd() uint32
	ReadBareFrom(r *tl.Reader)
	WriteBareTo(w *tl.Writer)
}

// TLStickerPack represents ctor stickerPack#12b299d4 emoticon:string documents:Vector<long> = StickerPack from Telegram
type TLStickerPack struct {
	Emoticon  string   // emoticon:string
	Documents []uint64 // documents:Vector<long>
}

func (o *TLStickerPack) Cmd() uint32 {
	return TagStickerPack
}

func (o *TLStickerPack) ReadBareFrom(r *tl.Reader) {
	o.Emoticon = r.ReadString()
	if cmd := r.ReadCmd(); cmd != TagVector {
		r.Fail(errors.New("expected: vector"))
	}
	o.Documents = make([]uint64, r.ReadInt())
	for i := 0; i < len(o.Documents); i++ {
		o.Documents[i] = r.ReadUint64()
	}
}

func (o *TLStickerPack) WriteBareTo(w *tl.Writer) {
	w.WriteString(o.Emoticon)
	w.WriteCmd(TagVector)
	w.WriteInt(len(o.Documents))
	for i := 0; i < len(o.Documents); i++ {
		w.WriteUint64(o.Documents[i])
	}
}

func (o *TLStickerPack) String() string {
	return tl.Pretty(o)
}

// TLMessagesAllStickersType represents messages.AllStickers from Telegram
type TLMessagesAllStickersType interface {
	IsTLMessagesAllStickers()
	Cmd() uint32
	ReadBareFrom(r *tl.Reader)
	WriteBareTo(w *tl.Writer)
}

// TLDisabledFeature represents ctor disabledFeature#ae636f24 feature:string description:string = DisabledFeature from Telegram
type TLDisabledFeature struct {
	Feature     string // feature:string
	Description string // description:string
}

func (o *TLDisabledFeature) Cmd() uint32 {
	return TagDisabledFeature
}

func (o *TLDisabledFeature) ReadBareFrom(r *tl.Reader) {
	o.Feature = r.ReadString()
	o.Description = r.ReadString()
}

func (o *TLDisabledFeature) WriteBareTo(w *tl.Writer) {
	w.WriteString(o.Feature)
	w.WriteString(o.Description)
}

func (o *TLDisabledFeature) String() string {
	return tl.Pretty(o)
}

// TLMessagesAffectedMessages represents ctor messages.affectedMessages#84d19185 pts:int pts_count:int = messages.AffectedMessages from Telegram
type TLMessagesAffectedMessages struct {
	Pts      int // pts:int
	PtsCount int // pts_count:int
}

func (o *TLMessagesAffectedMessages) Cmd() uint32 {
	return TagMessagesAffectedMessages
}

func (o *TLMessagesAffectedMessages) ReadBareFrom(r *tl.Reader) {
	o.Pts = r.ReadInt()
	o.PtsCount = r.ReadInt()
}

func (o *TLMessagesAffectedMessages) WriteBareTo(w *tl.Writer) {
	w.WriteInt(o.Pts)
	w.WriteInt(o.PtsCount)
}

func (o *TLMessagesAffectedMessages) String() string {
	return tl.Pretty(o)
}

// TLContactLinkType represents ContactLink from Telegram
type TLContactLinkType interface {
	IsTLContactLink()
	Cmd() uint32
	ReadBareFrom(r *tl.Reader)
	WriteBareTo(w *tl.Writer)
}

// TLWebPageType represents WebPage from Telegram
type TLWebPageType interface {
	IsTLWebPage()
	Cmd() uint32
	ReadBareFrom(r *tl.Reader)
	WriteBareTo(w *tl.Writer)
}

// TLAuthorization represents ctor authorization#7bf2e6f6 hash:long flags:int device_model:string platform:string system_version:string api_id:int app_name:string app_version:string date_created:int date_active:int ip:string country:string region:string = Authorization from Telegram
type TLAuthorization struct {
	Hash          uint64 // hash:long
	Flags         int    // flags:int
	DeviceModel   string // device_model:string
	Platform      string // platform:string
	SystemVersion string // system_version:string
	APIID         int    // api_id:int
	AppName       string // app_name:string
	AppVersion    string // app_version:string
	DateCreated   int    // date_created:int
	DateActive    int    // date_active:int
	IP            string // ip:string
	Country       string // country:string
	Region        string // region:string
}

func (o *TLAuthorization) Cmd() uint32 {
	return TagAuthorization
}

func (o *TLAuthorization) ReadBareFrom(r *tl.Reader) {
	o.Hash = r.ReadUint64()
	o.Flags = r.ReadInt()
	o.DeviceModel = r.ReadString()
	o.Platform = r.ReadString()
	o.SystemVersion = r.ReadString()
	o.APIID = r.ReadInt()
	o.AppName = r.ReadString()
	o.AppVersion = r.ReadString()
	o.DateCreated = r.ReadInt()
	o.DateActive = r.ReadInt()
	o.IP = r.ReadString()
	o.Country = r.ReadString()
	o.Region = r.ReadString()
}

func (o *TLAuthorization) WriteBareTo(w *tl.Writer) {
	w.WriteUint64(o.Hash)
	w.WriteInt(o.Flags)
	w.WriteString(o.DeviceModel)
	w.WriteString(o.Platform)
	w.WriteString(o.SystemVersion)
	w.WriteInt(o.APIID)
	w.WriteString(o.AppName)
	w.WriteString(o.AppVersion)
	w.WriteInt(o.DateCreated)
	w.WriteInt(o.DateActive)
	w.WriteString(o.IP)
	w.WriteString(o.Country)
	w.WriteString(o.Region)
}

func (o *TLAuthorization) String() string {
	return tl.Pretty(o)
}

// TLAccountAuthorizations represents ctor account.authorizations#1250abde authorizations:Vector<Authorization> = account.Authorizations from Telegram
type TLAccountAuthorizations struct {
	Authorizations []*TLAuthorization // authorizations:Vector<Authorization>
}

func (o *TLAccountAuthorizations) Cmd() uint32 {
	return TagAccountAuthorizations
}

func (o *TLAccountAuthorizations) ReadBareFrom(r *tl.Reader) {
	if cmd := r.ReadCmd(); cmd != TagVector {
		r.Fail(errors.New("expected: vector"))
	}
	o.Authorizations = make([]*TLAuthorization, r.ReadInt())
	for i := 0; i < len(o.Authorizations); i++ {
		if cmd := r.ReadCmd(); cmd != TagAuthorization {
			r.Fail(errors.New("expected: authorization"))
		}
		o.Authorizations[i] = new(TLAuthorization)
		o.Authorizations[i].ReadBareFrom(r)
	}
}

func (o *TLAccountAuthorizations) WriteBareTo(w *tl.Writer) {
	w.WriteCmd(TagVector)
	w.WriteInt(len(o.Authorizations))
	for i := 0; i < len(o.Authorizations); i++ {
		w.WriteCmd(TagAuthorization)
		o.Authorizations[i].WriteBareTo(w)
	}
}

func (o *TLAccountAuthorizations) String() string {
	return tl.Pretty(o)
}

// TLAccountPasswordType represents account.Password from Telegram
type TLAccountPasswordType interface {
	IsTLAccountPassword()
	Cmd() uint32
	ReadBareFrom(r *tl.Reader)
	WriteBareTo(w *tl.Writer)
}

// TLAccountPasswordSettings represents ctor account.passwordSettings#b7b72ab3 email:string = account.PasswordSettings from Telegram
type TLAccountPasswordSettings struct {
	Email string // email:string
}

func (o *TLAccountPasswordSettings) Cmd() uint32 {
	return TagAccountPasswordSettings
}

func (o *TLAccountPasswordSettings) ReadBareFrom(r *tl.Reader) {
	o.Email = r.ReadString()
}

func (o *TLAccountPasswordSettings) WriteBareTo(w *tl.Writer) {
	w.WriteString(o.Email)
}

func (o *TLAccountPasswordSettings) String() string {
	return tl.Pretty(o)
}

// TLAccountPasswordInputSettings represents ctor account.passwordInputSettings#86916deb flags:# flags.0?new_salt:bytes flags.0?new_password_hash:bytes flags.0?hint:string flags.1?email:string = account.PasswordInputSettings from Telegram
type TLAccountPasswordInputSettings struct {
	Flags           uint   // flags:#
	NewSalt         []byte // flags.0?new_salt:bytes
	NewPasswordHash []byte // flags.0?new_password_hash:bytes
	Hint            string // flags.0?hint:string
	Email           string // flags.1?email:string
}

func (o *TLAccountPasswordInputSettings) Cmd() uint32 {
	return TagAccountPasswordInputSettings
}

func (o *TLAccountPasswordInputSettings) ReadBareFrom(r *tl.Reader) {
	o.Flags = uint(r.ReadUint32())
	o.NewSalt = r.ReadBlob()
	o.NewPasswordHash = r.ReadBlob()
	o.Hint = r.ReadString()
	o.Email = r.ReadString()
}

func (o *TLAccountPasswordInputSettings) WriteBareTo(w *tl.Writer) {
	w.WriteUint32(uint32(o.Flags))
	w.WriteBlob(o.NewSalt)
	w.WriteBlob(o.NewPasswordHash)
	w.WriteString(o.Hint)
	w.WriteString(o.Email)
}

func (o *TLAccountPasswordInputSettings) String() string {
	return tl.Pretty(o)
}

// TLAuthPasswordRecovery represents ctor auth.passwordRecovery#137948a5 email_pattern:string = auth.PasswordRecovery from Telegram
type TLAuthPasswordRecovery struct {
	EmailPattern string // email_pattern:string
}

func (o *TLAuthPasswordRecovery) Cmd() uint32 {
	return TagAuthPasswordRecovery
}

func (o *TLAuthPasswordRecovery) ReadBareFrom(r *tl.Reader) {
	o.EmailPattern = r.ReadString()
}

func (o *TLAuthPasswordRecovery) WriteBareTo(w *tl.Writer) {
	w.WriteString(o.EmailPattern)
}

func (o *TLAuthPasswordRecovery) String() string {
	return tl.Pretty(o)
}

// TLReceivedNotifyMessage represents ctor receivedNotifyMessage#a384b779 id:int flags:int = ReceivedNotifyMessage from Telegram
type TLReceivedNotifyMessage struct {
	ID    int // id:int
	Flags int // flags:int
}

func (o *TLReceivedNotifyMessage) Cmd() uint32 {
	return TagReceivedNotifyMessage
}

func (o *TLReceivedNotifyMessage) ReadBareFrom(r *tl.Reader) {
	o.ID = r.ReadInt()
	o.Flags = r.ReadInt()
}

func (o *TLReceivedNotifyMessage) WriteBareTo(w *tl.Writer) {
	w.WriteInt(o.ID)
	w.WriteInt(o.Flags)
}

func (o *TLReceivedNotifyMessage) String() string {
	return tl.Pretty(o)
}

// TLExportedChatInviteType represents ExportedChatInvite from Telegram
type TLExportedChatInviteType interface {
	IsTLExportedChatInvite()
	Cmd() uint32
	ReadBareFrom(r *tl.Reader)
	WriteBareTo(w *tl.Writer)
}

// TLChatInviteType represents ChatInvite from Telegram
type TLChatInviteType interface {
	IsTLChatInvite()
	Cmd() uint32
	ReadBareFrom(r *tl.Reader)
	WriteBareTo(w *tl.Writer)
}

// TLInputStickerSetType represents InputStickerSet from Telegram
type TLInputStickerSetType interface {
	IsTLInputStickerSet()
	Cmd() uint32
	ReadBareFrom(r *tl.Reader)
	WriteBareTo(w *tl.Writer)
}

// TLStickerSet represents ctor stickerSet#cd303b41 flags:# flags.0?installed:true flags.1?archived:true flags.2?official:true flags.3?masks:true id:long access_hash:long title:string short_name:string count:int hash:int = StickerSet from Telegram
type TLStickerSet struct {
	Flags      uint   // flags:#
	Installed  bool   // flags.0?installed:true
	Archived   bool   // flags.1?archived:true
	Official   bool   // flags.2?official:true
	Masks      bool   // flags.3?masks:true
	ID         uint64 // id:long
	AccessHash uint64 // access_hash:long
	Title      string // title:string
	ShortName  string // short_name:string
	Count      int    // count:int
	Hash       int    // hash:int
}

func (o *TLStickerSet) Cmd() uint32 {
	return TagStickerSet
}

func (o *TLStickerSet) ReadBareFrom(r *tl.Reader) {
	o.Flags = uint(r.ReadUint32())
	o.Installed = true
	o.Archived = true
	o.Official = true
	o.Masks = true
	o.ID = r.ReadUint64()
	o.AccessHash = r.ReadUint64()
	o.Title = r.ReadString()
	o.ShortName = r.ReadString()
	o.Count = r.ReadInt()
	o.Hash = r.ReadInt()
}

func (o *TLStickerSet) WriteBareTo(w *tl.Writer) {
	w.WriteUint32(uint32(o.Flags))
	w.WriteUint64(o.ID)
	w.WriteUint64(o.AccessHash)
	w.WriteString(o.Title)
	w.WriteString(o.ShortName)
	w.WriteInt(o.Count)
	w.WriteInt(o.Hash)
}

func (o *TLStickerSet) String() string {
	return tl.Pretty(o)
}

// TLMessagesStickerSet represents ctor messages.stickerSet#b60a24a6 set:StickerSet packs:Vector<StickerPack> documents:Vector<Document> = messages.StickerSet from Telegram
type TLMessagesStickerSet struct {
	Set       *TLStickerSet    // set:StickerSet
	Packs     []*TLStickerPack // packs:Vector<StickerPack>
	Documents []TLDocumentType // documents:Vector<Document>
}

func (o *TLMessagesStickerSet) Cmd() uint32 {
	return TagMessagesStickerSet
}

func (o *TLMessagesStickerSet) ReadBareFrom(r *tl.Reader) {
	if cmd := r.ReadCmd(); cmd != TagStickerSet {
		r.Fail(errors.New("expected: stickerSet"))
	}
	o.Set = new(TLStickerSet)
	o.Set.ReadBareFrom(r)
	if cmd := r.ReadCmd(); cmd != TagVector {
		r.Fail(errors.New("expected: vector"))
	}
	o.Packs = make([]*TLStickerPack, r.ReadInt())
	for i := 0; i < len(o.Packs); i++ {
		if cmd := r.ReadCmd(); cmd != TagStickerPack {
			r.Fail(errors.New("expected: stickerPack"))
		}
		o.Packs[i] = new(TLStickerPack)
		o.Packs[i].ReadBareFrom(r)
	}
	if cmd := r.ReadCmd(); cmd != TagVector {
		r.Fail(errors.New("expected: vector"))
	}
	o.Documents = make([]TLDocumentType, r.ReadInt())
	for i := 0; i < len(o.Documents); i++ {
		o.Documents[i] = Schema.ReadLimitedBoxedObjectFrom(r, TagDocumentEmpty, TagDocument).(TLDocumentType)
	}
}

func (o *TLMessagesStickerSet) WriteBareTo(w *tl.Writer) {
	w.WriteCmd(TagStickerSet)
	o.Set.WriteBareTo(w)
	w.WriteCmd(TagVector)
	w.WriteInt(len(o.Packs))
	for i := 0; i < len(o.Packs); i++ {
		w.WriteCmd(TagStickerPack)
		o.Packs[i].WriteBareTo(w)
	}
	w.WriteCmd(TagVector)
	w.WriteInt(len(o.Documents))
	for i := 0; i < len(o.Documents); i++ {
		w.WriteCmd(o.Documents[i].Cmd())
		o.Documents[i].WriteBareTo(w)
	}
}

func (o *TLMessagesStickerSet) String() string {
	return tl.Pretty(o)
}

// TLBotCommand represents ctor botCommand#c27ac8c7 command:string description:string = BotCommand from Telegram
type TLBotCommand struct {
	Command     string // command:string
	Description string // description:string
}

func (o *TLBotCommand) Cmd() uint32 {
	return TagBotCommand
}

func (o *TLBotCommand) ReadBareFrom(r *tl.Reader) {
	o.Command = r.ReadString()
	o.Description = r.ReadString()
}

func (o *TLBotCommand) WriteBareTo(w *tl.Writer) {
	w.WriteString(o.Command)
	w.WriteString(o.Description)
}

func (o *TLBotCommand) String() string {
	return tl.Pretty(o)
}

// TLBotInfo represents ctor botInfo#98e81d3a user_id:int description:string commands:Vector<BotCommand> = BotInfo from Telegram
type TLBotInfo struct {
	UserID      int             // user_id:int
	Description string          // description:string
	Commands    []*TLBotCommand // commands:Vector<BotCommand>
}

func (o *TLBotInfo) Cmd() uint32 {
	return TagBotInfo
}

func (o *TLBotInfo) ReadBareFrom(r *tl.Reader) {
	o.UserID = r.ReadInt()
	o.Description = r.ReadString()
	if cmd := r.ReadCmd(); cmd != TagVector {
		r.Fail(errors.New("expected: vector"))
	}
	o.Commands = make([]*TLBotCommand, r.ReadInt())
	for i := 0; i < len(o.Commands); i++ {
		if cmd := r.ReadCmd(); cmd != TagBotCommand {
			r.Fail(errors.New("expected: botCommand"))
		}
		o.Commands[i] = new(TLBotCommand)
		o.Commands[i].ReadBareFrom(r)
	}
}

func (o *TLBotInfo) WriteBareTo(w *tl.Writer) {
	w.WriteInt(o.UserID)
	w.WriteString(o.Description)
	w.WriteCmd(TagVector)
	w.WriteInt(len(o.Commands))
	for i := 0; i < len(o.Commands); i++ {
		w.WriteCmd(TagBotCommand)
		o.Commands[i].WriteBareTo(w)
	}
}

func (o *TLBotInfo) String() string {
	return tl.Pretty(o)
}

// TLKeyboardButtonType represents KeyboardButton from Telegram
type TLKeyboardButtonType interface {
	IsTLKeyboardButton()
	Cmd() uint32
	ReadBareFrom(r *tl.Reader)
	WriteBareTo(w *tl.Writer)
}

// TLKeyboardButtonRow represents ctor keyboardButtonRow#77608b83 buttons:Vector<KeyboardButton> = KeyboardButtonRow from Telegram
type TLKeyboardButtonRow struct {
	Buttons []TLKeyboardButtonType // buttons:Vector<KeyboardButton>
}

func (o *TLKeyboardButtonRow) Cmd() uint32 {
	return TagKeyboardButtonRow
}

func (o *TLKeyboardButtonRow) ReadBareFrom(r *tl.Reader) {
	if cmd := r.ReadCmd(); cmd != TagVector {
		r.Fail(errors.New("expected: vector"))
	}
	o.Buttons = make([]TLKeyboardButtonType, r.ReadInt())
	for i := 0; i < len(o.Buttons); i++ {
		o.Buttons[i] = Schema.ReadLimitedBoxedObjectFrom(r, TagKeyboardButton, TagKeyboardButtonUrl, TagKeyboardButtonCallback, TagKeyboardButtonRequestPhone, TagKeyboardButtonRequestGeoLocation, TagKeyboardButtonSwitchInline, TagKeyboardButtonGame, TagKeyboardButtonBuy).(TLKeyboardButtonType)
	}
}

func (o *TLKeyboardButtonRow) WriteBareTo(w *tl.Writer) {
	w.WriteCmd(TagVector)
	w.WriteInt(len(o.Buttons))
	for i := 0; i < len(o.Buttons); i++ {
		w.WriteCmd(o.Buttons[i].Cmd())
		o.Buttons[i].WriteBareTo(w)
	}
}

func (o *TLKeyboardButtonRow) String() string {
	return tl.Pretty(o)
}

// TLReplyMarkupType represents ReplyMarkup from Telegram
type TLReplyMarkupType interface {
	IsTLReplyMarkup()
	Cmd() uint32
	ReadBareFrom(r *tl.Reader)
	WriteBareTo(w *tl.Writer)
}

// TLMessageEntityType represents MessageEntity from Telegram
type TLMessageEntityType interface {
	IsTLMessageEntity()
	Cmd() uint32
	ReadBareFrom(r *tl.Reader)
	WriteBareTo(w *tl.Writer)
}

// TLInputChannelType represents InputChannel from Telegram
type TLInputChannelType interface {
	IsTLInputChannel()
	Cmd() uint32
	ReadBareFrom(r *tl.Reader)
	WriteBareTo(w *tl.Writer)
}

// TLContactsResolvedPeer represents ctor contacts.resolvedPeer#7f077ad9 peer:Peer chats:Vector<Chat> users:Vector<User> = contacts.ResolvedPeer from Telegram
type TLContactsResolvedPeer struct {
	Peer  TLPeerType   // peer:Peer
	Chats []TLChatType // chats:Vector<Chat>
	Users []TLUserType // users:Vector<User>
}

func (o *TLContactsResolvedPeer) Cmd() uint32 {
	return TagContactsResolvedPeer
}

func (o *TLContactsResolvedPeer) ReadBareFrom(r *tl.Reader) {
	o.Peer = Schema.ReadLimitedBoxedObjectFrom(r, TagPeerUser, TagPeerChat, TagPeerChannel).(TLPeerType)
	if cmd := r.ReadCmd(); cmd != TagVector {
		r.Fail(errors.New("expected: vector"))
	}
	o.Chats = make([]TLChatType, r.ReadInt())
	for i := 0; i < len(o.Chats); i++ {
		o.Chats[i] = Schema.ReadLimitedBoxedObjectFrom(r, TagChatEmpty, TagChat, TagChatForbidden, TagChannel, TagChannelForbidden).(TLChatType)
	}
	if cmd := r.ReadCmd(); cmd != TagVector {
		r.Fail(errors.New("expected: vector"))
	}
	o.Users = make([]TLUserType, r.ReadInt())
	for i := 0; i < len(o.Users); i++ {
		o.Users[i] = Schema.ReadLimitedBoxedObjectFrom(r, TagUserEmpty, TagUser).(TLUserType)
	}
}

func (o *TLContactsResolvedPeer) WriteBareTo(w *tl.Writer) {
	w.WriteCmd(o.Peer.Cmd())
	o.Peer.WriteBareTo(w)
	w.WriteCmd(TagVector)
	w.WriteInt(len(o.Chats))
	for i := 0; i < len(o.Chats); i++ {
		w.WriteCmd(o.Chats[i].Cmd())
		o.Chats[i].WriteBareTo(w)
	}
	w.WriteCmd(TagVector)
	w.WriteInt(len(o.Users))
	for i := 0; i < len(o.Users); i++ {
		w.WriteCmd(o.Users[i].Cmd())
		o.Users[i].WriteBareTo(w)
	}
}

func (o *TLContactsResolvedPeer) String() string {
	return tl.Pretty(o)
}

// TLMessageRange represents ctor messageRange#0ae30253 min_id:int max_id:int = MessageRange from Telegram
type TLMessageRange struct {
	MinID int // min_id:int
	MaxID int // max_id:int
}

func (o *TLMessageRange) Cmd() uint32 {
	return TagMessageRange
}

func (o *TLMessageRange) ReadBareFrom(r *tl.Reader) {
	o.MinID = r.ReadInt()
	o.MaxID = r.ReadInt()
}

func (o *TLMessageRange) WriteBareTo(w *tl.Writer) {
	w.WriteInt(o.MinID)
	w.WriteInt(o.MaxID)
}

func (o *TLMessageRange) String() string {
	return tl.Pretty(o)
}

// TLUpdatesChannelDifferenceType represents updates.ChannelDifference from Telegram
type TLUpdatesChannelDifferenceType interface {
	IsTLUpdatesChannelDifference()
	Cmd() uint32
	ReadBareFrom(r *tl.Reader)
	WriteBareTo(w *tl.Writer)
}

// TLChannelMessagesFilterType represents ChannelMessagesFilter from Telegram
type TLChannelMessagesFilterType interface {
	IsTLChannelMessagesFilter()
	Cmd() uint32
	ReadBareFrom(r *tl.Reader)
	WriteBareTo(w *tl.Writer)
}

// TLChannelParticipantType represents ChannelParticipant from Telegram
type TLChannelParticipantType interface {
	IsTLChannelParticipant()
	Cmd() uint32
	ReadBareFrom(r *tl.Reader)
	WriteBareTo(w *tl.Writer)
}

// TLChannelParticipantsFilterType represents ChannelParticipantsFilter from Telegram
type TLChannelParticipantsFilterType interface {
	IsTLChannelParticipantsFilter()
	Cmd() uint32
	ReadBareFrom(r *tl.Reader)
	WriteBareTo(w *tl.Writer)
}

// TLChannelParticipantRoleType represents ChannelParticipantRole from Telegram
type TLChannelParticipantRoleType interface {
	IsTLChannelParticipantRole()
	Cmd() uint32
	ReadBareFrom(r *tl.Reader)
	WriteBareTo(w *tl.Writer)
}

// TLChannelsChannelParticipants represents ctor channels.channelParticipants#f56ee2a8 count:int participants:Vector<ChannelParticipant> users:Vector<User> = channels.ChannelParticipants from Telegram
type TLChannelsChannelParticipants struct {
	Count        int                        // count:int
	Participants []TLChannelParticipantType // participants:Vector<ChannelParticipant>
	Users        []TLUserType               // users:Vector<User>
}

func (o *TLChannelsChannelParticipants) Cmd() uint32 {
	return TagChannelsChannelParticipants
}

func (o *TLChannelsChannelParticipants) ReadBareFrom(r *tl.Reader) {
	o.Count = r.ReadInt()
	if cmd := r.ReadCmd(); cmd != TagVector {
		r.Fail(errors.New("expected: vector"))
	}
	o.Participants = make([]TLChannelParticipantType, r.ReadInt())
	for i := 0; i < len(o.Participants); i++ {
		o.Participants[i] = Schema.ReadLimitedBoxedObjectFrom(r, TagChannelParticipant, TagChannelParticipantSelf, TagChannelParticipantModerator, TagChannelParticipantEditor, TagChannelParticipantKicked, TagChannelParticipantCreator).(TLChannelParticipantType)
	}
	if cmd := r.ReadCmd(); cmd != TagVector {
		r.Fail(errors.New("expected: vector"))
	}
	o.Users = make([]TLUserType, r.ReadInt())
	for i := 0; i < len(o.Users); i++ {
		o.Users[i] = Schema.ReadLimitedBoxedObjectFrom(r, TagUserEmpty, TagUser).(TLUserType)
	}
}

func (o *TLChannelsChannelParticipants) WriteBareTo(w *tl.Writer) {
	w.WriteInt(o.Count)
	w.WriteCmd(TagVector)
	w.WriteInt(len(o.Participants))
	for i := 0; i < len(o.Participants); i++ {
		w.WriteCmd(o.Participants[i].Cmd())
		o.Participants[i].WriteBareTo(w)
	}
	w.WriteCmd(TagVector)
	w.WriteInt(len(o.Users))
	for i := 0; i < len(o.Users); i++ {
		w.WriteCmd(o.Users[i].Cmd())
		o.Users[i].WriteBareTo(w)
	}
}

func (o *TLChannelsChannelParticipants) String() string {
	return tl.Pretty(o)
}

// TLChannelsChannelParticipant represents ctor channels.channelParticipant#d0d9b163 participant:ChannelParticipant users:Vector<User> = channels.ChannelParticipant from Telegram
type TLChannelsChannelParticipant struct {
	Participant TLChannelParticipantType // participant:ChannelParticipant
	Users       []TLUserType             // users:Vector<User>
}

func (o *TLChannelsChannelParticipant) Cmd() uint32 {
	return TagChannelsChannelParticipant
}

func (o *TLChannelsChannelParticipant) ReadBareFrom(r *tl.Reader) {
	o.Participant = Schema.ReadLimitedBoxedObjectFrom(r, TagChannelParticipant, TagChannelParticipantSelf, TagChannelParticipantModerator, TagChannelParticipantEditor, TagChannelParticipantKicked, TagChannelParticipantCreator).(TLChannelParticipantType)
	if cmd := r.ReadCmd(); cmd != TagVector {
		r.Fail(errors.New("expected: vector"))
	}
	o.Users = make([]TLUserType, r.ReadInt())
	for i := 0; i < len(o.Users); i++ {
		o.Users[i] = Schema.ReadLimitedBoxedObjectFrom(r, TagUserEmpty, TagUser).(TLUserType)
	}
}

func (o *TLChannelsChannelParticipant) WriteBareTo(w *tl.Writer) {
	w.WriteCmd(o.Participant.Cmd())
	o.Participant.WriteBareTo(w)
	w.WriteCmd(TagVector)
	w.WriteInt(len(o.Users))
	for i := 0; i < len(o.Users); i++ {
		w.WriteCmd(o.Users[i].Cmd())
		o.Users[i].WriteBareTo(w)
	}
}

func (o *TLChannelsChannelParticipant) String() string {
	return tl.Pretty(o)
}

// TLHelpTermsOfService represents ctor help.termsOfService#f1ee3e90 text:string = help.TermsOfService from Telegram
type TLHelpTermsOfService struct {
	Text string // text:string
}

func (o *TLHelpTermsOfService) Cmd() uint32 {
	return TagHelpTermsOfService
}

func (o *TLHelpTermsOfService) ReadBareFrom(r *tl.Reader) {
	o.Text = r.ReadString()
}

func (o *TLHelpTermsOfService) WriteBareTo(w *tl.Writer) {
	w.WriteString(o.Text)
}

func (o *TLHelpTermsOfService) String() string {
	return tl.Pretty(o)
}

// TLFoundGifType represents FoundGif from Telegram
type TLFoundGifType interface {
	IsTLFoundGif()
	Cmd() uint32
	ReadBareFrom(r *tl.Reader)
	WriteBareTo(w *tl.Writer)
}

// TLMessagesFoundGifs represents ctor messages.foundGifs#450a1c0a next_offset:int results:Vector<FoundGif> = messages.FoundGifs from Telegram
type TLMessagesFoundGifs struct {
	NextOffset int              // next_offset:int
	Results    []TLFoundGifType // results:Vector<FoundGif>
}

func (o *TLMessagesFoundGifs) Cmd() uint32 {
	return TagMessagesFoundGifs
}

func (o *TLMessagesFoundGifs) ReadBareFrom(r *tl.Reader) {
	o.NextOffset = r.ReadInt()
	if cmd := r.ReadCmd(); cmd != TagVector {
		r.Fail(errors.New("expected: vector"))
	}
	o.Results = make([]TLFoundGifType, r.ReadInt())
	for i := 0; i < len(o.Results); i++ {
		o.Results[i] = Schema.ReadLimitedBoxedObjectFrom(r, TagFoundGif, TagFoundGifCached).(TLFoundGifType)
	}
}

func (o *TLMessagesFoundGifs) WriteBareTo(w *tl.Writer) {
	w.WriteInt(o.NextOffset)
	w.WriteCmd(TagVector)
	w.WriteInt(len(o.Results))
	for i := 0; i < len(o.Results); i++ {
		w.WriteCmd(o.Results[i].Cmd())
		o.Results[i].WriteBareTo(w)
	}
}

func (o *TLMessagesFoundGifs) String() string {
	return tl.Pretty(o)
}

// TLMessagesSavedGifsType represents messages.SavedGifs from Telegram
type TLMessagesSavedGifsType interface {
	IsTLMessagesSavedGifs()
	Cmd() uint32
	ReadBareFrom(r *tl.Reader)
	WriteBareTo(w *tl.Writer)
}

// TLInputBotInlineMessageType represents InputBotInlineMessage from Telegram
type TLInputBotInlineMessageType interface {
	IsTLInputBotInlineMessage()
	Cmd() uint32
	ReadBareFrom(r *tl.Reader)
	WriteBareTo(w *tl.Writer)
}

// TLInputBotInlineResultType represents InputBotInlineResult from Telegram
type TLInputBotInlineResultType interface {
	IsTLInputBotInlineResult()
	Cmd() uint32
	ReadBareFrom(r *tl.Reader)
	WriteBareTo(w *tl.Writer)
}

// TLBotInlineMessageType represents BotInlineMessage from Telegram
type TLBotInlineMessageType interface {
	IsTLBotInlineMessage()
	Cmd() uint32
	ReadBareFrom(r *tl.Reader)
	WriteBareTo(w *tl.Writer)
}

// TLBotInlineResultType represents BotInlineResult from Telegram
type TLBotInlineResultType interface {
	IsTLBotInlineResult()
	Cmd() uint32
	ReadBareFrom(r *tl.Reader)
	WriteBareTo(w *tl.Writer)
}

// TLMessagesBotResults represents ctor messages.botResults#ccd3563d flags:# flags.0?gallery:true query_id:long flags.1?next_offset:string flags.2?switch_pm:InlineBotSwitchPM results:Vector<BotInlineResult> cache_time:int = messages.BotResults from Telegram
type TLMessagesBotResults struct {
	Flags      uint                    // flags:#
	Gallery    bool                    // flags.0?gallery:true
	QueryID    uint64                  // query_id:long
	NextOffset string                  // flags.1?next_offset:string
	SwitchPm   *TLInlineBotSwitchPM    // flags.2?switch_pm:InlineBotSwitchPM
	Results    []TLBotInlineResultType // results:Vector<BotInlineResult>
	CacheTime  int                     // cache_time:int
}

func (o *TLMessagesBotResults) Cmd() uint32 {
	return TagMessagesBotResults
}

func (o *TLMessagesBotResults) ReadBareFrom(r *tl.Reader) {
	o.Flags = uint(r.ReadUint32())
	o.Gallery = true
	o.QueryID = r.ReadUint64()
	o.NextOffset = r.ReadString()
	if cmd := r.ReadCmd(); cmd != TagInlineBotSwitchPM {
		r.Fail(errors.New("expected: inlineBotSwitchPM"))
	}
	o.SwitchPm = new(TLInlineBotSwitchPM)
	o.SwitchPm.ReadBareFrom(r)
	if cmd := r.ReadCmd(); cmd != TagVector {
		r.Fail(errors.New("expected: vector"))
	}
	o.Results = make([]TLBotInlineResultType, r.ReadInt())
	for i := 0; i < len(o.Results); i++ {
		o.Results[i] = Schema.ReadLimitedBoxedObjectFrom(r, TagBotInlineResult, TagBotInlineMediaResult).(TLBotInlineResultType)
	}
	o.CacheTime = r.ReadInt()
}

func (o *TLMessagesBotResults) WriteBareTo(w *tl.Writer) {
	w.WriteUint32(uint32(o.Flags))
	w.WriteUint64(o.QueryID)
	w.WriteString(o.NextOffset)
	w.WriteCmd(TagInlineBotSwitchPM)
	o.SwitchPm.WriteBareTo(w)
	w.WriteCmd(TagVector)
	w.WriteInt(len(o.Results))
	for i := 0; i < len(o.Results); i++ {
		w.WriteCmd(o.Results[i].Cmd())
		o.Results[i].WriteBareTo(w)
	}
	w.WriteInt(o.CacheTime)
}

func (o *TLMessagesBotResults) String() string {
	return tl.Pretty(o)
}

// TLExportedMessageLink represents ctor exportedMessageLink#1f486803 link:string = ExportedMessageLink from Telegram
type TLExportedMessageLink struct {
	Link string // link:string
}

func (o *TLExportedMessageLink) Cmd() uint32 {
	return TagExportedMessageLink
}

func (o *TLExportedMessageLink) ReadBareFrom(r *tl.Reader) {
	o.Link = r.ReadString()
}

func (o *TLExportedMessageLink) WriteBareTo(w *tl.Writer) {
	w.WriteString(o.Link)
}

func (o *TLExportedMessageLink) String() string {
	return tl.Pretty(o)
}

// TLMessageFwdHeader represents ctor messageFwdHeader#c786ddcb flags:# flags.0?from_id:int date:int flags.1?channel_id:int flags.2?channel_post:int = MessageFwdHeader from Telegram
type TLMessageFwdHeader struct {
	Flags       uint // flags:#
	FromID      int  // flags.0?from_id:int
	Date        int  // date:int
	ChannelID   int  // flags.1?channel_id:int
	ChannelPost int  // flags.2?channel_post:int
}

func (o *TLMessageFwdHeader) Cmd() uint32 {
	return TagMessageFwdHeader
}

func (o *TLMessageFwdHeader) ReadBareFrom(r *tl.Reader) {
	o.Flags = uint(r.ReadUint32())
	o.FromID = r.ReadInt()
	o.Date = r.ReadInt()
	o.ChannelID = r.ReadInt()
	o.ChannelPost = r.ReadInt()
}

func (o *TLMessageFwdHeader) WriteBareTo(w *tl.Writer) {
	w.WriteUint32(uint32(o.Flags))
	w.WriteInt(o.FromID)
	w.WriteInt(o.Date)
	w.WriteInt(o.ChannelID)
	w.WriteInt(o.ChannelPost)
}

func (o *TLMessageFwdHeader) String() string {
	return tl.Pretty(o)
}

// TLAuthCodeTypeType represents auth.CodeType from Telegram
type TLAuthCodeTypeType interface {
	IsTLAuthCodeType()
	Cmd() uint32
	ReadBareFrom(r *tl.Reader)
	WriteBareTo(w *tl.Writer)
}

// TLAuthSentCodeTypeType represents auth.SentCodeType from Telegram
type TLAuthSentCodeTypeType interface {
	IsTLAuthSentCodeType()
	Cmd() uint32
	ReadBareFrom(r *tl.Reader)
	WriteBareTo(w *tl.Writer)
}

// TLMessagesBotCallbackAnswer represents ctor messages.botCallbackAnswer#36585ea4 flags:# flags.1?alert:true flags.3?has_url:true flags.0?message:string flags.2?url:string cache_time:int = messages.BotCallbackAnswer from Telegram
type TLMessagesBotCallbackAnswer struct {
	Flags     uint   // flags:#
	Alert     bool   // flags.1?alert:true
	HasUrl    bool   // flags.3?has_url:true
	Message   string // flags.0?message:string
	Url       string // flags.2?url:string
	CacheTime int    // cache_time:int
}

func (o *TLMessagesBotCallbackAnswer) Cmd() uint32 {
	return TagMessagesBotCallbackAnswer
}

func (o *TLMessagesBotCallbackAnswer) ReadBareFrom(r *tl.Reader) {
	o.Flags = uint(r.ReadUint32())
	o.Alert = true
	o.HasUrl = true
	o.Message = r.ReadString()
	o.Url = r.ReadString()
	o.CacheTime = r.ReadInt()
}

func (o *TLMessagesBotCallbackAnswer) WriteBareTo(w *tl.Writer) {
	w.WriteUint32(uint32(o.Flags))
	w.WriteString(o.Message)
	w.WriteString(o.Url)
	w.WriteInt(o.CacheTime)
}

func (o *TLMessagesBotCallbackAnswer) String() string {
	return tl.Pretty(o)
}

// TLMessagesMessageEditData represents ctor messages.messageEditData#26b5dde6 flags:# flags.0?caption:true = messages.MessageEditData from Telegram
type TLMessagesMessageEditData struct {
	Flags   uint // flags:#
	Caption bool // flags.0?caption:true
}

func (o *TLMessagesMessageEditData) Cmd() uint32 {
	return TagMessagesMessageEditData
}

func (o *TLMessagesMessageEditData) ReadBareFrom(r *tl.Reader) {
	o.Flags = uint(r.ReadUint32())
	o.Caption = true
}

func (o *TLMessagesMessageEditData) WriteBareTo(w *tl.Writer) {
	w.WriteUint32(uint32(o.Flags))
}

func (o *TLMessagesMessageEditData) String() string {
	return tl.Pretty(o)
}

// TLInputBotInlineMessageID represents ctor inputBotInlineMessageID#890c3d89 dc_id:int id:long access_hash:long = InputBotInlineMessageID from Telegram
type TLInputBotInlineMessageID struct {
	DCID       int    // dc_id:int
	ID         uint64 // id:long
	AccessHash uint64 // access_hash:long
}

func (o *TLInputBotInlineMessageID) Cmd() uint32 {
	return TagInputBotInlineMessageID
}

func (o *TLInputBotInlineMessageID) ReadBareFrom(r *tl.Reader) {
	o.DCID = r.ReadInt()
	o.ID = r.ReadUint64()
	o.AccessHash = r.ReadUint64()
}

func (o *TLInputBotInlineMessageID) WriteBareTo(w *tl.Writer) {
	w.WriteInt(o.DCID)
	w.WriteUint64(o.ID)
	w.WriteUint64(o.AccessHash)
}

func (o *TLInputBotInlineMessageID) String() string {
	return tl.Pretty(o)
}

// TLInlineBotSwitchPM represents ctor inlineBotSwitchPM#3c20629f text:string start_param:string = InlineBotSwitchPM from Telegram
type TLInlineBotSwitchPM struct {
	Text       string // text:string
	StartParam string // start_param:string
}

func (o *TLInlineBotSwitchPM) Cmd() uint32 {
	return TagInlineBotSwitchPM
}

func (o *TLInlineBotSwitchPM) ReadBareFrom(r *tl.Reader) {
	o.Text = r.ReadString()
	o.StartParam = r.ReadString()
}

func (o *TLInlineBotSwitchPM) WriteBareTo(w *tl.Writer) {
	w.WriteString(o.Text)
	w.WriteString(o.StartParam)
}

func (o *TLInlineBotSwitchPM) String() string {
	return tl.Pretty(o)
}

// TLMessagesPeerDialogs represents ctor messages.peerDialogs#3371c354 dialogs:Vector<Dialog> messages:Vector<Message> chats:Vector<Chat> users:Vector<User> state:updates.State = messages.PeerDialogs from Telegram
type TLMessagesPeerDialogs struct {
	Dialogs  []*TLDialog     // dialogs:Vector<Dialog>
	Messages []TLMessageType // messages:Vector<Message>
	Chats    []TLChatType    // chats:Vector<Chat>
	Users    []TLUserType    // users:Vector<User>
	State    *TLUpdatesState // state:updates.State
}

func (o *TLMessagesPeerDialogs) Cmd() uint32 {
	return TagMessagesPeerDialogs
}

func (o *TLMessagesPeerDialogs) ReadBareFrom(r *tl.Reader) {
	if cmd := r.ReadCmd(); cmd != TagVector {
		r.Fail(errors.New("expected: vector"))
	}
	o.Dialogs = make([]*TLDialog, r.ReadInt())
	for i := 0; i < len(o.Dialogs); i++ {
		if cmd := r.ReadCmd(); cmd != TagDialog {
			r.Fail(errors.New("expected: dialog"))
		}
		o.Dialogs[i] = new(TLDialog)
		o.Dialogs[i].ReadBareFrom(r)
	}
	if cmd := r.ReadCmd(); cmd != TagVector {
		r.Fail(errors.New("expected: vector"))
	}
	o.Messages = make([]TLMessageType, r.ReadInt())
	for i := 0; i < len(o.Messages); i++ {
		o.Messages[i] = Schema.ReadLimitedBoxedObjectFrom(r, TagMessageEmpty, TagMessage, TagMessageService).(TLMessageType)
	}
	if cmd := r.ReadCmd(); cmd != TagVector {
		r.Fail(errors.New("expected: vector"))
	}
	o.Chats = make([]TLChatType, r.ReadInt())
	for i := 0; i < len(o.Chats); i++ {
		o.Chats[i] = Schema.ReadLimitedBoxedObjectFrom(r, TagChatEmpty, TagChat, TagChatForbidden, TagChannel, TagChannelForbidden).(TLChatType)
	}
	if cmd := r.ReadCmd(); cmd != TagVector {
		r.Fail(errors.New("expected: vector"))
	}
	o.Users = make([]TLUserType, r.ReadInt())
	for i := 0; i < len(o.Users); i++ {
		o.Users[i] = Schema.ReadLimitedBoxedObjectFrom(r, TagUserEmpty, TagUser).(TLUserType)
	}
	if cmd := r.ReadCmd(); cmd != TagUpdatesState {
		r.Fail(errors.New("expected: updates.state"))
	}
	o.State = new(TLUpdatesState)
	o.State.ReadBareFrom(r)
}

func (o *TLMessagesPeerDialogs) WriteBareTo(w *tl.Writer) {
	w.WriteCmd(TagVector)
	w.WriteInt(len(o.Dialogs))
	for i := 0; i < len(o.Dialogs); i++ {
		w.WriteCmd(TagDialog)
		o.Dialogs[i].WriteBareTo(w)
	}
	w.WriteCmd(TagVector)
	w.WriteInt(len(o.Messages))
	for i := 0; i < len(o.Messages); i++ {
		w.WriteCmd(o.Messages[i].Cmd())
		o.Messages[i].WriteBareTo(w)
	}
	w.WriteCmd(TagVector)
	w.WriteInt(len(o.Chats))
	for i := 0; i < len(o.Chats); i++ {
		w.WriteCmd(o.Chats[i].Cmd())
		o.Chats[i].WriteBareTo(w)
	}
	w.WriteCmd(TagVector)
	w.WriteInt(len(o.Users))
	for i := 0; i < len(o.Users); i++ {
		w.WriteCmd(o.Users[i].Cmd())
		o.Users[i].WriteBareTo(w)
	}
	w.WriteCmd(TagUpdatesState)
	o.State.WriteBareTo(w)
}

func (o *TLMessagesPeerDialogs) String() string {
	return tl.Pretty(o)
}

// TLTopPeer represents ctor topPeer#edcdc05b peer:Peer rating:double = TopPeer from Telegram
type TLTopPeer struct {
	Peer   TLPeerType // peer:Peer
	Rating float64    // rating:double
}

func (o *TLTopPeer) Cmd() uint32 {
	return TagTopPeer
}

func (o *TLTopPeer) ReadBareFrom(r *tl.Reader) {
	o.Peer = Schema.ReadLimitedBoxedObjectFrom(r, TagPeerUser, TagPeerChat, TagPeerChannel).(TLPeerType)
	o.Rating = r.ReadFloat64()
}

func (o *TLTopPeer) WriteBareTo(w *tl.Writer) {
	w.WriteCmd(o.Peer.Cmd())
	o.Peer.WriteBareTo(w)
	w.WriteFloat64(o.Rating)
}

func (o *TLTopPeer) String() string {
	return tl.Pretty(o)
}

// TLTopPeerCategoryType represents TopPeerCategory from Telegram
type TLTopPeerCategoryType interface {
	IsTLTopPeerCategory()
	Cmd() uint32
	ReadBareFrom(r *tl.Reader)
	WriteBareTo(w *tl.Writer)
}

// TLTopPeerCategoryPeers represents ctor topPeerCategoryPeers#fb834291 category:TopPeerCategory count:int peers:Vector<TopPeer> = TopPeerCategoryPeers from Telegram
type TLTopPeerCategoryPeers struct {
	Category TLTopPeerCategoryType // category:TopPeerCategory
	Count    int                   // count:int
	Peers    []*TLTopPeer          // peers:Vector<TopPeer>
}

func (o *TLTopPeerCategoryPeers) Cmd() uint32 {
	return TagTopPeerCategoryPeers
}

func (o *TLTopPeerCategoryPeers) ReadBareFrom(r *tl.Reader) {
	o.Category = Schema.ReadLimitedBoxedObjectFrom(r, TagTopPeerCategoryBotsPM, TagTopPeerCategoryBotsInline, TagTopPeerCategoryCorrespondents, TagTopPeerCategoryGroups, TagTopPeerCategoryChannels).(TLTopPeerCategoryType)
	o.Count = r.ReadInt()
	if cmd := r.ReadCmd(); cmd != TagVector {
		r.Fail(errors.New("expected: vector"))
	}
	o.Peers = make([]*TLTopPeer, r.ReadInt())
	for i := 0; i < len(o.Peers); i++ {
		if cmd := r.ReadCmd(); cmd != TagTopPeer {
			r.Fail(errors.New("expected: topPeer"))
		}
		o.Peers[i] = new(TLTopPeer)
		o.Peers[i].ReadBareFrom(r)
	}
}

func (o *TLTopPeerCategoryPeers) WriteBareTo(w *tl.Writer) {
	w.WriteCmd(o.Category.Cmd())
	o.Category.WriteBareTo(w)
	w.WriteInt(o.Count)
	w.WriteCmd(TagVector)
	w.WriteInt(len(o.Peers))
	for i := 0; i < len(o.Peers); i++ {
		w.WriteCmd(TagTopPeer)
		o.Peers[i].WriteBareTo(w)
	}
}

func (o *TLTopPeerCategoryPeers) String() string {
	return tl.Pretty(o)
}

// TLContactsTopPeersType represents contacts.TopPeers from Telegram
type TLContactsTopPeersType interface {
	IsTLContactsTopPeers()
	Cmd() uint32
	ReadBareFrom(r *tl.Reader)
	WriteBareTo(w *tl.Writer)
}

// TLDraftMessageType represents DraftMessage from Telegram
type TLDraftMessageType interface {
	IsTLDraftMessage()
	Cmd() uint32
	ReadBareFrom(r *tl.Reader)
	WriteBareTo(w *tl.Writer)
}

// TLMessagesFeaturedStickersType represents messages.FeaturedStickers from Telegram
type TLMessagesFeaturedStickersType interface {
	IsTLMessagesFeaturedStickers()
	Cmd() uint32
	ReadBareFrom(r *tl.Reader)
	WriteBareTo(w *tl.Writer)
}

// TLMessagesRecentStickersType represents messages.RecentStickers from Telegram
type TLMessagesRecentStickersType interface {
	IsTLMessagesRecentStickers()
	Cmd() uint32
	ReadBareFrom(r *tl.Reader)
	WriteBareTo(w *tl.Writer)
}

// TLMessagesArchivedStickers represents ctor messages.archivedStickers#4fcba9c8 count:int sets:Vector<StickerSetCovered> = messages.ArchivedStickers from Telegram
type TLMessagesArchivedStickers struct {
	Count int                       // count:int
	Sets  []TLStickerSetCoveredType // sets:Vector<StickerSetCovered>
}

func (o *TLMessagesArchivedStickers) Cmd() uint32 {
	return TagMessagesArchivedStickers
}

func (o *TLMessagesArchivedStickers) ReadBareFrom(r *tl.Reader) {
	o.Count = r.ReadInt()
	if cmd := r.ReadCmd(); cmd != TagVector {
		r.Fail(errors.New("expected: vector"))
	}
	o.Sets = make([]TLStickerSetCoveredType, r.ReadInt())
	for i := 0; i < len(o.Sets); i++ {
		o.Sets[i] = Schema.ReadLimitedBoxedObjectFrom(r, TagStickerSetCovered, TagStickerSetMultiCovered).(TLStickerSetCoveredType)
	}
}

func (o *TLMessagesArchivedStickers) WriteBareTo(w *tl.Writer) {
	w.WriteInt(o.Count)
	w.WriteCmd(TagVector)
	w.WriteInt(len(o.Sets))
	for i := 0; i < len(o.Sets); i++ {
		w.WriteCmd(o.Sets[i].Cmd())
		o.Sets[i].WriteBareTo(w)
	}
}

func (o *TLMessagesArchivedStickers) String() string {
	return tl.Pretty(o)
}

// TLMessagesStickerSetInstallResultType represents messages.StickerSetInstallResult from Telegram
type TLMessagesStickerSetInstallResultType interface {
	IsTLMessagesStickerSetInstallResult()
	Cmd() uint32
	ReadBareFrom(r *tl.Reader)
	WriteBareTo(w *tl.Writer)
}

// TLStickerSetCoveredType represents StickerSetCovered from Telegram
type TLStickerSetCoveredType interface {
	IsTLStickerSetCovered()
	Cmd() uint32
	ReadBareFrom(r *tl.Reader)
	WriteBareTo(w *tl.Writer)
}

// TLMaskCoords represents ctor maskCoords#aed6dbb2 n:int x:double y:double zoom:double = MaskCoords from Telegram
type TLMaskCoords struct {
	N    int     // n:int
	X    float64 // x:double
	Y    float64 // y:double
	Zoom float64 // zoom:double
}

func (o *TLMaskCoords) Cmd() uint32 {
	return TagMaskCoords
}

func (o *TLMaskCoords) ReadBareFrom(r *tl.Reader) {
	o.N = r.ReadInt()
	o.X = r.ReadFloat64()
	o.Y = r.ReadFloat64()
	o.Zoom = r.ReadFloat64()
}

func (o *TLMaskCoords) WriteBareTo(w *tl.Writer) {
	w.WriteInt(o.N)
	w.WriteFloat64(o.X)
	w.WriteFloat64(o.Y)
	w.WriteFloat64(o.Zoom)
}

func (o *TLMaskCoords) String() string {
	return tl.Pretty(o)
}

// TLInputStickeredMediaType represents InputStickeredMedia from Telegram
type TLInputStickeredMediaType interface {
	IsTLInputStickeredMedia()
	Cmd() uint32
	ReadBareFrom(r *tl.Reader)
	WriteBareTo(w *tl.Writer)
}

// TLGame represents ctor game#bdf9653b flags:# id:long access_hash:long short_name:string title:string description:string photo:Photo flags.0?document:Document = Game from Telegram
type TLGame struct {
	Flags       uint           // flags:#
	ID          uint64         // id:long
	AccessHash  uint64         // access_hash:long
	ShortName   string         // short_name:string
	Title       string         // title:string
	Description string         // description:string
	Photo       TLPhotoType    // photo:Photo
	Document    TLDocumentType // flags.0?document:Document
}

func (o *TLGame) Cmd() uint32 {
	return TagGame
}

func (o *TLGame) ReadBareFrom(r *tl.Reader) {
	o.Flags = uint(r.ReadUint32())
	o.ID = r.ReadUint64()
	o.AccessHash = r.ReadUint64()
	o.ShortName = r.ReadString()
	o.Title = r.ReadString()
	o.Description = r.ReadString()
	o.Photo = Schema.ReadLimitedBoxedObjectFrom(r, TagPhotoEmpty, TagPhoto).(TLPhotoType)
	o.Document = Schema.ReadLimitedBoxedObjectFrom(r, TagDocumentEmpty, TagDocument).(TLDocumentType)
}

func (o *TLGame) WriteBareTo(w *tl.Writer) {
	w.WriteUint32(uint32(o.Flags))
	w.WriteUint64(o.ID)
	w.WriteUint64(o.AccessHash)
	w.WriteString(o.ShortName)
	w.WriteString(o.Title)
	w.WriteString(o.Description)
	w.WriteCmd(o.Photo.Cmd())
	o.Photo.WriteBareTo(w)
	w.WriteCmd(o.Document.Cmd())
	o.Document.WriteBareTo(w)
}

func (o *TLGame) String() string {
	return tl.Pretty(o)
}

// TLInputGameType represents InputGame from Telegram
type TLInputGameType interface {
	IsTLInputGame()
	Cmd() uint32
	ReadBareFrom(r *tl.Reader)
	WriteBareTo(w *tl.Writer)
}

// TLHighScore represents ctor highScore#58fffcd0 pos:int user_id:int score:int = HighScore from Telegram
type TLHighScore struct {
	Pos    int // pos:int
	UserID int // user_id:int
	Score  int // score:int
}

func (o *TLHighScore) Cmd() uint32 {
	return TagHighScore
}

func (o *TLHighScore) ReadBareFrom(r *tl.Reader) {
	o.Pos = r.ReadInt()
	o.UserID = r.ReadInt()
	o.Score = r.ReadInt()
}

func (o *TLHighScore) WriteBareTo(w *tl.Writer) {
	w.WriteInt(o.Pos)
	w.WriteInt(o.UserID)
	w.WriteInt(o.Score)
}

func (o *TLHighScore) String() string {
	return tl.Pretty(o)
}

// TLMessagesHighScores represents ctor messages.highScores#9a3bfd99 scores:Vector<HighScore> users:Vector<User> = messages.HighScores from Telegram
type TLMessagesHighScores struct {
	Scores []*TLHighScore // scores:Vector<HighScore>
	Users  []TLUserType   // users:Vector<User>
}

func (o *TLMessagesHighScores) Cmd() uint32 {
	return TagMessagesHighScores
}

func (o *TLMessagesHighScores) ReadBareFrom(r *tl.Reader) {
	if cmd := r.ReadCmd(); cmd != TagVector {
		r.Fail(errors.New("expected: vector"))
	}
	o.Scores = make([]*TLHighScore, r.ReadInt())
	for i := 0; i < len(o.Scores); i++ {
		if cmd := r.ReadCmd(); cmd != TagHighScore {
			r.Fail(errors.New("expected: highScore"))
		}
		o.Scores[i] = new(TLHighScore)
		o.Scores[i].ReadBareFrom(r)
	}
	if cmd := r.ReadCmd(); cmd != TagVector {
		r.Fail(errors.New("expected: vector"))
	}
	o.Users = make([]TLUserType, r.ReadInt())
	for i := 0; i < len(o.Users); i++ {
		o.Users[i] = Schema.ReadLimitedBoxedObjectFrom(r, TagUserEmpty, TagUser).(TLUserType)
	}
}

func (o *TLMessagesHighScores) WriteBareTo(w *tl.Writer) {
	w.WriteCmd(TagVector)
	w.WriteInt(len(o.Scores))
	for i := 0; i < len(o.Scores); i++ {
		w.WriteCmd(TagHighScore)
		o.Scores[i].WriteBareTo(w)
	}
	w.WriteCmd(TagVector)
	w.WriteInt(len(o.Users))
	for i := 0; i < len(o.Users); i++ {
		w.WriteCmd(o.Users[i].Cmd())
		o.Users[i].WriteBareTo(w)
	}
}

func (o *TLMessagesHighScores) String() string {
	return tl.Pretty(o)
}

// TLRichTextType represents RichText from Telegram
type TLRichTextType interface {
	IsTLRichText()
	Cmd() uint32
	ReadBareFrom(r *tl.Reader)
	WriteBareTo(w *tl.Writer)
}

// TLPageBlockType represents PageBlock from Telegram
type TLPageBlockType interface {
	IsTLPageBlock()
	Cmd() uint32
	ReadBareFrom(r *tl.Reader)
	WriteBareTo(w *tl.Writer)
}

// TLPageType represents Page from Telegram
type TLPageType interface {
	IsTLPage()
	Cmd() uint32
	ReadBareFrom(r *tl.Reader)
	WriteBareTo(w *tl.Writer)
}

// TLPhoneCallDiscardReasonType represents PhoneCallDiscardReason from Telegram
type TLPhoneCallDiscardReasonType interface {
	IsTLPhoneCallDiscardReason()
	Cmd() uint32
	ReadBareFrom(r *tl.Reader)
	WriteBareTo(w *tl.Writer)
}

// TLDataJSON represents ctor dataJSON#7d748d04 data:string = DataJSON from Telegram
type TLDataJSON struct {
	Data string // data:string
}

func (o *TLDataJSON) Cmd() uint32 {
	return TagDataJSON
}

func (o *TLDataJSON) ReadBareFrom(r *tl.Reader) {
	o.Data = r.ReadString()
}

func (o *TLDataJSON) WriteBareTo(w *tl.Writer) {
	w.WriteString(o.Data)
}

func (o *TLDataJSON) String() string {
	return tl.Pretty(o)
}

// TLLabeledPrice represents ctor labeledPrice#cb296bf8 label:string amount:long = LabeledPrice from Telegram
type TLLabeledPrice struct {
	Label  string // label:string
	Amount uint64 // amount:long
}

func (o *TLLabeledPrice) Cmd() uint32 {
	return TagLabeledPrice
}

func (o *TLLabeledPrice) ReadBareFrom(r *tl.Reader) {
	o.Label = r.ReadString()
	o.Amount = r.ReadUint64()
}

func (o *TLLabeledPrice) WriteBareTo(w *tl.Writer) {
	w.WriteString(o.Label)
	w.WriteUint64(o.Amount)
}

func (o *TLLabeledPrice) String() string {
	return tl.Pretty(o)
}

// TLInvoice represents ctor invoice#c30aa358 flags:# flags.0?test:true flags.1?name_requested:true flags.2?phone_requested:true flags.3?email_requested:true flags.4?shipping_address_requested:true flags.5?flexible:true currency:string prices:Vector<LabeledPrice> = Invoice from Telegram
type TLInvoice struct {
	Flags                    uint              // flags:#
	Test                     bool              // flags.0?test:true
	NameRequested            bool              // flags.1?name_requested:true
	PhoneRequested           bool              // flags.2?phone_requested:true
	EmailRequested           bool              // flags.3?email_requested:true
	ShippingAddressRequested bool              // flags.4?shipping_address_requested:true
	Flexible                 bool              // flags.5?flexible:true
	Currency                 string            // currency:string
	Prices                   []*TLLabeledPrice // prices:Vector<LabeledPrice>
}

func (o *TLInvoice) Cmd() uint32 {
	return TagInvoice
}

func (o *TLInvoice) ReadBareFrom(r *tl.Reader) {
	o.Flags = uint(r.ReadUint32())
	o.Test = true
	o.NameRequested = true
	o.PhoneRequested = true
	o.EmailRequested = true
	o.ShippingAddressRequested = true
	o.Flexible = true
	o.Currency = r.ReadString()
	if cmd := r.ReadCmd(); cmd != TagVector {
		r.Fail(errors.New("expected: vector"))
	}
	o.Prices = make([]*TLLabeledPrice, r.ReadInt())
	for i := 0; i < len(o.Prices); i++ {
		if cmd := r.ReadCmd(); cmd != TagLabeledPrice {
			r.Fail(errors.New("expected: labeledPrice"))
		}
		o.Prices[i] = new(TLLabeledPrice)
		o.Prices[i].ReadBareFrom(r)
	}
}

func (o *TLInvoice) WriteBareTo(w *tl.Writer) {
	w.WriteUint32(uint32(o.Flags))
	w.WriteString(o.Currency)
	w.WriteCmd(TagVector)
	w.WriteInt(len(o.Prices))
	for i := 0; i < len(o.Prices); i++ {
		w.WriteCmd(TagLabeledPrice)
		o.Prices[i].WriteBareTo(w)
	}
}

func (o *TLInvoice) String() string {
	return tl.Pretty(o)
}

// TLPaymentCharge represents ctor paymentCharge#ea02c27e id:string provider_charge_id:string = PaymentCharge from Telegram
type TLPaymentCharge struct {
	ID               string // id:string
	ProviderChargeID string // provider_charge_id:string
}

func (o *TLPaymentCharge) Cmd() uint32 {
	return TagPaymentCharge
}

func (o *TLPaymentCharge) ReadBareFrom(r *tl.Reader) {
	o.ID = r.ReadString()
	o.ProviderChargeID = r.ReadString()
}

func (o *TLPaymentCharge) WriteBareTo(w *tl.Writer) {
	w.WriteString(o.ID)
	w.WriteString(o.ProviderChargeID)
}

func (o *TLPaymentCharge) String() string {
	return tl.Pretty(o)
}

// TLPostAddress represents ctor postAddress#1e8caaeb street_line1:string street_line2:string city:string state:string country_iso2:string post_code:string = PostAddress from Telegram
type TLPostAddress struct {
	StreetLine1 string // street_line1:string
	StreetLine2 string // street_line2:string
	City        string // city:string
	State       string // state:string
	CountryIso2 string // country_iso2:string
	PostCode    string // post_code:string
}

func (o *TLPostAddress) Cmd() uint32 {
	return TagPostAddress
}

func (o *TLPostAddress) ReadBareFrom(r *tl.Reader) {
	o.StreetLine1 = r.ReadString()
	o.StreetLine2 = r.ReadString()
	o.City = r.ReadString()
	o.State = r.ReadString()
	o.CountryIso2 = r.ReadString()
	o.PostCode = r.ReadString()
}

func (o *TLPostAddress) WriteBareTo(w *tl.Writer) {
	w.WriteString(o.StreetLine1)
	w.WriteString(o.StreetLine2)
	w.WriteString(o.City)
	w.WriteString(o.State)
	w.WriteString(o.CountryIso2)
	w.WriteString(o.PostCode)
}

func (o *TLPostAddress) String() string {
	return tl.Pretty(o)
}

// TLPaymentRequestedInfo represents ctor paymentRequestedInfo#909c3f94 flags:# flags.0?name:string flags.1?phone:string flags.2?email:string flags.3?shipping_address:PostAddress = PaymentRequestedInfo from Telegram
type TLPaymentRequestedInfo struct {
	Flags           uint           // flags:#
	Name            string         // flags.0?name:string
	Phone           string         // flags.1?phone:string
	Email           string         // flags.2?email:string
	ShippingAddress *TLPostAddress // flags.3?shipping_address:PostAddress
}

func (o *TLPaymentRequestedInfo) Cmd() uint32 {
	return TagPaymentRequestedInfo
}

func (o *TLPaymentRequestedInfo) ReadBareFrom(r *tl.Reader) {
	o.Flags = uint(r.ReadUint32())
	o.Name = r.ReadString()
	o.Phone = r.ReadString()
	o.Email = r.ReadString()
	if cmd := r.ReadCmd(); cmd != TagPostAddress {
		r.Fail(errors.New("expected: postAddress"))
	}
	o.ShippingAddress = new(TLPostAddress)
	o.ShippingAddress.ReadBareFrom(r)
}

func (o *TLPaymentRequestedInfo) WriteBareTo(w *tl.Writer) {
	w.WriteUint32(uint32(o.Flags))
	w.WriteString(o.Name)
	w.WriteString(o.Phone)
	w.WriteString(o.Email)
	w.WriteCmd(TagPostAddress)
	o.ShippingAddress.WriteBareTo(w)
}

func (o *TLPaymentRequestedInfo) String() string {
	return tl.Pretty(o)
}

// TLPaymentSavedCredentialsCard represents ctor paymentSavedCredentialsCard#cdc27a1f id:string title:string = PaymentSavedCredentials from Telegram
type TLPaymentSavedCredentialsCard struct {
	ID    string // id:string
	Title string // title:string
}

func (o *TLPaymentSavedCredentialsCard) Cmd() uint32 {
	return TagPaymentSavedCredentialsCard
}

func (o *TLPaymentSavedCredentialsCard) ReadBareFrom(r *tl.Reader) {
	o.ID = r.ReadString()
	o.Title = r.ReadString()
}

func (o *TLPaymentSavedCredentialsCard) WriteBareTo(w *tl.Writer) {
	w.WriteString(o.ID)
	w.WriteString(o.Title)
}

func (o *TLPaymentSavedCredentialsCard) String() string {
	return tl.Pretty(o)
}

// TLWebDocument represents ctor webDocument#c61acbd8 url:string access_hash:long size:int mime_type:string attributes:Vector<DocumentAttribute> dc_id:int = WebDocument from Telegram
type TLWebDocument struct {
	Url        string                    // url:string
	AccessHash uint64                    // access_hash:long
	Size       int                       // size:int
	MimeType   string                    // mime_type:string
	Attributes []TLDocumentAttributeType // attributes:Vector<DocumentAttribute>
	DCID       int                       // dc_id:int
}

func (o *TLWebDocument) Cmd() uint32 {
	return TagWebDocument
}

func (o *TLWebDocument) ReadBareFrom(r *tl.Reader) {
	o.Url = r.ReadString()
	o.AccessHash = r.ReadUint64()
	o.Size = r.ReadInt()
	o.MimeType = r.ReadString()
	if cmd := r.ReadCmd(); cmd != TagVector {
		r.Fail(errors.New("expected: vector"))
	}
	o.Attributes = make([]TLDocumentAttributeType, r.ReadInt())
	for i := 0; i < len(o.Attributes); i++ {
		o.Attributes[i] = Schema.ReadLimitedBoxedObjectFrom(r, TagDocumentAttributeImageSize, TagDocumentAttributeAnimated, TagDocumentAttributeSticker, TagDocumentAttributeVideo, TagDocumentAttributeAudio, TagDocumentAttributeFilename, TagDocumentAttributeHasStickers).(TLDocumentAttributeType)
	}
	o.DCID = r.ReadInt()
}

func (o *TLWebDocument) WriteBareTo(w *tl.Writer) {
	w.WriteString(o.Url)
	w.WriteUint64(o.AccessHash)
	w.WriteInt(o.Size)
	w.WriteString(o.MimeType)
	w.WriteCmd(TagVector)
	w.WriteInt(len(o.Attributes))
	for i := 0; i < len(o.Attributes); i++ {
		w.WriteCmd(o.Attributes[i].Cmd())
		o.Attributes[i].WriteBareTo(w)
	}
	w.WriteInt(o.DCID)
}

func (o *TLWebDocument) String() string {
	return tl.Pretty(o)
}

// TLInputWebDocument represents ctor inputWebDocument#9bed434d url:string size:int mime_type:string attributes:Vector<DocumentAttribute> = InputWebDocument from Telegram
type TLInputWebDocument struct {
	Url        string                    // url:string
	Size       int                       // size:int
	MimeType   string                    // mime_type:string
	Attributes []TLDocumentAttributeType // attributes:Vector<DocumentAttribute>
}

func (o *TLInputWebDocument) Cmd() uint32 {
	return TagInputWebDocument
}

func (o *TLInputWebDocument) ReadBareFrom(r *tl.Reader) {
	o.Url = r.ReadString()
	o.Size = r.ReadInt()
	o.MimeType = r.ReadString()
	if cmd := r.ReadCmd(); cmd != TagVector {
		r.Fail(errors.New("expected: vector"))
	}
	o.Attributes = make([]TLDocumentAttributeType, r.ReadInt())
	for i := 0; i < len(o.Attributes); i++ {
		o.Attributes[i] = Schema.ReadLimitedBoxedObjectFrom(r, TagDocumentAttributeImageSize, TagDocumentAttributeAnimated, TagDocumentAttributeSticker, TagDocumentAttributeVideo, TagDocumentAttributeAudio, TagDocumentAttributeFilename, TagDocumentAttributeHasStickers).(TLDocumentAttributeType)
	}
}

func (o *TLInputWebDocument) WriteBareTo(w *tl.Writer) {
	w.WriteString(o.Url)
	w.WriteInt(o.Size)
	w.WriteString(o.MimeType)
	w.WriteCmd(TagVector)
	w.WriteInt(len(o.Attributes))
	for i := 0; i < len(o.Attributes); i++ {
		w.WriteCmd(o.Attributes[i].Cmd())
		o.Attributes[i].WriteBareTo(w)
	}
}

func (o *TLInputWebDocument) String() string {
	return tl.Pretty(o)
}

// TLInputWebFileLocation represents ctor inputWebFileLocation#c239d686 url:string access_hash:long = InputWebFileLocation from Telegram
type TLInputWebFileLocation struct {
	Url        string // url:string
	AccessHash uint64 // access_hash:long
}

func (o *TLInputWebFileLocation) Cmd() uint32 {
	return TagInputWebFileLocation
}

func (o *TLInputWebFileLocation) ReadBareFrom(r *tl.Reader) {
	o.Url = r.ReadString()
	o.AccessHash = r.ReadUint64()
}

func (o *TLInputWebFileLocation) WriteBareTo(w *tl.Writer) {
	w.WriteString(o.Url)
	w.WriteUint64(o.AccessHash)
}

func (o *TLInputWebFileLocation) String() string {
	return tl.Pretty(o)
}

// TLUploadWebFile represents ctor upload.webFile#21e753bc size:int mime_type:string file_type:storage.FileType mtime:int bytes:bytes = upload.WebFile from Telegram
type TLUploadWebFile struct {
	Size     int                   // size:int
	MimeType string                // mime_type:string
	FileType TLStorageFileTypeType // file_type:storage.FileType
	Mtime    int                   // mtime:int
	Bytes    []byte                // bytes:bytes
}

func (o *TLUploadWebFile) Cmd() uint32 {
	return TagUploadWebFile
}

func (o *TLUploadWebFile) ReadBareFrom(r *tl.Reader) {
	o.Size = r.ReadInt()
	o.MimeType = r.ReadString()
	o.FileType = Schema.ReadLimitedBoxedObjectFrom(r, TagStorageFileUnknown, TagStorageFilePartial, TagStorageFileJpeg, TagStorageFileGif, TagStorageFilePng, TagStorageFilePdf, TagStorageFileMp3, TagStorageFileMov, TagStorageFileMp4, TagStorageFileWebp).(TLStorageFileTypeType)
	o.Mtime = r.ReadInt()
	o.Bytes = r.ReadBlob()
}

func (o *TLUploadWebFile) WriteBareTo(w *tl.Writer) {
	w.WriteInt(o.Size)
	w.WriteString(o.MimeType)
	w.WriteCmd(o.FileType.Cmd())
	o.FileType.WriteBareTo(w)
	w.WriteInt(o.Mtime)
	w.WriteBlob(o.Bytes)
}

func (o *TLUploadWebFile) String() string {
	return tl.Pretty(o)
}

// TLPaymentsPaymentForm represents ctor payments.paymentForm#3f56aea3 flags:# flags.2?can_save_credentials:true flags.3?password_missing:true bot_id:int invoice:Invoice provider_id:int url:string flags.4?native_provider:string flags.4?native_params:DataJSON flags.0?saved_info:PaymentRequestedInfo flags.1?saved_credentials:PaymentSavedCredentials users:Vector<User> = payments.PaymentForm from Telegram
type TLPaymentsPaymentForm struct {
	Flags              uint                           // flags:#
	CanSaveCredentials bool                           // flags.2?can_save_credentials:true
	PasswordMissing    bool                           // flags.3?password_missing:true
	BotID              int                            // bot_id:int
	Invoice            *TLInvoice                     // invoice:Invoice
	ProviderID         int                            // provider_id:int
	Url                string                         // url:string
	NativeProvider     string                         // flags.4?native_provider:string
	NativeParams       *TLDataJSON                    // flags.4?native_params:DataJSON
	SavedInfo          *TLPaymentRequestedInfo        // flags.0?saved_info:PaymentRequestedInfo
	SavedCredentials   *TLPaymentSavedCredentialsCard // flags.1?saved_credentials:PaymentSavedCredentials
	Users              []TLUserType                   // users:Vector<User>
}

func (o *TLPaymentsPaymentForm) Cmd() uint32 {
	return TagPaymentsPaymentForm
}

func (o *TLPaymentsPaymentForm) ReadBareFrom(r *tl.Reader) {
	o.Flags = uint(r.ReadUint32())
	o.CanSaveCredentials = true
	o.PasswordMissing = true
	o.BotID = r.ReadInt()
	if cmd := r.ReadCmd(); cmd != TagInvoice {
		r.Fail(errors.New("expected: invoice"))
	}
	o.Invoice = new(TLInvoice)
	o.Invoice.ReadBareFrom(r)
	o.ProviderID = r.ReadInt()
	o.Url = r.ReadString()
	o.NativeProvider = r.ReadString()
	if cmd := r.ReadCmd(); cmd != TagDataJSON {
		r.Fail(errors.New("expected: dataJSON"))
	}
	o.NativeParams = new(TLDataJSON)
	o.NativeParams.ReadBareFrom(r)
	if cmd := r.ReadCmd(); cmd != TagPaymentRequestedInfo {
		r.Fail(errors.New("expected: paymentRequestedInfo"))
	}
	o.SavedInfo = new(TLPaymentRequestedInfo)
	o.SavedInfo.ReadBareFrom(r)
	if cmd := r.ReadCmd(); cmd != TagPaymentSavedCredentialsCard {
		r.Fail(errors.New("expected: paymentSavedCredentialsCard"))
	}
	o.SavedCredentials = new(TLPaymentSavedCredentialsCard)
	o.SavedCredentials.ReadBareFrom(r)
	if cmd := r.ReadCmd(); cmd != TagVector {
		r.Fail(errors.New("expected: vector"))
	}
	o.Users = make([]TLUserType, r.ReadInt())
	for i := 0; i < len(o.Users); i++ {
		o.Users[i] = Schema.ReadLimitedBoxedObjectFrom(r, TagUserEmpty, TagUser).(TLUserType)
	}
}

func (o *TLPaymentsPaymentForm) WriteBareTo(w *tl.Writer) {
	w.WriteUint32(uint32(o.Flags))
	w.WriteInt(o.BotID)
	w.WriteCmd(TagInvoice)
	o.Invoice.WriteBareTo(w)
	w.WriteInt(o.ProviderID)
	w.WriteString(o.Url)
	w.WriteString(o.NativeProvider)
	w.WriteCmd(TagDataJSON)
	o.NativeParams.WriteBareTo(w)
	w.WriteCmd(TagPaymentRequestedInfo)
	o.SavedInfo.WriteBareTo(w)
	w.WriteCmd(TagPaymentSavedCredentialsCard)
	o.SavedCredentials.WriteBareTo(w)
	w.WriteCmd(TagVector)
	w.WriteInt(len(o.Users))
	for i := 0; i < len(o.Users); i++ {
		w.WriteCmd(o.Users[i].Cmd())
		o.Users[i].WriteBareTo(w)
	}
}

func (o *TLPaymentsPaymentForm) String() string {
	return tl.Pretty(o)
}

// TLPaymentsValidatedRequestedInfo represents ctor payments.validatedRequestedInfo#d1451883 flags:# flags.0?id:string flags.1?shipping_options:Vector<ShippingOption> = payments.ValidatedRequestedInfo from Telegram
type TLPaymentsValidatedRequestedInfo struct {
	Flags           uint                // flags:#
	ID              string              // flags.0?id:string
	ShippingOptions []*TLShippingOption // flags.1?shipping_options:Vector<ShippingOption>
}

func (o *TLPaymentsValidatedRequestedInfo) Cmd() uint32 {
	return TagPaymentsValidatedRequestedInfo
}

func (o *TLPaymentsValidatedRequestedInfo) ReadBareFrom(r *tl.Reader) {
	o.Flags = uint(r.ReadUint32())
	o.ID = r.ReadString()
	if cmd := r.ReadCmd(); cmd != TagVector {
		r.Fail(errors.New("expected: vector"))
	}
	o.ShippingOptions = make([]*TLShippingOption, r.ReadInt())
	for i := 0; i < len(o.ShippingOptions); i++ {
		if cmd := r.ReadCmd(); cmd != TagShippingOption {
			r.Fail(errors.New("expected: shippingOption"))
		}
		o.ShippingOptions[i] = new(TLShippingOption)
		o.ShippingOptions[i].ReadBareFrom(r)
	}
}

func (o *TLPaymentsValidatedRequestedInfo) WriteBareTo(w *tl.Writer) {
	w.WriteUint32(uint32(o.Flags))
	w.WriteString(o.ID)
	w.WriteCmd(TagVector)
	w.WriteInt(len(o.ShippingOptions))
	for i := 0; i < len(o.ShippingOptions); i++ {
		w.WriteCmd(TagShippingOption)
		o.ShippingOptions[i].WriteBareTo(w)
	}
}

func (o *TLPaymentsValidatedRequestedInfo) String() string {
	return tl.Pretty(o)
}

// TLPaymentsPaymentResultType represents payments.PaymentResult from Telegram
type TLPaymentsPaymentResultType interface {
	IsTLPaymentsPaymentResult()
	Cmd() uint32
	ReadBareFrom(r *tl.Reader)
	WriteBareTo(w *tl.Writer)
}

// TLPaymentsPaymentReceipt represents ctor payments.paymentReceipt#500911e1 flags:# date:int bot_id:int invoice:Invoice provider_id:int flags.0?info:PaymentRequestedInfo flags.1?shipping:ShippingOption currency:string total_amount:long credentials_title:string users:Vector<User> = payments.PaymentReceipt from Telegram
type TLPaymentsPaymentReceipt struct {
	Flags            uint                    // flags:#
	Date             int                     // date:int
	BotID            int                     // bot_id:int
	Invoice          *TLInvoice              // invoice:Invoice
	ProviderID       int                     // provider_id:int
	Info             *TLPaymentRequestedInfo // flags.0?info:PaymentRequestedInfo
	Shipping         *TLShippingOption       // flags.1?shipping:ShippingOption
	Currency         string                  // currency:string
	TotalAmount      uint64                  // total_amount:long
	CredentialsTitle string                  // credentials_title:string
	Users            []TLUserType            // users:Vector<User>
}

func (o *TLPaymentsPaymentReceipt) Cmd() uint32 {
	return TagPaymentsPaymentReceipt
}

func (o *TLPaymentsPaymentReceipt) ReadBareFrom(r *tl.Reader) {
	o.Flags = uint(r.ReadUint32())
	o.Date = r.ReadInt()
	o.BotID = r.ReadInt()
	if cmd := r.ReadCmd(); cmd != TagInvoice {
		r.Fail(errors.New("expected: invoice"))
	}
	o.Invoice = new(TLInvoice)
	o.Invoice.ReadBareFrom(r)
	o.ProviderID = r.ReadInt()
	if cmd := r.ReadCmd(); cmd != TagPaymentRequestedInfo {
		r.Fail(errors.New("expected: paymentRequestedInfo"))
	}
	o.Info = new(TLPaymentRequestedInfo)
	o.Info.ReadBareFrom(r)
	if cmd := r.ReadCmd(); cmd != TagShippingOption {
		r.Fail(errors.New("expected: shippingOption"))
	}
	o.Shipping = new(TLShippingOption)
	o.Shipping.ReadBareFrom(r)
	o.Currency = r.ReadString()
	o.TotalAmount = r.ReadUint64()
	o.CredentialsTitle = r.ReadString()
	if cmd := r.ReadCmd(); cmd != TagVector {
		r.Fail(errors.New("expected: vector"))
	}
	o.Users = make([]TLUserType, r.ReadInt())
	for i := 0; i < len(o.Users); i++ {
		o.Users[i] = Schema.ReadLimitedBoxedObjectFrom(r, TagUserEmpty, TagUser).(TLUserType)
	}
}

func (o *TLPaymentsPaymentReceipt) WriteBareTo(w *tl.Writer) {
	w.WriteUint32(uint32(o.Flags))
	w.WriteInt(o.Date)
	w.WriteInt(o.BotID)
	w.WriteCmd(TagInvoice)
	o.Invoice.WriteBareTo(w)
	w.WriteInt(o.ProviderID)
	w.WriteCmd(TagPaymentRequestedInfo)
	o.Info.WriteBareTo(w)
	w.WriteCmd(TagShippingOption)
	o.Shipping.WriteBareTo(w)
	w.WriteString(o.Currency)
	w.WriteUint64(o.TotalAmount)
	w.WriteString(o.CredentialsTitle)
	w.WriteCmd(TagVector)
	w.WriteInt(len(o.Users))
	for i := 0; i < len(o.Users); i++ {
		w.WriteCmd(o.Users[i].Cmd())
		o.Users[i].WriteBareTo(w)
	}
}

func (o *TLPaymentsPaymentReceipt) String() string {
	return tl.Pretty(o)
}

// TLPaymentsSavedInfo represents ctor payments.savedInfo#fb8fe43c flags:# flags.1?has_saved_credentials:true flags.0?saved_info:PaymentRequestedInfo = payments.SavedInfo from Telegram
type TLPaymentsSavedInfo struct {
	Flags               uint                    // flags:#
	HasSavedCredentials bool                    // flags.1?has_saved_credentials:true
	SavedInfo           *TLPaymentRequestedInfo // flags.0?saved_info:PaymentRequestedInfo
}

func (o *TLPaymentsSavedInfo) Cmd() uint32 {
	return TagPaymentsSavedInfo
}

func (o *TLPaymentsSavedInfo) ReadBareFrom(r *tl.Reader) {
	o.Flags = uint(r.ReadUint32())
	o.HasSavedCredentials = true
	if cmd := r.ReadCmd(); cmd != TagPaymentRequestedInfo {
		r.Fail(errors.New("expected: paymentRequestedInfo"))
	}
	o.SavedInfo = new(TLPaymentRequestedInfo)
	o.SavedInfo.ReadBareFrom(r)
}

func (o *TLPaymentsSavedInfo) WriteBareTo(w *tl.Writer) {
	w.WriteUint32(uint32(o.Flags))
	w.WriteCmd(TagPaymentRequestedInfo)
	o.SavedInfo.WriteBareTo(w)
}

func (o *TLPaymentsSavedInfo) String() string {
	return tl.Pretty(o)
}

// TLInputPaymentCredentialsType represents InputPaymentCredentials from Telegram
type TLInputPaymentCredentialsType interface {
	IsTLInputPaymentCredentials()
	Cmd() uint32
	ReadBareFrom(r *tl.Reader)
	WriteBareTo(w *tl.Writer)
}

// TLAccountTmpPassword represents ctor account.tmpPassword#db64fd34 tmp_password:bytes valid_until:int = account.TmpPassword from Telegram
type TLAccountTmpPassword struct {
	TmpPassword []byte // tmp_password:bytes
	ValidUntil  int    // valid_until:int
}

func (o *TLAccountTmpPassword) Cmd() uint32 {
	return TagAccountTmpPassword
}

func (o *TLAccountTmpPassword) ReadBareFrom(r *tl.Reader) {
	o.TmpPassword = r.ReadBlob()
	o.ValidUntil = r.ReadInt()
}

func (o *TLAccountTmpPassword) WriteBareTo(w *tl.Writer) {
	w.WriteBlob(o.TmpPassword)
	w.WriteInt(o.ValidUntil)
}

func (o *TLAccountTmpPassword) String() string {
	return tl.Pretty(o)
}

// TLShippingOption represents ctor shippingOption#b6213cdf id:string title:string prices:Vector<LabeledPrice> = ShippingOption from Telegram
type TLShippingOption struct {
	ID     string            // id:string
	Title  string            // title:string
	Prices []*TLLabeledPrice // prices:Vector<LabeledPrice>
}

func (o *TLShippingOption) Cmd() uint32 {
	return TagShippingOption
}

func (o *TLShippingOption) ReadBareFrom(r *tl.Reader) {
	o.ID = r.ReadString()
	o.Title = r.ReadString()
	if cmd := r.ReadCmd(); cmd != TagVector {
		r.Fail(errors.New("expected: vector"))
	}
	o.Prices = make([]*TLLabeledPrice, r.ReadInt())
	for i := 0; i < len(o.Prices); i++ {
		if cmd := r.ReadCmd(); cmd != TagLabeledPrice {
			r.Fail(errors.New("expected: labeledPrice"))
		}
		o.Prices[i] = new(TLLabeledPrice)
		o.Prices[i].ReadBareFrom(r)
	}
}

func (o *TLShippingOption) WriteBareTo(w *tl.Writer) {
	w.WriteString(o.ID)
	w.WriteString(o.Title)
	w.WriteCmd(TagVector)
	w.WriteInt(len(o.Prices))
	for i := 0; i < len(o.Prices); i++ {
		w.WriteCmd(TagLabeledPrice)
		o.Prices[i].WriteBareTo(w)
	}
}

func (o *TLShippingOption) String() string {
	return tl.Pretty(o)
}

// TLInputPhoneCall represents ctor inputPhoneCall#1e36fded id:long access_hash:long = InputPhoneCall from Telegram
type TLInputPhoneCall struct {
	ID         uint64 // id:long
	AccessHash uint64 // access_hash:long
}

func (o *TLInputPhoneCall) Cmd() uint32 {
	return TagInputPhoneCall
}

func (o *TLInputPhoneCall) ReadBareFrom(r *tl.Reader) {
	o.ID = r.ReadUint64()
	o.AccessHash = r.ReadUint64()
}

func (o *TLInputPhoneCall) WriteBareTo(w *tl.Writer) {
	w.WriteUint64(o.ID)
	w.WriteUint64(o.AccessHash)
}

func (o *TLInputPhoneCall) String() string {
	return tl.Pretty(o)
}

// TLPhoneCallType represents PhoneCall from Telegram
type TLPhoneCallType interface {
	IsTLPhoneCall()
	Cmd() uint32
	ReadBareFrom(r *tl.Reader)
	WriteBareTo(w *tl.Writer)
}

// TLPhoneConnection represents ctor phoneConnection#9d4c17c0 id:long ip:string ipv6:string port:int peer_tag:bytes = PhoneConnection from Telegram
type TLPhoneConnection struct {
	ID      uint64 // id:long
	IP      string // ip:string
	Ipv6    string // ipv6:string
	Port    int    // port:int
	PeerTag []byte // peer_tag:bytes
}

func (o *TLPhoneConnection) Cmd() uint32 {
	return TagPhoneConnection
}

func (o *TLPhoneConnection) ReadBareFrom(r *tl.Reader) {
	o.ID = r.ReadUint64()
	o.IP = r.ReadString()
	o.Ipv6 = r.ReadString()
	o.Port = r.ReadInt()
	o.PeerTag = r.ReadBlob()
}

func (o *TLPhoneConnection) WriteBareTo(w *tl.Writer) {
	w.WriteUint64(o.ID)
	w.WriteString(o.IP)
	w.WriteString(o.Ipv6)
	w.WriteInt(o.Port)
	w.WriteBlob(o.PeerTag)
}

func (o *TLPhoneConnection) String() string {
	return tl.Pretty(o)
}

// TLPhoneCallProtocol represents ctor phoneCallProtocol#a2bb35cb flags:# flags.0?udp_p2p:true flags.1?udp_reflector:true min_layer:int max_layer:int = PhoneCallProtocol from Telegram
type TLPhoneCallProtocol struct {
	Flags        uint // flags:#
	UdpP2p       bool // flags.0?udp_p2p:true
	UdpReflector bool // flags.1?udp_reflector:true
	MinLayer     int  // min_layer:int
	MaxLayer     int  // max_layer:int
}

func (o *TLPhoneCallProtocol) Cmd() uint32 {
	return TagPhoneCallProtocol
}

func (o *TLPhoneCallProtocol) ReadBareFrom(r *tl.Reader) {
	o.Flags = uint(r.ReadUint32())
	o.UdpP2p = true
	o.UdpReflector = true
	o.MinLayer = r.ReadInt()
	o.MaxLayer = r.ReadInt()
}

func (o *TLPhoneCallProtocol) WriteBareTo(w *tl.Writer) {
	w.WriteUint32(uint32(o.Flags))
	w.WriteInt(o.MinLayer)
	w.WriteInt(o.MaxLayer)
}

func (o *TLPhoneCallProtocol) String() string {
	return tl.Pretty(o)
}

// TLPhonePhoneCall represents ctor phone.phoneCall#ec82e140 phone_call:PhoneCall users:Vector<User> = phone.PhoneCall from Telegram
type TLPhonePhoneCall struct {
	PhoneCall TLPhoneCallType // phone_call:PhoneCall
	Users     []TLUserType    // users:Vector<User>
}

func (o *TLPhonePhoneCall) Cmd() uint32 {
	return TagPhonePhoneCall
}

func (o *TLPhonePhoneCall) ReadBareFrom(r *tl.Reader) {
	o.PhoneCall = Schema.ReadLimitedBoxedObjectFrom(r, TagPhoneCallEmpty, TagPhoneCallWaiting, TagPhoneCallRequested, TagPhoneCallAccepted, TagPhoneCall, TagPhoneCallDiscarded).(TLPhoneCallType)
	if cmd := r.ReadCmd(); cmd != TagVector {
		r.Fail(errors.New("expected: vector"))
	}
	o.Users = make([]TLUserType, r.ReadInt())
	for i := 0; i < len(o.Users); i++ {
		o.Users[i] = Schema.ReadLimitedBoxedObjectFrom(r, TagUserEmpty, TagUser).(TLUserType)
	}
}

func (o *TLPhonePhoneCall) WriteBareTo(w *tl.Writer) {
	w.WriteCmd(o.PhoneCall.Cmd())
	o.PhoneCall.WriteBareTo(w)
	w.WriteCmd(TagVector)
	w.WriteInt(len(o.Users))
	for i := 0; i < len(o.Users); i++ {
		w.WriteCmd(o.Users[i].Cmd())
		o.Users[i].WriteBareTo(w)
	}
}

func (o *TLPhonePhoneCall) String() string {
	return tl.Pretty(o)
}

// TLReqPQ represents func req_pq#60469778 nonce:int128 = ResPQ from MTProto
type TLReqPQ struct {
	Nonce [16]byte // nonce:int128
}

func (o *TLReqPQ) Cmd() uint32 {
	return TagReqPQ
}

func (o *TLReqPQ) ReadBareFrom(r *tl.Reader) {
	r.ReadUint128(o.Nonce[:])
}

func (o *TLReqPQ) WriteBareTo(w *tl.Writer) {
	w.WriteUint128(o.Nonce[:])
}

func (o *TLReqPQ) String() string {
	return tl.Pretty(o)
}

// TLReqDHParams represents func req_DH_params#d712e4be nonce:int128 server_nonce:int128 p:bytes q:bytes public_key_fingerprint:long encrypted_data:bytes = Server_DH_Params from MTProto
type TLReqDHParams struct {
	Nonce                [16]byte // nonce:int128
	ServerNonce          [16]byte // server_nonce:int128
	P                    *big.Int // p:bytes
	Q                    *big.Int // q:bytes
	PublicKeyFingerprint uint64   // public_key_fingerprint:long
	EncryptedData        []byte   // encrypted_data:bytes
}

func (o *TLReqDHParams) Cmd() uint32 {
	return TagReqDHParams
}

func (o *TLReqDHParams) ReadBareFrom(r *tl.Reader) {
	r.ReadUint128(o.Nonce[:])
	r.ReadUint128(o.ServerNonce[:])
	o.P = r.ReadBigInt()
	o.Q = r.ReadBigInt()
	o.PublicKeyFingerprint = r.ReadUint64()
	o.EncryptedData = r.ReadBlob()
}

func (o *TLReqDHParams) WriteBareTo(w *tl.Writer) {
	w.WriteUint128(o.Nonce[:])
	w.WriteUint128(o.ServerNonce[:])
	w.WriteBigInt(o.P)
	w.WriteBigInt(o.Q)
	w.WriteUint64(o.PublicKeyFingerprint)
	w.WriteBlob(o.EncryptedData)
}

func (o *TLReqDHParams) String() string {
	return tl.Pretty(o)
}

// TLSetClientDHParams represents func set_client_DH_params#f5045f1f nonce:int128 server_nonce:int128 encrypted_data:bytes = Set_client_DH_params_answer from MTProto
type TLSetClientDHParams struct {
	Nonce         [16]byte // nonce:int128
	ServerNonce   [16]byte // server_nonce:int128
	EncryptedData []byte   // encrypted_data:bytes
}

func (o *TLSetClientDHParams) Cmd() uint32 {
	return TagSetClientDHParams
}

func (o *TLSetClientDHParams) ReadBareFrom(r *tl.Reader) {
	r.ReadUint128(o.Nonce[:])
	r.ReadUint128(o.ServerNonce[:])
	o.EncryptedData = r.ReadBlob()
}

func (o *TLSetClientDHParams) WriteBareTo(w *tl.Writer) {
	w.WriteUint128(o.Nonce[:])
	w.WriteUint128(o.ServerNonce[:])
	w.WriteBlob(o.EncryptedData)
}

func (o *TLSetClientDHParams) String() string {
	return tl.Pretty(o)
}

// TLRPCDropAnswer represents func rpc_drop_answer#58e4a740 req_msg_id:long = RpcDropAnswer from MTProto
type TLRPCDropAnswer struct {
	ReqMsgID uint64 // req_msg_id:long
}

func (o *TLRPCDropAnswer) Cmd() uint32 {
	return TagRPCDropAnswer
}

func (o *TLRPCDropAnswer) ReadBareFrom(r *tl.Reader) {
	o.ReqMsgID = r.ReadUint64()
}

func (o *TLRPCDropAnswer) WriteBareTo(w *tl.Writer) {
	w.WriteUint64(o.ReqMsgID)
}

func (o *TLRPCDropAnswer) String() string {
	return tl.Pretty(o)
}

// TLGetFutureSalts represents func get_future_salts#b921bd04 num:int = FutureSalts from MTProto
type TLGetFutureSalts struct {
	Num int // num:int
}

func (o *TLGetFutureSalts) Cmd() uint32 {
	return TagGetFutureSalts
}

func (o *TLGetFutureSalts) ReadBareFrom(r *tl.Reader) {
	o.Num = r.ReadInt()
}

func (o *TLGetFutureSalts) WriteBareTo(w *tl.Writer) {
	w.WriteInt(o.Num)
}

func (o *TLGetFutureSalts) String() string {
	return tl.Pretty(o)
}

// TLPing represents func ping#7abe77ec ping_id:long = Pong from MTProto
type TLPing struct {
	PingID uint64 // ping_id:long
}

func (o *TLPing) Cmd() uint32 {
	return TagPing
}

func (o *TLPing) ReadBareFrom(r *tl.Reader) {
	o.PingID = r.ReadUint64()
}

func (o *TLPing) WriteBareTo(w *tl.Writer) {
	w.WriteUint64(o.PingID)
}

func (o *TLPing) String() string {
	return tl.Pretty(o)
}

// TLPingDelayDisconnect represents func ping_delay_disconnect#f3427b8c ping_id:long disconnect_delay:int = Pong from MTProto
type TLPingDelayDisconnect struct {
	PingID          uint64 // ping_id:long
	DisconnectDelay int    // disconnect_delay:int
}

func (o *TLPingDelayDisconnect) Cmd() uint32 {
	return TagPingDelayDisconnect
}

func (o *TLPingDelayDisconnect) ReadBareFrom(r *tl.Reader) {
	o.PingID = r.ReadUint64()
	o.DisconnectDelay = r.ReadInt()
}

func (o *TLPingDelayDisconnect) WriteBareTo(w *tl.Writer) {
	w.WriteUint64(o.PingID)
	w.WriteInt(o.DisconnectDelay)
}

func (o *TLPingDelayDisconnect) String() string {
	return tl.Pretty(o)
}

// TLDestroySession represents func destroy_session#e7512126 session_id:long = DestroySessionRes from MTProto
type TLDestroySession struct {
	SessionID uint64 // session_id:long
}

func (o *TLDestroySession) Cmd() uint32 {
	return TagDestroySession
}

func (o *TLDestroySession) ReadBareFrom(r *tl.Reader) {
	o.SessionID = r.ReadUint64()
}

func (o *TLDestroySession) WriteBareTo(w *tl.Writer) {
	w.WriteUint64(o.SessionID)
}

func (o *TLDestroySession) String() string {
	return tl.Pretty(o)
}

// TLHttpWait represents func http_wait#9299359f max_delay:int wait_after:int max_wait:int = HttpWait from MTProto
type TLHttpWait struct {
	MaxDelay  int // max_delay:int
	WaitAfter int // wait_after:int
	MaxWait   int // max_wait:int
}

func (o *TLHttpWait) Cmd() uint32 {
	return TagHttpWait
}

func (o *TLHttpWait) ReadBareFrom(r *tl.Reader) {
	o.MaxDelay = r.ReadInt()
	o.WaitAfter = r.ReadInt()
	o.MaxWait = r.ReadInt()
}

func (o *TLHttpWait) WriteBareTo(w *tl.Writer) {
	w.WriteInt(o.MaxDelay)
	w.WriteInt(o.WaitAfter)
	w.WriteInt(o.MaxWait)
}

func (o *TLHttpWait) String() string {
	return tl.Pretty(o)
}

// TLInvokeAfterMsg represents func invokeAfterMsg#cb9f372d {X:Type} msg_id:long query:Object = Object from Telegram
type TLInvokeAfterMsg struct {
	MsgID uint64    // msg_id:long
	Query tl.Object // query:Object
}

func (o *TLInvokeAfterMsg) Cmd() uint32 {
	return TagInvokeAfterMsg
}

func (o *TLInvokeAfterMsg) ReadBareFrom(r *tl.Reader) {
	o.MsgID = r.ReadUint64()
	o.Query = Schema.ReadBoxedObjectFrom(r)
}

func (o *TLInvokeAfterMsg) WriteBareTo(w *tl.Writer) {
	w.WriteUint64(o.MsgID)
	w.WriteCmd(o.Query.Cmd())
	o.Query.WriteBareTo(w)
}

func (o *TLInvokeAfterMsg) String() string {
	return tl.Pretty(o)
}

// TLInvokeAfterMsgs represents func invokeAfterMsgs#3dc4b4f0 {X:Type} msg_ids:Vector<long> query:Object = Object from Telegram
type TLInvokeAfterMsgs struct {
	MsgIDs []uint64  // msg_ids:Vector<long>
	Query  tl.Object // query:Object
}

func (o *TLInvokeAfterMsgs) Cmd() uint32 {
	return TagInvokeAfterMsgs
}

func (o *TLInvokeAfterMsgs) ReadBareFrom(r *tl.Reader) {
	if cmd := r.ReadCmd(); cmd != TagVector {
		r.Fail(errors.New("expected: vector"))
	}
	o.MsgIDs = make([]uint64, r.ReadInt())
	for i := 0; i < len(o.MsgIDs); i++ {
		o.MsgIDs[i] = r.ReadUint64()
	}
	o.Query = Schema.ReadBoxedObjectFrom(r)
}

func (o *TLInvokeAfterMsgs) WriteBareTo(w *tl.Writer) {
	w.WriteCmd(TagVector)
	w.WriteInt(len(o.MsgIDs))
	for i := 0; i < len(o.MsgIDs); i++ {
		w.WriteUint64(o.MsgIDs[i])
	}
	w.WriteCmd(o.Query.Cmd())
	o.Query.WriteBareTo(w)
}

func (o *TLInvokeAfterMsgs) String() string {
	return tl.Pretty(o)
}

// TLInitConnection represents func initConnection#69796de9 {X:Type} api_id:int device_model:string system_version:string app_version:string lang_code:string query:Object = Object from Telegram
type TLInitConnection struct {
	APIID         int       // api_id:int
	DeviceModel   string    // device_model:string
	SystemVersion string    // system_version:string
	AppVersion    string    // app_version:string
	LangCode      string    // lang_code:string
	Query         tl.Object // query:Object
}

func (o *TLInitConnection) Cmd() uint32 {
	return TagInitConnection
}

func (o *TLInitConnection) ReadBareFrom(r *tl.Reader) {
	o.APIID = r.ReadInt()
	o.DeviceModel = r.ReadString()
	o.SystemVersion = r.ReadString()
	o.AppVersion = r.ReadString()
	o.LangCode = r.ReadString()
	o.Query = Schema.ReadBoxedObjectFrom(r)
}

func (o *TLInitConnection) WriteBareTo(w *tl.Writer) {
	w.WriteInt(o.APIID)
	w.WriteString(o.DeviceModel)
	w.WriteString(o.SystemVersion)
	w.WriteString(o.AppVersion)
	w.WriteString(o.LangCode)
	w.WriteCmd(o.Query.Cmd())
	o.Query.WriteBareTo(w)
}

func (o *TLInitConnection) String() string {
	return tl.Pretty(o)
}

// TLInvokeWithLayer represents func invokeWithLayer#da9b0d0d {X:Type} layer:int query:Object = Object from Telegram
type TLInvokeWithLayer struct {
	Layer int       // layer:int
	Query tl.Object // query:Object
}

func (o *TLInvokeWithLayer) Cmd() uint32 {
	return TagInvokeWithLayer
}

func (o *TLInvokeWithLayer) ReadBareFrom(r *tl.Reader) {
	o.Layer = r.ReadInt()
	o.Query = Schema.ReadBoxedObjectFrom(r)
}

func (o *TLInvokeWithLayer) WriteBareTo(w *tl.Writer) {
	w.WriteInt(o.Layer)
	w.WriteCmd(o.Query.Cmd())
	o.Query.WriteBareTo(w)
}

func (o *TLInvokeWithLayer) String() string {
	return tl.Pretty(o)
}

// TLInvokeWithoutUpdates represents func invokeWithoutUpdates#bf9459b7 {X:Type} query:Object = Object from Telegram
type TLInvokeWithoutUpdates struct {
	Query tl.Object // query:Object
}

func (o *TLInvokeWithoutUpdates) Cmd() uint32 {
	return TagInvokeWithoutUpdates
}

func (o *TLInvokeWithoutUpdates) ReadBareFrom(r *tl.Reader) {
	o.Query = Schema.ReadBoxedObjectFrom(r)
}

func (o *TLInvokeWithoutUpdates) WriteBareTo(w *tl.Writer) {
	w.WriteCmd(o.Query.Cmd())
	o.Query.WriteBareTo(w)
}

func (o *TLInvokeWithoutUpdates) String() string {
	return tl.Pretty(o)
}

// TLAuthCheckPhone represents func auth.checkPhone#6fe51dfb phone_number:string = auth.CheckedPhone from Telegram
type TLAuthCheckPhone struct {
	PhoneNumber string // phone_number:string
}

func (o *TLAuthCheckPhone) Cmd() uint32 {
	return TagAuthCheckPhone
}

func (o *TLAuthCheckPhone) ReadBareFrom(r *tl.Reader) {
	o.PhoneNumber = r.ReadString()
}

func (o *TLAuthCheckPhone) WriteBareTo(w *tl.Writer) {
	w.WriteString(o.PhoneNumber)
}

func (o *TLAuthCheckPhone) String() string {
	return tl.Pretty(o)
}

// TLAuthSendCode represents func auth.sendCode#86aef0ec flags:# flags.0?allow_flashcall:true phone_number:string flags.0?current_number:Bool api_id:int api_hash:string = auth.SentCode from Telegram
type TLAuthSendCode struct {
	Flags          uint   // flags:#
	AllowFlashcall bool   // flags.0?allow_flashcall:true
	PhoneNumber    string // phone_number:string
	CurrentNumber  bool   // flags.0?current_number:Bool
	APIID          int    // api_id:int
	APIHash        string // api_hash:string
}

func (o *TLAuthSendCode) Cmd() uint32 {
	return TagAuthSendCode
}

func (o *TLAuthSendCode) ReadBareFrom(r *tl.Reader) {
	o.Flags = uint(r.ReadUint32())
	o.AllowFlashcall = true
	o.PhoneNumber = r.ReadString()
	r.ExpectCmd(TagBoolTrue, TagBoolFalse)
	o.CurrentNumber = (r.ReadCmd() == TagBoolTrue)
	o.APIID = r.ReadInt()
	o.APIHash = r.ReadString()
}

func (o *TLAuthSendCode) WriteBareTo(w *tl.Writer) {
	w.WriteUint32(uint32(o.Flags))
	w.WriteString(o.PhoneNumber)
	if o.CurrentNumber {
		w.WriteCmd(TagBoolTrue)
	} else {
		w.WriteCmd(TagBoolFalse)
	}
	w.WriteInt(o.APIID)
	w.WriteString(o.APIHash)
}

func (o *TLAuthSendCode) String() string {
	return tl.Pretty(o)
}

// TLAuthSignUp represents func auth.signUp#1b067634 phone_number:string phone_code_hash:string phone_code:string first_name:string last_name:string = auth.Authorization from Telegram
type TLAuthSignUp struct {
	PhoneNumber   string // phone_number:string
	PhoneCodeHash string // phone_code_hash:string
	PhoneCode     string // phone_code:string
	FirstName     string // first_name:string
	LastName      string // last_name:string
}

func (o *TLAuthSignUp) Cmd() uint32 {
	return TagAuthSignUp
}

func (o *TLAuthSignUp) ReadBareFrom(r *tl.Reader) {
	o.PhoneNumber = r.ReadString()
	o.PhoneCodeHash = r.ReadString()
	o.PhoneCode = r.ReadString()
	o.FirstName = r.ReadString()
	o.LastName = r.ReadString()
}

func (o *TLAuthSignUp) WriteBareTo(w *tl.Writer) {
	w.WriteString(o.PhoneNumber)
	w.WriteString(o.PhoneCodeHash)
	w.WriteString(o.PhoneCode)
	w.WriteString(o.FirstName)
	w.WriteString(o.LastName)
}

func (o *TLAuthSignUp) String() string {
	return tl.Pretty(o)
}

// TLAuthSignIn represents func auth.signIn#bcd51581 phone_number:string phone_code_hash:string phone_code:string = auth.Authorization from Telegram
type TLAuthSignIn struct {
	PhoneNumber   string // phone_number:string
	PhoneCodeHash string // phone_code_hash:string
	PhoneCode     string // phone_code:string
}

func (o *TLAuthSignIn) Cmd() uint32 {
	return TagAuthSignIn
}

func (o *TLAuthSignIn) ReadBareFrom(r *tl.Reader) {
	o.PhoneNumber = r.ReadString()
	o.PhoneCodeHash = r.ReadString()
	o.PhoneCode = r.ReadString()
}

func (o *TLAuthSignIn) WriteBareTo(w *tl.Writer) {
	w.WriteString(o.PhoneNumber)
	w.WriteString(o.PhoneCodeHash)
	w.WriteString(o.PhoneCode)
}

func (o *TLAuthSignIn) String() string {
	return tl.Pretty(o)
}

// TLAuthLogOut represents func auth.logOut#5717da40 = Bool from Telegram
type TLAuthLogOut struct {
}

func (o *TLAuthLogOut) Cmd() uint32 {
	return TagAuthLogOut
}

func (o *TLAuthLogOut) ReadBareFrom(r *tl.Reader) {
}

func (o *TLAuthLogOut) WriteBareTo(w *tl.Writer) {
}

func (o *TLAuthLogOut) String() string {
	return tl.Pretty(o)
}

// TLAuthResetAuthorizations represents func auth.resetAuthorizations#9fab0d1a = Bool from Telegram
type TLAuthResetAuthorizations struct {
}

func (o *TLAuthResetAuthorizations) Cmd() uint32 {
	return TagAuthResetAuthorizations
}

func (o *TLAuthResetAuthorizations) ReadBareFrom(r *tl.Reader) {
}

func (o *TLAuthResetAuthorizations) WriteBareTo(w *tl.Writer) {
}

func (o *TLAuthResetAuthorizations) String() string {
	return tl.Pretty(o)
}

// TLAuthSendInvites represents func auth.sendInvites#771c1d97 phone_numbers:Vector<string> message:string = Bool from Telegram
type TLAuthSendInvites struct {
	PhoneNumbers []string // phone_numbers:Vector<string>
	Message      string   // message:string
}

func (o *TLAuthSendInvites) Cmd() uint32 {
	return TagAuthSendInvites
}

func (o *TLAuthSendInvites) ReadBareFrom(r *tl.Reader) {
	if cmd := r.ReadCmd(); cmd != TagVector {
		r.Fail(errors.New("expected: vector"))
	}
	o.PhoneNumbers = make([]string, r.ReadInt())
	for i := 0; i < len(o.PhoneNumbers); i++ {
		o.PhoneNumbers[i] = r.ReadString()
	}
	o.Message = r.ReadString()
}

func (o *TLAuthSendInvites) WriteBareTo(w *tl.Writer) {
	w.WriteCmd(TagVector)
	w.WriteInt(len(o.PhoneNumbers))
	for i := 0; i < len(o.PhoneNumbers); i++ {
		w.WriteString(o.PhoneNumbers[i])
	}
	w.WriteString(o.Message)
}

func (o *TLAuthSendInvites) String() string {
	return tl.Pretty(o)
}

// TLAuthExportAuthorization represents func auth.exportAuthorization#e5bfffcd dc_id:int = auth.ExportedAuthorization from Telegram
type TLAuthExportAuthorization struct {
	DCID int // dc_id:int
}

func (o *TLAuthExportAuthorization) Cmd() uint32 {
	return TagAuthExportAuthorization
}

func (o *TLAuthExportAuthorization) ReadBareFrom(r *tl.Reader) {
	o.DCID = r.ReadInt()
}

func (o *TLAuthExportAuthorization) WriteBareTo(w *tl.Writer) {
	w.WriteInt(o.DCID)
}

func (o *TLAuthExportAuthorization) String() string {
	return tl.Pretty(o)
}

// TLAuthImportAuthorization represents func auth.importAuthorization#e3ef9613 id:int bytes:bytes = auth.Authorization from Telegram
type TLAuthImportAuthorization struct {
	ID    int    // id:int
	Bytes []byte // bytes:bytes
}

func (o *TLAuthImportAuthorization) Cmd() uint32 {
	return TagAuthImportAuthorization
}

func (o *TLAuthImportAuthorization) ReadBareFrom(r *tl.Reader) {
	o.ID = r.ReadInt()
	o.Bytes = r.ReadBlob()
}

func (o *TLAuthImportAuthorization) WriteBareTo(w *tl.Writer) {
	w.WriteInt(o.ID)
	w.WriteBlob(o.Bytes)
}

func (o *TLAuthImportAuthorization) String() string {
	return tl.Pretty(o)
}

// TLAuthBindTempAuthKey represents func auth.bindTempAuthKey#cdd42a05 perm_auth_key_id:long nonce:long expires_at:int encrypted_message:bytes = Bool from Telegram
type TLAuthBindTempAuthKey struct {
	PermAuthKeyID    uint64 // perm_auth_key_id:long
	Nonce            uint64 // nonce:long
	ExpiresAt        int    // expires_at:int
	EncryptedMessage []byte // encrypted_message:bytes
}

func (o *TLAuthBindTempAuthKey) Cmd() uint32 {
	return TagAuthBindTempAuthKey
}

func (o *TLAuthBindTempAuthKey) ReadBareFrom(r *tl.Reader) {
	o.PermAuthKeyID = r.ReadUint64()
	o.Nonce = r.ReadUint64()
	o.ExpiresAt = r.ReadInt()
	o.EncryptedMessage = r.ReadBlob()
}

func (o *TLAuthBindTempAuthKey) WriteBareTo(w *tl.Writer) {
	w.WriteUint64(o.PermAuthKeyID)
	w.WriteUint64(o.Nonce)
	w.WriteInt(o.ExpiresAt)
	w.WriteBlob(o.EncryptedMessage)
}

func (o *TLAuthBindTempAuthKey) String() string {
	return tl.Pretty(o)
}

// TLAuthImportBotAuthorization represents func auth.importBotAuthorization#67a3ff2c flags:int api_id:int api_hash:string bot_auth_token:string = auth.Authorization from Telegram
type TLAuthImportBotAuthorization struct {
	Flags        int    // flags:int
	APIID        int    // api_id:int
	APIHash      string // api_hash:string
	BotAuthToken string // bot_auth_token:string
}

func (o *TLAuthImportBotAuthorization) Cmd() uint32 {
	return TagAuthImportBotAuthorization
}

func (o *TLAuthImportBotAuthorization) ReadBareFrom(r *tl.Reader) {
	o.Flags = r.ReadInt()
	o.APIID = r.ReadInt()
	o.APIHash = r.ReadString()
	o.BotAuthToken = r.ReadString()
}

func (o *TLAuthImportBotAuthorization) WriteBareTo(w *tl.Writer) {
	w.WriteInt(o.Flags)
	w.WriteInt(o.APIID)
	w.WriteString(o.APIHash)
	w.WriteString(o.BotAuthToken)
}

func (o *TLAuthImportBotAuthorization) String() string {
	return tl.Pretty(o)
}

// TLAuthCheckPassword represents func auth.checkPassword#0a63011e password_hash:bytes = auth.Authorization from Telegram
type TLAuthCheckPassword struct {
	PasswordHash []byte // password_hash:bytes
}

func (o *TLAuthCheckPassword) Cmd() uint32 {
	return TagAuthCheckPassword
}

func (o *TLAuthCheckPassword) ReadBareFrom(r *tl.Reader) {
	o.PasswordHash = r.ReadBlob()
}

func (o *TLAuthCheckPassword) WriteBareTo(w *tl.Writer) {
	w.WriteBlob(o.PasswordHash)
}

func (o *TLAuthCheckPassword) String() string {
	return tl.Pretty(o)
}

// TLAuthRequestPasswordRecovery represents func auth.requestPasswordRecovery#d897bc66 = auth.PasswordRecovery from Telegram
type TLAuthRequestPasswordRecovery struct {
}

func (o *TLAuthRequestPasswordRecovery) Cmd() uint32 {
	return TagAuthRequestPasswordRecovery
}

func (o *TLAuthRequestPasswordRecovery) ReadBareFrom(r *tl.Reader) {
}

func (o *TLAuthRequestPasswordRecovery) WriteBareTo(w *tl.Writer) {
}

func (o *TLAuthRequestPasswordRecovery) String() string {
	return tl.Pretty(o)
}

// TLAuthRecoverPassword represents func auth.recoverPassword#4ea56e92 code:string = auth.Authorization from Telegram
type TLAuthRecoverPassword struct {
	Code string // code:string
}

func (o *TLAuthRecoverPassword) Cmd() uint32 {
	return TagAuthRecoverPassword
}

func (o *TLAuthRecoverPassword) ReadBareFrom(r *tl.Reader) {
	o.Code = r.ReadString()
}

func (o *TLAuthRecoverPassword) WriteBareTo(w *tl.Writer) {
	w.WriteString(o.Code)
}

func (o *TLAuthRecoverPassword) String() string {
	return tl.Pretty(o)
}

// TLAuthResendCode represents func auth.resendCode#3ef1a9bf phone_number:string phone_code_hash:string = auth.SentCode from Telegram
type TLAuthResendCode struct {
	PhoneNumber   string // phone_number:string
	PhoneCodeHash string // phone_code_hash:string
}

func (o *TLAuthResendCode) Cmd() uint32 {
	return TagAuthResendCode
}

func (o *TLAuthResendCode) ReadBareFrom(r *tl.Reader) {
	o.PhoneNumber = r.ReadString()
	o.PhoneCodeHash = r.ReadString()
}

func (o *TLAuthResendCode) WriteBareTo(w *tl.Writer) {
	w.WriteString(o.PhoneNumber)
	w.WriteString(o.PhoneCodeHash)
}

func (o *TLAuthResendCode) String() string {
	return tl.Pretty(o)
}

// TLAuthCancelCode represents func auth.cancelCode#1f040578 phone_number:string phone_code_hash:string = Bool from Telegram
type TLAuthCancelCode struct {
	PhoneNumber   string // phone_number:string
	PhoneCodeHash string // phone_code_hash:string
}

func (o *TLAuthCancelCode) Cmd() uint32 {
	return TagAuthCancelCode
}

func (o *TLAuthCancelCode) ReadBareFrom(r *tl.Reader) {
	o.PhoneNumber = r.ReadString()
	o.PhoneCodeHash = r.ReadString()
}

func (o *TLAuthCancelCode) WriteBareTo(w *tl.Writer) {
	w.WriteString(o.PhoneNumber)
	w.WriteString(o.PhoneCodeHash)
}

func (o *TLAuthCancelCode) String() string {
	return tl.Pretty(o)
}

// TLAuthDropTempAuthKeys represents func auth.dropTempAuthKeys#8e48a188 except_auth_keys:Vector<long> = Bool from Telegram
type TLAuthDropTempAuthKeys struct {
	ExceptAuthKeys []uint64 // except_auth_keys:Vector<long>
}

func (o *TLAuthDropTempAuthKeys) Cmd() uint32 {
	return TagAuthDropTempAuthKeys
}

func (o *TLAuthDropTempAuthKeys) ReadBareFrom(r *tl.Reader) {
	if cmd := r.ReadCmd(); cmd != TagVector {
		r.Fail(errors.New("expected: vector"))
	}
	o.ExceptAuthKeys = make([]uint64, r.ReadInt())
	for i := 0; i < len(o.ExceptAuthKeys); i++ {
		o.ExceptAuthKeys[i] = r.ReadUint64()
	}
}

func (o *TLAuthDropTempAuthKeys) WriteBareTo(w *tl.Writer) {
	w.WriteCmd(TagVector)
	w.WriteInt(len(o.ExceptAuthKeys))
	for i := 0; i < len(o.ExceptAuthKeys); i++ {
		w.WriteUint64(o.ExceptAuthKeys[i])
	}
}

func (o *TLAuthDropTempAuthKeys) String() string {
	return tl.Pretty(o)
}

// TLAccountRegisterDevice represents func account.registerDevice#637ea878 token_type:int token:string = Bool from Telegram
type TLAccountRegisterDevice struct {
	TokenType int    // token_type:int
	Token     string // token:string
}

func (o *TLAccountRegisterDevice) Cmd() uint32 {
	return TagAccountRegisterDevice
}

func (o *TLAccountRegisterDevice) ReadBareFrom(r *tl.Reader) {
	o.TokenType = r.ReadInt()
	o.Token = r.ReadString()
}

func (o *TLAccountRegisterDevice) WriteBareTo(w *tl.Writer) {
	w.WriteInt(o.TokenType)
	w.WriteString(o.Token)
}

func (o *TLAccountRegisterDevice) String() string {
	return tl.Pretty(o)
}

// TLAccountUnregisterDevice represents func account.unregisterDevice#65c55b40 token_type:int token:string = Bool from Telegram
type TLAccountUnregisterDevice struct {
	TokenType int    // token_type:int
	Token     string // token:string
}

func (o *TLAccountUnregisterDevice) Cmd() uint32 {
	return TagAccountUnregisterDevice
}

func (o *TLAccountUnregisterDevice) ReadBareFrom(r *tl.Reader) {
	o.TokenType = r.ReadInt()
	o.Token = r.ReadString()
}

func (o *TLAccountUnregisterDevice) WriteBareTo(w *tl.Writer) {
	w.WriteInt(o.TokenType)
	w.WriteString(o.Token)
}

func (o *TLAccountUnregisterDevice) String() string {
	return tl.Pretty(o)
}

// TLAccountUpdateNotifySettings represents func account.updateNotifySettings#84be5b93 peer:InputNotifyPeer settings:InputPeerNotifySettings = Bool from Telegram
type TLAccountUpdateNotifySettings struct {
	Peer     TLInputNotifyPeerType      // peer:InputNotifyPeer
	Settings *TLInputPeerNotifySettings // settings:InputPeerNotifySettings
}

func (o *TLAccountUpdateNotifySettings) Cmd() uint32 {
	return TagAccountUpdateNotifySettings
}

func (o *TLAccountUpdateNotifySettings) ReadBareFrom(r *tl.Reader) {
	o.Peer = Schema.ReadLimitedBoxedObjectFrom(r, TagInputNotifyPeer, TagInputNotifyUsers, TagInputNotifyChats, TagInputNotifyAll).(TLInputNotifyPeerType)
	if cmd := r.ReadCmd(); cmd != TagInputPeerNotifySettings {
		r.Fail(errors.New("expected: inputPeerNotifySettings"))
	}
	o.Settings = new(TLInputPeerNotifySettings)
	o.Settings.ReadBareFrom(r)
}

func (o *TLAccountUpdateNotifySettings) WriteBareTo(w *tl.Writer) {
	w.WriteCmd(o.Peer.Cmd())
	o.Peer.WriteBareTo(w)
	w.WriteCmd(TagInputPeerNotifySettings)
	o.Settings.WriteBareTo(w)
}

func (o *TLAccountUpdateNotifySettings) String() string {
	return tl.Pretty(o)
}

// TLAccountGetNotifySettings represents func account.getNotifySettings#12b3ad31 peer:InputNotifyPeer = PeerNotifySettings from Telegram
type TLAccountGetNotifySettings struct {
	Peer TLInputNotifyPeerType // peer:InputNotifyPeer
}

func (o *TLAccountGetNotifySettings) Cmd() uint32 {
	return TagAccountGetNotifySettings
}

func (o *TLAccountGetNotifySettings) ReadBareFrom(r *tl.Reader) {
	o.Peer = Schema.ReadLimitedBoxedObjectFrom(r, TagInputNotifyPeer, TagInputNotifyUsers, TagInputNotifyChats, TagInputNotifyAll).(TLInputNotifyPeerType)
}

func (o *TLAccountGetNotifySettings) WriteBareTo(w *tl.Writer) {
	w.WriteCmd(o.Peer.Cmd())
	o.Peer.WriteBareTo(w)
}

func (o *TLAccountGetNotifySettings) String() string {
	return tl.Pretty(o)
}

// TLAccountResetNotifySettings represents func account.resetNotifySettings#db7e1747 = Bool from Telegram
type TLAccountResetNotifySettings struct {
}

func (o *TLAccountResetNotifySettings) Cmd() uint32 {
	return TagAccountResetNotifySettings
}

func (o *TLAccountResetNotifySettings) ReadBareFrom(r *tl.Reader) {
}

func (o *TLAccountResetNotifySettings) WriteBareTo(w *tl.Writer) {
}

func (o *TLAccountResetNotifySettings) String() string {
	return tl.Pretty(o)
}

// TLAccountUpdateProfile represents func account.updateProfile#78515775 flags:# flags.0?first_name:string flags.1?last_name:string flags.2?about:string = User from Telegram
type TLAccountUpdateProfile struct {
	Flags     uint   // flags:#
	FirstName string // flags.0?first_name:string
	LastName  string // flags.1?last_name:string
	About     string // flags.2?about:string
}

func (o *TLAccountUpdateProfile) Cmd() uint32 {
	return TagAccountUpdateProfile
}

func (o *TLAccountUpdateProfile) ReadBareFrom(r *tl.Reader) {
	o.Flags = uint(r.ReadUint32())
	o.FirstName = r.ReadString()
	o.LastName = r.ReadString()
	o.About = r.ReadString()
}

func (o *TLAccountUpdateProfile) WriteBareTo(w *tl.Writer) {
	w.WriteUint32(uint32(o.Flags))
	w.WriteString(o.FirstName)
	w.WriteString(o.LastName)
	w.WriteString(o.About)
}

func (o *TLAccountUpdateProfile) String() string {
	return tl.Pretty(o)
}

// TLAccountUpdateStatus represents func account.updateStatus#6628562c offline:Bool = Bool from Telegram
type TLAccountUpdateStatus struct {
	Offline bool // offline:Bool
}

func (o *TLAccountUpdateStatus) Cmd() uint32 {
	return TagAccountUpdateStatus
}

func (o *TLAccountUpdateStatus) ReadBareFrom(r *tl.Reader) {
	r.ExpectCmd(TagBoolTrue, TagBoolFalse)
	o.Offline = (r.ReadCmd() == TagBoolTrue)
}

func (o *TLAccountUpdateStatus) WriteBareTo(w *tl.Writer) {
	if o.Offline {
		w.WriteCmd(TagBoolTrue)
	} else {
		w.WriteCmd(TagBoolFalse)
	}
}

func (o *TLAccountUpdateStatus) String() string {
	return tl.Pretty(o)
}

// TLAccountGetWallPapers represents func account.getWallPapers#c04cfac2 = Vector<WallPaper> from Telegram
type TLAccountGetWallPapers struct {
}

func (o *TLAccountGetWallPapers) Cmd() uint32 {
	return TagAccountGetWallPapers
}

func (o *TLAccountGetWallPapers) ReadBareFrom(r *tl.Reader) {
}

func (o *TLAccountGetWallPapers) WriteBareTo(w *tl.Writer) {
}

func (o *TLAccountGetWallPapers) String() string {
	return tl.Pretty(o)
}

// TLAccountReportPeer represents func account.reportPeer#ae189d5f peer:InputPeer reason:ReportReason = Bool from Telegram
type TLAccountReportPeer struct {
	Peer   TLInputPeerType    // peer:InputPeer
	Reason TLReportReasonType // reason:ReportReason
}

func (o *TLAccountReportPeer) Cmd() uint32 {
	return TagAccountReportPeer
}

func (o *TLAccountReportPeer) ReadBareFrom(r *tl.Reader) {
	o.Peer = Schema.ReadLimitedBoxedObjectFrom(r, TagInputPeerEmpty, TagInputPeerSelf, TagInputPeerChat, TagInputPeerUser, TagInputPeerChannel).(TLInputPeerType)
	o.Reason = Schema.ReadLimitedBoxedObjectFrom(r, TagInputReportReasonSpam, TagInputReportReasonViolence, TagInputReportReasonPornography, TagInputReportReasonOther).(TLReportReasonType)
}

func (o *TLAccountReportPeer) WriteBareTo(w *tl.Writer) {
	w.WriteCmd(o.Peer.Cmd())
	o.Peer.WriteBareTo(w)
	w.WriteCmd(o.Reason.Cmd())
	o.Reason.WriteBareTo(w)
}

func (o *TLAccountReportPeer) String() string {
	return tl.Pretty(o)
}

// TLAccountCheckUsername represents func account.checkUsername#2714d86c username:string = Bool from Telegram
type TLAccountCheckUsername struct {
	Username string // username:string
}

func (o *TLAccountCheckUsername) Cmd() uint32 {
	return TagAccountCheckUsername
}

func (o *TLAccountCheckUsername) ReadBareFrom(r *tl.Reader) {
	o.Username = r.ReadString()
}

func (o *TLAccountCheckUsername) WriteBareTo(w *tl.Writer) {
	w.WriteString(o.Username)
}

func (o *TLAccountCheckUsername) String() string {
	return tl.Pretty(o)
}

// TLAccountUpdateUsername represents func account.updateUsername#3e0bdd7c username:string = User from Telegram
type TLAccountUpdateUsername struct {
	Username string // username:string
}

func (o *TLAccountUpdateUsername) Cmd() uint32 {
	return TagAccountUpdateUsername
}

func (o *TLAccountUpdateUsername) ReadBareFrom(r *tl.Reader) {
	o.Username = r.ReadString()
}

func (o *TLAccountUpdateUsername) WriteBareTo(w *tl.Writer) {
	w.WriteString(o.Username)
}

func (o *TLAccountUpdateUsername) String() string {
	return tl.Pretty(o)
}

// TLAccountGetPrivacy represents func account.getPrivacy#dadbc950 key:InputPrivacyKey = account.PrivacyRules from Telegram
type TLAccountGetPrivacy struct {
	Key TLInputPrivacyKeyType // key:InputPrivacyKey
}

func (o *TLAccountGetPrivacy) Cmd() uint32 {
	return TagAccountGetPrivacy
}

func (o *TLAccountGetPrivacy) ReadBareFrom(r *tl.Reader) {
	o.Key = Schema.ReadLimitedBoxedObjectFrom(r, TagInputPrivacyKeyStatusTimestamp, TagInputPrivacyKeyChatInvite, TagInputPrivacyKeyPhoneCall).(TLInputPrivacyKeyType)
}

func (o *TLAccountGetPrivacy) WriteBareTo(w *tl.Writer) {
	w.WriteCmd(o.Key.Cmd())
	o.Key.WriteBareTo(w)
}

func (o *TLAccountGetPrivacy) String() string {
	return tl.Pretty(o)
}

// TLAccountSetPrivacy represents func account.setPrivacy#c9f81ce8 key:InputPrivacyKey rules:Vector<InputPrivacyRule> = account.PrivacyRules from Telegram
type TLAccountSetPrivacy struct {
	Key   TLInputPrivacyKeyType    // key:InputPrivacyKey
	Rules []TLInputPrivacyRuleType // rules:Vector<InputPrivacyRule>
}

func (o *TLAccountSetPrivacy) Cmd() uint32 {
	return TagAccountSetPrivacy
}

func (o *TLAccountSetPrivacy) ReadBareFrom(r *tl.Reader) {
	o.Key = Schema.ReadLimitedBoxedObjectFrom(r, TagInputPrivacyKeyStatusTimestamp, TagInputPrivacyKeyChatInvite, TagInputPrivacyKeyPhoneCall).(TLInputPrivacyKeyType)
	if cmd := r.ReadCmd(); cmd != TagVector {
		r.Fail(errors.New("expected: vector"))
	}
	o.Rules = make([]TLInputPrivacyRuleType, r.ReadInt())
	for i := 0; i < len(o.Rules); i++ {
		o.Rules[i] = Schema.ReadLimitedBoxedObjectFrom(r, TagInputPrivacyValueAllowContacts, TagInputPrivacyValueAllowAll, TagInputPrivacyValueAllowUsers, TagInputPrivacyValueDisallowContacts, TagInputPrivacyValueDisallowAll, TagInputPrivacyValueDisallowUsers).(TLInputPrivacyRuleType)
	}
}

func (o *TLAccountSetPrivacy) WriteBareTo(w *tl.Writer) {
	w.WriteCmd(o.Key.Cmd())
	o.Key.WriteBareTo(w)
	w.WriteCmd(TagVector)
	w.WriteInt(len(o.Rules))
	for i := 0; i < len(o.Rules); i++ {
		w.WriteCmd(o.Rules[i].Cmd())
		o.Rules[i].WriteBareTo(w)
	}
}

func (o *TLAccountSetPrivacy) String() string {
	return tl.Pretty(o)
}

// TLAccountDeleteAccount represents func account.deleteAccount#418d4e0b reason:string = Bool from Telegram
type TLAccountDeleteAccount struct {
	Reason string // reason:string
}

func (o *TLAccountDeleteAccount) Cmd() uint32 {
	return TagAccountDeleteAccount
}

func (o *TLAccountDeleteAccount) ReadBareFrom(r *tl.Reader) {
	o.Reason = r.ReadString()
}

func (o *TLAccountDeleteAccount) WriteBareTo(w *tl.Writer) {
	w.WriteString(o.Reason)
}

func (o *TLAccountDeleteAccount) String() string {
	return tl.Pretty(o)
}

// TLAccountGetAccountTTL represents func account.getAccountTTL#08fc711d = AccountDaysTTL from Telegram
type TLAccountGetAccountTTL struct {
}

func (o *TLAccountGetAccountTTL) Cmd() uint32 {
	return TagAccountGetAccountTTL
}

func (o *TLAccountGetAccountTTL) ReadBareFrom(r *tl.Reader) {
}

func (o *TLAccountGetAccountTTL) WriteBareTo(w *tl.Writer) {
}

func (o *TLAccountGetAccountTTL) String() string {
	return tl.Pretty(o)
}

// TLAccountSetAccountTTL represents func account.setAccountTTL#2442485e ttl:AccountDaysTTL = Bool from Telegram
type TLAccountSetAccountTTL struct {
	Ttl *TLAccountDaysTTL // ttl:AccountDaysTTL
}

func (o *TLAccountSetAccountTTL) Cmd() uint32 {
	return TagAccountSetAccountTTL
}

func (o *TLAccountSetAccountTTL) ReadBareFrom(r *tl.Reader) {
	if cmd := r.ReadCmd(); cmd != TagAccountDaysTTL {
		r.Fail(errors.New("expected: accountDaysTTL"))
	}
	o.Ttl = new(TLAccountDaysTTL)
	o.Ttl.ReadBareFrom(r)
}

func (o *TLAccountSetAccountTTL) WriteBareTo(w *tl.Writer) {
	w.WriteCmd(TagAccountDaysTTL)
	o.Ttl.WriteBareTo(w)
}

func (o *TLAccountSetAccountTTL) String() string {
	return tl.Pretty(o)
}

// TLAccountSendChangePhoneCode represents func account.sendChangePhoneCode#08e57deb flags:# flags.0?allow_flashcall:true phone_number:string flags.0?current_number:Bool = auth.SentCode from Telegram
type TLAccountSendChangePhoneCode struct {
	Flags          uint   // flags:#
	AllowFlashcall bool   // flags.0?allow_flashcall:true
	PhoneNumber    string // phone_number:string
	CurrentNumber  bool   // flags.0?current_number:Bool
}

func (o *TLAccountSendChangePhoneCode) Cmd() uint32 {
	return TagAccountSendChangePhoneCode
}

func (o *TLAccountSendChangePhoneCode) ReadBareFrom(r *tl.Reader) {
	o.Flags = uint(r.ReadUint32())
	o.AllowFlashcall = true
	o.PhoneNumber = r.ReadString()
	r.ExpectCmd(TagBoolTrue, TagBoolFalse)
	o.CurrentNumber = (r.ReadCmd() == TagBoolTrue)
}

func (o *TLAccountSendChangePhoneCode) WriteBareTo(w *tl.Writer) {
	w.WriteUint32(uint32(o.Flags))
	w.WriteString(o.PhoneNumber)
	if o.CurrentNumber {
		w.WriteCmd(TagBoolTrue)
	} else {
		w.WriteCmd(TagBoolFalse)
	}
}

func (o *TLAccountSendChangePhoneCode) String() string {
	return tl.Pretty(o)
}

// TLAccountChangePhone represents func account.changePhone#70c32edb phone_number:string phone_code_hash:string phone_code:string = User from Telegram
type TLAccountChangePhone struct {
	PhoneNumber   string // phone_number:string
	PhoneCodeHash string // phone_code_hash:string
	PhoneCode     string // phone_code:string
}

func (o *TLAccountChangePhone) Cmd() uint32 {
	return TagAccountChangePhone
}

func (o *TLAccountChangePhone) ReadBareFrom(r *tl.Reader) {
	o.PhoneNumber = r.ReadString()
	o.PhoneCodeHash = r.ReadString()
	o.PhoneCode = r.ReadString()
}

func (o *TLAccountChangePhone) WriteBareTo(w *tl.Writer) {
	w.WriteString(o.PhoneNumber)
	w.WriteString(o.PhoneCodeHash)
	w.WriteString(o.PhoneCode)
}

func (o *TLAccountChangePhone) String() string {
	return tl.Pretty(o)
}

// TLAccountUpdateDeviceLocked represents func account.updateDeviceLocked#38df3532 period:int = Bool from Telegram
type TLAccountUpdateDeviceLocked struct {
	Period int // period:int
}

func (o *TLAccountUpdateDeviceLocked) Cmd() uint32 {
	return TagAccountUpdateDeviceLocked
}

func (o *TLAccountUpdateDeviceLocked) ReadBareFrom(r *tl.Reader) {
	o.Period = r.ReadInt()
}

func (o *TLAccountUpdateDeviceLocked) WriteBareTo(w *tl.Writer) {
	w.WriteInt(o.Period)
}

func (o *TLAccountUpdateDeviceLocked) String() string {
	return tl.Pretty(o)
}

// TLAccountGetAuthorizations represents func account.getAuthorizations#e320c158 = account.Authorizations from Telegram
type TLAccountGetAuthorizations struct {
}

func (o *TLAccountGetAuthorizations) Cmd() uint32 {
	return TagAccountGetAuthorizations
}

func (o *TLAccountGetAuthorizations) ReadBareFrom(r *tl.Reader) {
}

func (o *TLAccountGetAuthorizations) WriteBareTo(w *tl.Writer) {
}

func (o *TLAccountGetAuthorizations) String() string {
	return tl.Pretty(o)
}

// TLAccountResetAuthorization represents func account.resetAuthorization#df77f3bc hash:long = Bool from Telegram
type TLAccountResetAuthorization struct {
	Hash uint64 // hash:long
}

func (o *TLAccountResetAuthorization) Cmd() uint32 {
	return TagAccountResetAuthorization
}

func (o *TLAccountResetAuthorization) ReadBareFrom(r *tl.Reader) {
	o.Hash = r.ReadUint64()
}

func (o *TLAccountResetAuthorization) WriteBareTo(w *tl.Writer) {
	w.WriteUint64(o.Hash)
}

func (o *TLAccountResetAuthorization) String() string {
	return tl.Pretty(o)
}

// TLAccountGetPassword represents func account.getPassword#548a30f5 = account.Password from Telegram
type TLAccountGetPassword struct {
}

func (o *TLAccountGetPassword) Cmd() uint32 {
	return TagAccountGetPassword
}

func (o *TLAccountGetPassword) ReadBareFrom(r *tl.Reader) {
}

func (o *TLAccountGetPassword) WriteBareTo(w *tl.Writer) {
}

func (o *TLAccountGetPassword) String() string {
	return tl.Pretty(o)
}

// TLAccountGetPasswordSettings represents func account.getPasswordSettings#bc8d11bb current_password_hash:bytes = account.PasswordSettings from Telegram
type TLAccountGetPasswordSettings struct {
	CurrentPasswordHash []byte // current_password_hash:bytes
}

func (o *TLAccountGetPasswordSettings) Cmd() uint32 {
	return TagAccountGetPasswordSettings
}

func (o *TLAccountGetPasswordSettings) ReadBareFrom(r *tl.Reader) {
	o.CurrentPasswordHash = r.ReadBlob()
}

func (o *TLAccountGetPasswordSettings) WriteBareTo(w *tl.Writer) {
	w.WriteBlob(o.CurrentPasswordHash)
}

func (o *TLAccountGetPasswordSettings) String() string {
	return tl.Pretty(o)
}

// TLAccountUpdatePasswordSettings represents func account.updatePasswordSettings#fa7c4b86 current_password_hash:bytes new_settings:account.PasswordInputSettings = Bool from Telegram
type TLAccountUpdatePasswordSettings struct {
	CurrentPasswordHash []byte                          // current_password_hash:bytes
	NewSettings         *TLAccountPasswordInputSettings // new_settings:account.PasswordInputSettings
}

func (o *TLAccountUpdatePasswordSettings) Cmd() uint32 {
	return TagAccountUpdatePasswordSettings
}

func (o *TLAccountUpdatePasswordSettings) ReadBareFrom(r *tl.Reader) {
	o.CurrentPasswordHash = r.ReadBlob()
	if cmd := r.ReadCmd(); cmd != TagAccountPasswordInputSettings {
		r.Fail(errors.New("expected: account.passwordInputSettings"))
	}
	o.NewSettings = new(TLAccountPasswordInputSettings)
	o.NewSettings.ReadBareFrom(r)
}

func (o *TLAccountUpdatePasswordSettings) WriteBareTo(w *tl.Writer) {
	w.WriteBlob(o.CurrentPasswordHash)
	w.WriteCmd(TagAccountPasswordInputSettings)
	o.NewSettings.WriteBareTo(w)
}

func (o *TLAccountUpdatePasswordSettings) String() string {
	return tl.Pretty(o)
}

// TLAccountSendConfirmPhoneCode represents func account.sendConfirmPhoneCode#1516d7bd flags:# flags.0?allow_flashcall:true hash:string flags.0?current_number:Bool = auth.SentCode from Telegram
type TLAccountSendConfirmPhoneCode struct {
	Flags          uint   // flags:#
	AllowFlashcall bool   // flags.0?allow_flashcall:true
	Hash           string // hash:string
	CurrentNumber  bool   // flags.0?current_number:Bool
}

func (o *TLAccountSendConfirmPhoneCode) Cmd() uint32 {
	return TagAccountSendConfirmPhoneCode
}

func (o *TLAccountSendConfirmPhoneCode) ReadBareFrom(r *tl.Reader) {
	o.Flags = uint(r.ReadUint32())
	o.AllowFlashcall = true
	o.Hash = r.ReadString()
	r.ExpectCmd(TagBoolTrue, TagBoolFalse)
	o.CurrentNumber = (r.ReadCmd() == TagBoolTrue)
}

func (o *TLAccountSendConfirmPhoneCode) WriteBareTo(w *tl.Writer) {
	w.WriteUint32(uint32(o.Flags))
	w.WriteString(o.Hash)
	if o.CurrentNumber {
		w.WriteCmd(TagBoolTrue)
	} else {
		w.WriteCmd(TagBoolFalse)
	}
}

func (o *TLAccountSendConfirmPhoneCode) String() string {
	return tl.Pretty(o)
}

// TLAccountConfirmPhone represents func account.confirmPhone#5f2178c3 phone_code_hash:string phone_code:string = Bool from Telegram
type TLAccountConfirmPhone struct {
	PhoneCodeHash string // phone_code_hash:string
	PhoneCode     string // phone_code:string
}

func (o *TLAccountConfirmPhone) Cmd() uint32 {
	return TagAccountConfirmPhone
}

func (o *TLAccountConfirmPhone) ReadBareFrom(r *tl.Reader) {
	o.PhoneCodeHash = r.ReadString()
	o.PhoneCode = r.ReadString()
}

func (o *TLAccountConfirmPhone) WriteBareTo(w *tl.Writer) {
	w.WriteString(o.PhoneCodeHash)
	w.WriteString(o.PhoneCode)
}

func (o *TLAccountConfirmPhone) String() string {
	return tl.Pretty(o)
}

// TLAccountGetTmpPassword represents func account.getTmpPassword#4a82327e password_hash:bytes period:int = account.TmpPassword from Telegram
type TLAccountGetTmpPassword struct {
	PasswordHash []byte // password_hash:bytes
	Period       int    // period:int
}

func (o *TLAccountGetTmpPassword) Cmd() uint32 {
	return TagAccountGetTmpPassword
}

func (o *TLAccountGetTmpPassword) ReadBareFrom(r *tl.Reader) {
	o.PasswordHash = r.ReadBlob()
	o.Period = r.ReadInt()
}

func (o *TLAccountGetTmpPassword) WriteBareTo(w *tl.Writer) {
	w.WriteBlob(o.PasswordHash)
	w.WriteInt(o.Period)
}

func (o *TLAccountGetTmpPassword) String() string {
	return tl.Pretty(o)
}

// TLUsersGetUsers represents func users.getUsers#0d91a548 id:Vector<InputUser> = Vector<User> from Telegram
type TLUsersGetUsers struct {
	ID []TLInputUserType // id:Vector<InputUser>
}

func (o *TLUsersGetUsers) Cmd() uint32 {
	return TagUsersGetUsers
}

func (o *TLUsersGetUsers) ReadBareFrom(r *tl.Reader) {
	if cmd := r.ReadCmd(); cmd != TagVector {
		r.Fail(errors.New("expected: vector"))
	}
	o.ID = make([]TLInputUserType, r.ReadInt())
	for i := 0; i < len(o.ID); i++ {
		o.ID[i] = Schema.ReadLimitedBoxedObjectFrom(r, TagInputUserEmpty, TagInputUserSelf, TagInputUser).(TLInputUserType)
	}
}

func (o *TLUsersGetUsers) WriteBareTo(w *tl.Writer) {
	w.WriteCmd(TagVector)
	w.WriteInt(len(o.ID))
	for i := 0; i < len(o.ID); i++ {
		w.WriteCmd(o.ID[i].Cmd())
		o.ID[i].WriteBareTo(w)
	}
}

func (o *TLUsersGetUsers) String() string {
	return tl.Pretty(o)
}

// TLUsersGetFullUser represents func users.getFullUser#ca30a5b1 id:InputUser = UserFull from Telegram
type TLUsersGetFullUser struct {
	ID TLInputUserType // id:InputUser
}

func (o *TLUsersGetFullUser) Cmd() uint32 {
	return TagUsersGetFullUser
}

func (o *TLUsersGetFullUser) ReadBareFrom(r *tl.Reader) {
	o.ID = Schema.ReadLimitedBoxedObjectFrom(r, TagInputUserEmpty, TagInputUserSelf, TagInputUser).(TLInputUserType)
}

func (o *TLUsersGetFullUser) WriteBareTo(w *tl.Writer) {
	w.WriteCmd(o.ID.Cmd())
	o.ID.WriteBareTo(w)
}

func (o *TLUsersGetFullUser) String() string {
	return tl.Pretty(o)
}

// TLContactsGetStatuses represents func contacts.getStatuses#c4a353ee = Vector<ContactStatus> from Telegram
type TLContactsGetStatuses struct {
}

func (o *TLContactsGetStatuses) Cmd() uint32 {
	return TagContactsGetStatuses
}

func (o *TLContactsGetStatuses) ReadBareFrom(r *tl.Reader) {
}

func (o *TLContactsGetStatuses) WriteBareTo(w *tl.Writer) {
}

func (o *TLContactsGetStatuses) String() string {
	return tl.Pretty(o)
}

// TLContactsGetContacts represents func contacts.getContacts#22c6aa08 hash:string = contacts.Contacts from Telegram
type TLContactsGetContacts struct {
	Hash string // hash:string
}

func (o *TLContactsGetContacts) Cmd() uint32 {
	return TagContactsGetContacts
}

func (o *TLContactsGetContacts) ReadBareFrom(r *tl.Reader) {
	o.Hash = r.ReadString()
}

func (o *TLContactsGetContacts) WriteBareTo(w *tl.Writer) {
	w.WriteString(o.Hash)
}

func (o *TLContactsGetContacts) String() string {
	return tl.Pretty(o)
}

// TLContactsImportContacts represents func contacts.importContacts#da30b32d contacts:Vector<InputContact> replace:Bool = contacts.ImportedContacts from Telegram
type TLContactsImportContacts struct {
	Contacts []*TLInputPhoneContact // contacts:Vector<InputContact>
	Replace  bool                   // replace:Bool
}

func (o *TLContactsImportContacts) Cmd() uint32 {
	return TagContactsImportContacts
}

func (o *TLContactsImportContacts) ReadBareFrom(r *tl.Reader) {
	if cmd := r.ReadCmd(); cmd != TagVector {
		r.Fail(errors.New("expected: vector"))
	}
	o.Contacts = make([]*TLInputPhoneContact, r.ReadInt())
	for i := 0; i < len(o.Contacts); i++ {
		if cmd := r.ReadCmd(); cmd != TagInputPhoneContact {
			r.Fail(errors.New("expected: inputPhoneContact"))
		}
		o.Contacts[i] = new(TLInputPhoneContact)
		o.Contacts[i].ReadBareFrom(r)
	}
	r.ExpectCmd(TagBoolTrue, TagBoolFalse)
	o.Replace = (r.ReadCmd() == TagBoolTrue)
}

func (o *TLContactsImportContacts) WriteBareTo(w *tl.Writer) {
	w.WriteCmd(TagVector)
	w.WriteInt(len(o.Contacts))
	for i := 0; i < len(o.Contacts); i++ {
		w.WriteCmd(TagInputPhoneContact)
		o.Contacts[i].WriteBareTo(w)
	}
	if o.Replace {
		w.WriteCmd(TagBoolTrue)
	} else {
		w.WriteCmd(TagBoolFalse)
	}
}

func (o *TLContactsImportContacts) String() string {
	return tl.Pretty(o)
}

// TLContactsDeleteContact represents func contacts.deleteContact#8e953744 id:InputUser = contacts.Link from Telegram
type TLContactsDeleteContact struct {
	ID TLInputUserType // id:InputUser
}

func (o *TLContactsDeleteContact) Cmd() uint32 {
	return TagContactsDeleteContact
}

func (o *TLContactsDeleteContact) ReadBareFrom(r *tl.Reader) {
	o.ID = Schema.ReadLimitedBoxedObjectFrom(r, TagInputUserEmpty, TagInputUserSelf, TagInputUser).(TLInputUserType)
}

func (o *TLContactsDeleteContact) WriteBareTo(w *tl.Writer) {
	w.WriteCmd(o.ID.Cmd())
	o.ID.WriteBareTo(w)
}

func (o *TLContactsDeleteContact) String() string {
	return tl.Pretty(o)
}

// TLContactsDeleteContacts represents func contacts.deleteContacts#59ab389e id:Vector<InputUser> = Bool from Telegram
type TLContactsDeleteContacts struct {
	ID []TLInputUserType // id:Vector<InputUser>
}

func (o *TLContactsDeleteContacts) Cmd() uint32 {
	return TagContactsDeleteContacts
}

func (o *TLContactsDeleteContacts) ReadBareFrom(r *tl.Reader) {
	if cmd := r.ReadCmd(); cmd != TagVector {
		r.Fail(errors.New("expected: vector"))
	}
	o.ID = make([]TLInputUserType, r.ReadInt())
	for i := 0; i < len(o.ID); i++ {
		o.ID[i] = Schema.ReadLimitedBoxedObjectFrom(r, TagInputUserEmpty, TagInputUserSelf, TagInputUser).(TLInputUserType)
	}
}

func (o *TLContactsDeleteContacts) WriteBareTo(w *tl.Writer) {
	w.WriteCmd(TagVector)
	w.WriteInt(len(o.ID))
	for i := 0; i < len(o.ID); i++ {
		w.WriteCmd(o.ID[i].Cmd())
		o.ID[i].WriteBareTo(w)
	}
}

func (o *TLContactsDeleteContacts) String() string {
	return tl.Pretty(o)
}

// TLContactsBlock represents func contacts.block#332b49fc id:InputUser = Bool from Telegram
type TLContactsBlock struct {
	ID TLInputUserType // id:InputUser
}

func (o *TLContactsBlock) Cmd() uint32 {
	return TagContactsBlock
}

func (o *TLContactsBlock) ReadBareFrom(r *tl.Reader) {
	o.ID = Schema.ReadLimitedBoxedObjectFrom(r, TagInputUserEmpty, TagInputUserSelf, TagInputUser).(TLInputUserType)
}

func (o *TLContactsBlock) WriteBareTo(w *tl.Writer) {
	w.WriteCmd(o.ID.Cmd())
	o.ID.WriteBareTo(w)
}

func (o *TLContactsBlock) String() string {
	return tl.Pretty(o)
}

// TLContactsUnblock represents func contacts.unblock#e54100bd id:InputUser = Bool from Telegram
type TLContactsUnblock struct {
	ID TLInputUserType // id:InputUser
}

func (o *TLContactsUnblock) Cmd() uint32 {
	return TagContactsUnblock
}

func (o *TLContactsUnblock) ReadBareFrom(r *tl.Reader) {
	o.ID = Schema.ReadLimitedBoxedObjectFrom(r, TagInputUserEmpty, TagInputUserSelf, TagInputUser).(TLInputUserType)
}

func (o *TLContactsUnblock) WriteBareTo(w *tl.Writer) {
	w.WriteCmd(o.ID.Cmd())
	o.ID.WriteBareTo(w)
}

func (o *TLContactsUnblock) String() string {
	return tl.Pretty(o)
}

// TLContactsGetBlocked represents func contacts.getBlocked#f57c350f offset:int limit:int = contacts.Blocked from Telegram
type TLContactsGetBlocked struct {
	Offset int // offset:int
	Limit  int // limit:int
}

func (o *TLContactsGetBlocked) Cmd() uint32 {
	return TagContactsGetBlocked
}

func (o *TLContactsGetBlocked) ReadBareFrom(r *tl.Reader) {
	o.Offset = r.ReadInt()
	o.Limit = r.ReadInt()
}

func (o *TLContactsGetBlocked) WriteBareTo(w *tl.Writer) {
	w.WriteInt(o.Offset)
	w.WriteInt(o.Limit)
}

func (o *TLContactsGetBlocked) String() string {
	return tl.Pretty(o)
}

// TLContactsExportCard represents func contacts.exportCard#84e53737 = Vector<int> from Telegram
type TLContactsExportCard struct {
}

func (o *TLContactsExportCard) Cmd() uint32 {
	return TagContactsExportCard
}

func (o *TLContactsExportCard) ReadBareFrom(r *tl.Reader) {
}

func (o *TLContactsExportCard) WriteBareTo(w *tl.Writer) {
}

func (o *TLContactsExportCard) String() string {
	return tl.Pretty(o)
}

// TLContactsImportCard represents func contacts.importCard#4fe196fe export_card:Vector<int> = User from Telegram
type TLContactsImportCard struct {
	ExportCard []int // export_card:Vector<int>
}

func (o *TLContactsImportCard) Cmd() uint32 {
	return TagContactsImportCard
}

func (o *TLContactsImportCard) ReadBareFrom(r *tl.Reader) {
	if cmd := r.ReadCmd(); cmd != TagVector {
		r.Fail(errors.New("expected: vector"))
	}
	o.ExportCard = make([]int, r.ReadInt())
	for i := 0; i < len(o.ExportCard); i++ {
		o.ExportCard[i] = r.ReadInt()
	}
}

func (o *TLContactsImportCard) WriteBareTo(w *tl.Writer) {
	w.WriteCmd(TagVector)
	w.WriteInt(len(o.ExportCard))
	for i := 0; i < len(o.ExportCard); i++ {
		w.WriteInt(o.ExportCard[i])
	}
}

func (o *TLContactsImportCard) String() string {
	return tl.Pretty(o)
}

// TLContactsSearch represents func contacts.search#11f812d8 q:string limit:int = contacts.Found from Telegram
type TLContactsSearch struct {
	Q     string // q:string
	Limit int    // limit:int
}

func (o *TLContactsSearch) Cmd() uint32 {
	return TagContactsSearch
}

func (o *TLContactsSearch) ReadBareFrom(r *tl.Reader) {
	o.Q = r.ReadString()
	o.Limit = r.ReadInt()
}

func (o *TLContactsSearch) WriteBareTo(w *tl.Writer) {
	w.WriteString(o.Q)
	w.WriteInt(o.Limit)
}

func (o *TLContactsSearch) String() string {
	return tl.Pretty(o)
}

// TLContactsResolveUsername represents func contacts.resolveUsername#f93ccba3 username:string = contacts.ResolvedPeer from Telegram
type TLContactsResolveUsername struct {
	Username string // username:string
}

func (o *TLContactsResolveUsername) Cmd() uint32 {
	return TagContactsResolveUsername
}

func (o *TLContactsResolveUsername) ReadBareFrom(r *tl.Reader) {
	o.Username = r.ReadString()
}

func (o *TLContactsResolveUsername) WriteBareTo(w *tl.Writer) {
	w.WriteString(o.Username)
}

func (o *TLContactsResolveUsername) String() string {
	return tl.Pretty(o)
}

// TLContactsGetTopPeers represents func contacts.getTopPeers#d4982db5 flags:# flags.0?correspondents:true flags.1?bots_pm:true flags.2?bots_inline:true flags.10?groups:true flags.15?channels:true offset:int limit:int hash:int = contacts.TopPeers from Telegram
type TLContactsGetTopPeers struct {
	Flags          uint // flags:#
	Correspondents bool // flags.0?correspondents:true
	BotsPm         bool // flags.1?bots_pm:true
	BotsInline     bool // flags.2?bots_inline:true
	Groups         bool // flags.10?groups:true
	Channels       bool // flags.15?channels:true
	Offset         int  // offset:int
	Limit          int  // limit:int
	Hash           int  // hash:int
}

func (o *TLContactsGetTopPeers) Cmd() uint32 {
	return TagContactsGetTopPeers
}

func (o *TLContactsGetTopPeers) ReadBareFrom(r *tl.Reader) {
	o.Flags = uint(r.ReadUint32())
	o.Correspondents = true
	o.BotsPm = true
	o.BotsInline = true
	o.Groups = true
	o.Channels = true
	o.Offset = r.ReadInt()
	o.Limit = r.ReadInt()
	o.Hash = r.ReadInt()
}

func (o *TLContactsGetTopPeers) WriteBareTo(w *tl.Writer) {
	w.WriteUint32(uint32(o.Flags))
	w.WriteInt(o.Offset)
	w.WriteInt(o.Limit)
	w.WriteInt(o.Hash)
}

func (o *TLContactsGetTopPeers) String() string {
	return tl.Pretty(o)
}

// TLContactsResetTopPeerRating represents func contacts.resetTopPeerRating#1ae373ac category:TopPeerCategory peer:InputPeer = Bool from Telegram
type TLContactsResetTopPeerRating struct {
	Category TLTopPeerCategoryType // category:TopPeerCategory
	Peer     TLInputPeerType       // peer:InputPeer
}

func (o *TLContactsResetTopPeerRating) Cmd() uint32 {
	return TagContactsResetTopPeerRating
}

func (o *TLContactsResetTopPeerRating) ReadBareFrom(r *tl.Reader) {
	o.Category = Schema.ReadLimitedBoxedObjectFrom(r, TagTopPeerCategoryBotsPM, TagTopPeerCategoryBotsInline, TagTopPeerCategoryCorrespondents, TagTopPeerCategoryGroups, TagTopPeerCategoryChannels).(TLTopPeerCategoryType)
	o.Peer = Schema.ReadLimitedBoxedObjectFrom(r, TagInputPeerEmpty, TagInputPeerSelf, TagInputPeerChat, TagInputPeerUser, TagInputPeerChannel).(TLInputPeerType)
}

func (o *TLContactsResetTopPeerRating) WriteBareTo(w *tl.Writer) {
	w.WriteCmd(o.Category.Cmd())
	o.Category.WriteBareTo(w)
	w.WriteCmd(o.Peer.Cmd())
	o.Peer.WriteBareTo(w)
}

func (o *TLContactsResetTopPeerRating) String() string {
	return tl.Pretty(o)
}

// TLMessagesGetMessages represents func messages.getMessages#4222fa74 id:Vector<int> = messages.Messages from Telegram
type TLMessagesGetMessages struct {
	ID []int // id:Vector<int>
}

func (o *TLMessagesGetMessages) Cmd() uint32 {
	return TagMessagesGetMessages
}

func (o *TLMessagesGetMessages) ReadBareFrom(r *tl.Reader) {
	if cmd := r.ReadCmd(); cmd != TagVector {
		r.Fail(errors.New("expected: vector"))
	}
	o.ID = make([]int, r.ReadInt())
	for i := 0; i < len(o.ID); i++ {
		o.ID[i] = r.ReadInt()
	}
}

func (o *TLMessagesGetMessages) WriteBareTo(w *tl.Writer) {
	w.WriteCmd(TagVector)
	w.WriteInt(len(o.ID))
	for i := 0; i < len(o.ID); i++ {
		w.WriteInt(o.ID[i])
	}
}

func (o *TLMessagesGetMessages) String() string {
	return tl.Pretty(o)
}

// TLMessagesGetDialogs represents func messages.getDialogs#191ba9c5 flags:# flags.0?exclude_pinned:true offset_date:int offset_id:int offset_peer:InputPeer limit:int = messages.Dialogs from Telegram
type TLMessagesGetDialogs struct {
	Flags         uint            // flags:#
	ExcludePinned bool            // flags.0?exclude_pinned:true
	OffsetDate    int             // offset_date:int
	OffsetID      int             // offset_id:int
	OffsetPeer    TLInputPeerType // offset_peer:InputPeer
	Limit         int             // limit:int
}

func (o *TLMessagesGetDialogs) Cmd() uint32 {
	return TagMessagesGetDialogs
}

func (o *TLMessagesGetDialogs) ReadBareFrom(r *tl.Reader) {
	o.Flags = uint(r.ReadUint32())
	o.ExcludePinned = true
	o.OffsetDate = r.ReadInt()
	o.OffsetID = r.ReadInt()
	o.OffsetPeer = Schema.ReadLimitedBoxedObjectFrom(r, TagInputPeerEmpty, TagInputPeerSelf, TagInputPeerChat, TagInputPeerUser, TagInputPeerChannel).(TLInputPeerType)
	o.Limit = r.ReadInt()
}

func (o *TLMessagesGetDialogs) WriteBareTo(w *tl.Writer) {
	w.WriteUint32(uint32(o.Flags))
	w.WriteInt(o.OffsetDate)
	w.WriteInt(o.OffsetID)
	w.WriteCmd(o.OffsetPeer.Cmd())
	o.OffsetPeer.WriteBareTo(w)
	w.WriteInt(o.Limit)
}

func (o *TLMessagesGetDialogs) String() string {
	return tl.Pretty(o)
}

// TLMessagesGetHistory represents func messages.getHistory#afa92846 peer:InputPeer offset_id:int offset_date:int add_offset:int limit:int max_id:int min_id:int = messages.Messages from Telegram
type TLMessagesGetHistory struct {
	Peer       TLInputPeerType // peer:InputPeer
	OffsetID   int             // offset_id:int
	OffsetDate int             // offset_date:int
	AddOffset  int             // add_offset:int
	Limit      int             // limit:int
	MaxID      int             // max_id:int
	MinID      int             // min_id:int
}

func (o *TLMessagesGetHistory) Cmd() uint32 {
	return TagMessagesGetHistory
}

func (o *TLMessagesGetHistory) ReadBareFrom(r *tl.Reader) {
	o.Peer = Schema.ReadLimitedBoxedObjectFrom(r, TagInputPeerEmpty, TagInputPeerSelf, TagInputPeerChat, TagInputPeerUser, TagInputPeerChannel).(TLInputPeerType)
	o.OffsetID = r.ReadInt()
	o.OffsetDate = r.ReadInt()
	o.AddOffset = r.ReadInt()
	o.Limit = r.ReadInt()
	o.MaxID = r.ReadInt()
	o.MinID = r.ReadInt()
}

func (o *TLMessagesGetHistory) WriteBareTo(w *tl.Writer) {
	w.WriteCmd(o.Peer.Cmd())
	o.Peer.WriteBareTo(w)
	w.WriteInt(o.OffsetID)
	w.WriteInt(o.OffsetDate)
	w.WriteInt(o.AddOffset)
	w.WriteInt(o.Limit)
	w.WriteInt(o.MaxID)
	w.WriteInt(o.MinID)
}

func (o *TLMessagesGetHistory) String() string {
	return tl.Pretty(o)
}

// TLMessagesSearch represents func messages.search#d4569248 flags:# peer:InputPeer q:string filter:MessagesFilter min_date:int max_date:int offset:int max_id:int limit:int = messages.Messages from Telegram
type TLMessagesSearch struct {
	Flags   uint                 // flags:#
	Peer    TLInputPeerType      // peer:InputPeer
	Q       string               // q:string
	Filter  TLMessagesFilterType // filter:MessagesFilter
	MinDate int                  // min_date:int
	MaxDate int                  // max_date:int
	Offset  int                  // offset:int
	MaxID   int                  // max_id:int
	Limit   int                  // limit:int
}

func (o *TLMessagesSearch) Cmd() uint32 {
	return TagMessagesSearch
}

func (o *TLMessagesSearch) ReadBareFrom(r *tl.Reader) {
	o.Flags = uint(r.ReadUint32())
	o.Peer = Schema.ReadLimitedBoxedObjectFrom(r, TagInputPeerEmpty, TagInputPeerSelf, TagInputPeerChat, TagInputPeerUser, TagInputPeerChannel).(TLInputPeerType)
	o.Q = r.ReadString()
	o.Filter = Schema.ReadLimitedBoxedObjectFrom(r, TagInputMessagesFilterEmpty, TagInputMessagesFilterPhotos, TagInputMessagesFilterVideo, TagInputMessagesFilterPhotoVideo, TagInputMessagesFilterPhotoVideoDocuments, TagInputMessagesFilterDocument, TagInputMessagesFilterUrl, TagInputMessagesFilterGif, TagInputMessagesFilterVoice, TagInputMessagesFilterMusic, TagInputMessagesFilterChatPhotos, TagInputMessagesFilterPhoneCalls).(TLMessagesFilterType)
	o.MinDate = r.ReadInt()
	o.MaxDate = r.ReadInt()
	o.Offset = r.ReadInt()
	o.MaxID = r.ReadInt()
	o.Limit = r.ReadInt()
}

func (o *TLMessagesSearch) WriteBareTo(w *tl.Writer) {
	w.WriteUint32(uint32(o.Flags))
	w.WriteCmd(o.Peer.Cmd())
	o.Peer.WriteBareTo(w)
	w.WriteString(o.Q)
	w.WriteCmd(o.Filter.Cmd())
	o.Filter.WriteBareTo(w)
	w.WriteInt(o.MinDate)
	w.WriteInt(o.MaxDate)
	w.WriteInt(o.Offset)
	w.WriteInt(o.MaxID)
	w.WriteInt(o.Limit)
}

func (o *TLMessagesSearch) String() string {
	return tl.Pretty(o)
}

// TLMessagesReadHistory represents func messages.readHistory#0e306d3a peer:InputPeer max_id:int = messages.AffectedMessages from Telegram
type TLMessagesReadHistory struct {
	Peer  TLInputPeerType // peer:InputPeer
	MaxID int             // max_id:int
}

func (o *TLMessagesReadHistory) Cmd() uint32 {
	return TagMessagesReadHistory
}

func (o *TLMessagesReadHistory) ReadBareFrom(r *tl.Reader) {
	o.Peer = Schema.ReadLimitedBoxedObjectFrom(r, TagInputPeerEmpty, TagInputPeerSelf, TagInputPeerChat, TagInputPeerUser, TagInputPeerChannel).(TLInputPeerType)
	o.MaxID = r.ReadInt()
}

func (o *TLMessagesReadHistory) WriteBareTo(w *tl.Writer) {
	w.WriteCmd(o.Peer.Cmd())
	o.Peer.WriteBareTo(w)
	w.WriteInt(o.MaxID)
}

func (o *TLMessagesReadHistory) String() string {
	return tl.Pretty(o)
}

// TLMessagesDeleteHistory represents func messages.deleteHistory#1c015b09 flags:# flags.0?just_clear:true peer:InputPeer max_id:int = messages.AffectedHistory from Telegram
type TLMessagesDeleteHistory struct {
	Flags     uint            // flags:#
	JustClear bool            // flags.0?just_clear:true
	Peer      TLInputPeerType // peer:InputPeer
	MaxID     int             // max_id:int
}

func (o *TLMessagesDeleteHistory) Cmd() uint32 {
	return TagMessagesDeleteHistory
}

func (o *TLMessagesDeleteHistory) ReadBareFrom(r *tl.Reader) {
	o.Flags = uint(r.ReadUint32())
	o.JustClear = true
	o.Peer = Schema.ReadLimitedBoxedObjectFrom(r, TagInputPeerEmpty, TagInputPeerSelf, TagInputPeerChat, TagInputPeerUser, TagInputPeerChannel).(TLInputPeerType)
	o.MaxID = r.ReadInt()
}

func (o *TLMessagesDeleteHistory) WriteBareTo(w *tl.Writer) {
	w.WriteUint32(uint32(o.Flags))
	w.WriteCmd(o.Peer.Cmd())
	o.Peer.WriteBareTo(w)
	w.WriteInt(o.MaxID)
}

func (o *TLMessagesDeleteHistory) String() string {
	return tl.Pretty(o)
}

// TLMessagesDeleteMessages represents func messages.deleteMessages#e58e95d2 flags:# flags.0?revoke:true id:Vector<int> = messages.AffectedMessages from Telegram
type TLMessagesDeleteMessages struct {
	Flags  uint  // flags:#
	Revoke bool  // flags.0?revoke:true
	ID     []int // id:Vector<int>
}

func (o *TLMessagesDeleteMessages) Cmd() uint32 {
	return TagMessagesDeleteMessages
}

func (o *TLMessagesDeleteMessages) ReadBareFrom(r *tl.Reader) {
	o.Flags = uint(r.ReadUint32())
	o.Revoke = true
	if cmd := r.ReadCmd(); cmd != TagVector {
		r.Fail(errors.New("expected: vector"))
	}
	o.ID = make([]int, r.ReadInt())
	for i := 0; i < len(o.ID); i++ {
		o.ID[i] = r.ReadInt()
	}
}

func (o *TLMessagesDeleteMessages) WriteBareTo(w *tl.Writer) {
	w.WriteUint32(uint32(o.Flags))
	w.WriteCmd(TagVector)
	w.WriteInt(len(o.ID))
	for i := 0; i < len(o.ID); i++ {
		w.WriteInt(o.ID[i])
	}
}

func (o *TLMessagesDeleteMessages) String() string {
	return tl.Pretty(o)
}

// TLMessagesReceivedMessages represents func messages.receivedMessages#05a954c0 max_id:int = Vector<ReceivedNotifyMessage> from Telegram
type TLMessagesReceivedMessages struct {
	MaxID int // max_id:int
}

func (o *TLMessagesReceivedMessages) Cmd() uint32 {
	return TagMessagesReceivedMessages
}

func (o *TLMessagesReceivedMessages) ReadBareFrom(r *tl.Reader) {
	o.MaxID = r.ReadInt()
}

func (o *TLMessagesReceivedMessages) WriteBareTo(w *tl.Writer) {
	w.WriteInt(o.MaxID)
}

func (o *TLMessagesReceivedMessages) String() string {
	return tl.Pretty(o)
}

// TLMessagesSetTyping represents func messages.setTyping#a3825e50 peer:InputPeer action:SendMessageAction = Bool from Telegram
type TLMessagesSetTyping struct {
	Peer   TLInputPeerType         // peer:InputPeer
	Action TLSendMessageActionType // action:SendMessageAction
}

func (o *TLMessagesSetTyping) Cmd() uint32 {
	return TagMessagesSetTyping
}

func (o *TLMessagesSetTyping) ReadBareFrom(r *tl.Reader) {
	o.Peer = Schema.ReadLimitedBoxedObjectFrom(r, TagInputPeerEmpty, TagInputPeerSelf, TagInputPeerChat, TagInputPeerUser, TagInputPeerChannel).(TLInputPeerType)
	o.Action = Schema.ReadLimitedBoxedObjectFrom(r, TagSendMessageTypingAction, TagSendMessageCancelAction, TagSendMessageRecordVideoAction, TagSendMessageUploadVideoAction, TagSendMessageRecordAudioAction, TagSendMessageUploadAudioAction, TagSendMessageUploadPhotoAction, TagSendMessageUploadDocumentAction, TagSendMessageGeoLocationAction, TagSendMessageChooseContactAction, TagSendMessageGamePlayAction).(TLSendMessageActionType)
}

func (o *TLMessagesSetTyping) WriteBareTo(w *tl.Writer) {
	w.WriteCmd(o.Peer.Cmd())
	o.Peer.WriteBareTo(w)
	w.WriteCmd(o.Action.Cmd())
	o.Action.WriteBareTo(w)
}

func (o *TLMessagesSetTyping) String() string {
	return tl.Pretty(o)
}

// TLMessagesSendMessage represents func messages.sendMessage#fa88427a flags:# flags.1?no_webpage:true flags.5?silent:true flags.6?background:true flags.7?clear_draft:true peer:InputPeer flags.0?reply_to_msg_id:int message:string random_id:long flags.2?reply_markup:ReplyMarkup flags.3?entities:Vector<MessageEntity> = Updates from Telegram
type TLMessagesSendMessage struct {
	Flags        uint                  // flags:#
	NoWebpage    bool                  // flags.1?no_webpage:true
	Silent       bool                  // flags.5?silent:true
	Background   bool                  // flags.6?background:true
	ClearDraft   bool                  // flags.7?clear_draft:true
	Peer         TLInputPeerType       // peer:InputPeer
	ReplyToMsgID int                   // flags.0?reply_to_msg_id:int
	Message      string                // message:string
	RandomID     uint64                // random_id:long
	ReplyMarkup  TLReplyMarkupType     // flags.2?reply_markup:ReplyMarkup
	Entities     []TLMessageEntityType // flags.3?entities:Vector<MessageEntity>
}

func (o *TLMessagesSendMessage) Cmd() uint32 {
	return TagMessagesSendMessage
}

func (o *TLMessagesSendMessage) ReadBareFrom(r *tl.Reader) {
	o.Flags = uint(r.ReadUint32())
	o.NoWebpage = true
	o.Silent = true
	o.Background = true
	o.ClearDraft = true
	o.Peer = Schema.ReadLimitedBoxedObjectFrom(r, TagInputPeerEmpty, TagInputPeerSelf, TagInputPeerChat, TagInputPeerUser, TagInputPeerChannel).(TLInputPeerType)
	o.ReplyToMsgID = r.ReadInt()
	o.Message = r.ReadString()
	o.RandomID = r.ReadUint64()
	o.ReplyMarkup = Schema.ReadLimitedBoxedObjectFrom(r, TagReplyKeyboardHide, TagReplyKeyboardForceReply, TagReplyKeyboardMarkup, TagReplyInlineMarkup).(TLReplyMarkupType)
	if cmd := r.ReadCmd(); cmd != TagVector {
		r.Fail(errors.New("expected: vector"))
	}
	o.Entities = make([]TLMessageEntityType, r.ReadInt())
	for i := 0; i < len(o.Entities); i++ {
		o.Entities[i] = Schema.ReadLimitedBoxedObjectFrom(r, TagMessageEntityUnknown, TagMessageEntityMention, TagMessageEntityHashtag, TagMessageEntityBotCommand, TagMessageEntityUrl, TagMessageEntityEmail, TagMessageEntityBold, TagMessageEntityItalic, TagMessageEntityCode, TagMessageEntityPre, TagMessageEntityTextUrl, TagMessageEntityMentionName, TagInputMessageEntityMentionName).(TLMessageEntityType)
	}
}

func (o *TLMessagesSendMessage) WriteBareTo(w *tl.Writer) {
	w.WriteUint32(uint32(o.Flags))
	w.WriteCmd(o.Peer.Cmd())
	o.Peer.WriteBareTo(w)
	w.WriteInt(o.ReplyToMsgID)
	w.WriteString(o.Message)
	w.WriteUint64(o.RandomID)
	w.WriteCmd(o.ReplyMarkup.Cmd())
	o.ReplyMarkup.WriteBareTo(w)
	w.WriteCmd(TagVector)
	w.WriteInt(len(o.Entities))
	for i := 0; i < len(o.Entities); i++ {
		w.WriteCmd(o.Entities[i].Cmd())
		o.Entities[i].WriteBareTo(w)
	}
}

func (o *TLMessagesSendMessage) String() string {
	return tl.Pretty(o)
}

// TLMessagesSendMedia represents func messages.sendMedia#c8f16791 flags:# flags.5?silent:true flags.6?background:true flags.7?clear_draft:true peer:InputPeer flags.0?reply_to_msg_id:int media:InputMedia random_id:long flags.2?reply_markup:ReplyMarkup = Updates from Telegram
type TLMessagesSendMedia struct {
	Flags        uint              // flags:#
	Silent       bool              // flags.5?silent:true
	Background   bool              // flags.6?background:true
	ClearDraft   bool              // flags.7?clear_draft:true
	Peer         TLInputPeerType   // peer:InputPeer
	ReplyToMsgID int               // flags.0?reply_to_msg_id:int
	Media        TLInputMediaType  // media:InputMedia
	RandomID     uint64            // random_id:long
	ReplyMarkup  TLReplyMarkupType // flags.2?reply_markup:ReplyMarkup
}

func (o *TLMessagesSendMedia) Cmd() uint32 {
	return TagMessagesSendMedia
}

func (o *TLMessagesSendMedia) ReadBareFrom(r *tl.Reader) {
	o.Flags = uint(r.ReadUint32())
	o.Silent = true
	o.Background = true
	o.ClearDraft = true
	o.Peer = Schema.ReadLimitedBoxedObjectFrom(r, TagInputPeerEmpty, TagInputPeerSelf, TagInputPeerChat, TagInputPeerUser, TagInputPeerChannel).(TLInputPeerType)
	o.ReplyToMsgID = r.ReadInt()
	o.Media = Schema.ReadLimitedBoxedObjectFrom(r, TagInputMediaEmpty, TagInputMediaUploadedPhoto, TagInputMediaPhoto, TagInputMediaGeoPoint, TagInputMediaContact, TagInputMediaUploadedDocument, TagInputMediaUploadedThumbDocument, TagInputMediaDocument, TagInputMediaVenue, TagInputMediaGifExternal, TagInputMediaPhotoExternal, TagInputMediaDocumentExternal, TagInputMediaGame, TagInputMediaInvoice).(TLInputMediaType)
	o.RandomID = r.ReadUint64()
	o.ReplyMarkup = Schema.ReadLimitedBoxedObjectFrom(r, TagReplyKeyboardHide, TagReplyKeyboardForceReply, TagReplyKeyboardMarkup, TagReplyInlineMarkup).(TLReplyMarkupType)
}

func (o *TLMessagesSendMedia) WriteBareTo(w *tl.Writer) {
	w.WriteUint32(uint32(o.Flags))
	w.WriteCmd(o.Peer.Cmd())
	o.Peer.WriteBareTo(w)
	w.WriteInt(o.ReplyToMsgID)
	w.WriteCmd(o.Media.Cmd())
	o.Media.WriteBareTo(w)
	w.WriteUint64(o.RandomID)
	w.WriteCmd(o.ReplyMarkup.Cmd())
	o.ReplyMarkup.WriteBareTo(w)
}

func (o *TLMessagesSendMedia) String() string {
	return tl.Pretty(o)
}

// TLMessagesForwardMessages represents func messages.forwardMessages#708e0195 flags:# flags.5?silent:true flags.6?background:true flags.8?with_my_score:true from_peer:InputPeer id:Vector<int> random_id:Vector<long> to_peer:InputPeer = Updates from Telegram
type TLMessagesForwardMessages struct {
	Flags       uint            // flags:#
	Silent      bool            // flags.5?silent:true
	Background  bool            // flags.6?background:true
	WithMyScore bool            // flags.8?with_my_score:true
	FromPeer    TLInputPeerType // from_peer:InputPeer
	ID          []int           // id:Vector<int>
	RandomID    []uint64        // random_id:Vector<long>
	ToPeer      TLInputPeerType // to_peer:InputPeer
}

func (o *TLMessagesForwardMessages) Cmd() uint32 {
	return TagMessagesForwardMessages
}

func (o *TLMessagesForwardMessages) ReadBareFrom(r *tl.Reader) {
	o.Flags = uint(r.ReadUint32())
	o.Silent = true
	o.Background = true
	o.WithMyScore = true
	o.FromPeer = Schema.ReadLimitedBoxedObjectFrom(r, TagInputPeerEmpty, TagInputPeerSelf, TagInputPeerChat, TagInputPeerUser, TagInputPeerChannel).(TLInputPeerType)
	if cmd := r.ReadCmd(); cmd != TagVector {
		r.Fail(errors.New("expected: vector"))
	}
	o.ID = make([]int, r.ReadInt())
	for i := 0; i < len(o.ID); i++ {
		o.ID[i] = r.ReadInt()
	}
	if cmd := r.ReadCmd(); cmd != TagVector {
		r.Fail(errors.New("expected: vector"))
	}
	o.RandomID = make([]uint64, r.ReadInt())
	for i := 0; i < len(o.RandomID); i++ {
		o.RandomID[i] = r.ReadUint64()
	}
	o.ToPeer = Schema.ReadLimitedBoxedObjectFrom(r, TagInputPeerEmpty, TagInputPeerSelf, TagInputPeerChat, TagInputPeerUser, TagInputPeerChannel).(TLInputPeerType)
}

func (o *TLMessagesForwardMessages) WriteBareTo(w *tl.Writer) {
	w.WriteUint32(uint32(o.Flags))
	w.WriteCmd(o.FromPeer.Cmd())
	o.FromPeer.WriteBareTo(w)
	w.WriteCmd(TagVector)
	w.WriteInt(len(o.ID))
	for i := 0; i < len(o.ID); i++ {
		w.WriteInt(o.ID[i])
	}
	w.WriteCmd(TagVector)
	w.WriteInt(len(o.RandomID))
	for i := 0; i < len(o.RandomID); i++ {
		w.WriteUint64(o.RandomID[i])
	}
	w.WriteCmd(o.ToPeer.Cmd())
	o.ToPeer.WriteBareTo(w)
}

func (o *TLMessagesForwardMessages) String() string {
	return tl.Pretty(o)
}

// TLMessagesReportSpam represents func messages.reportSpam#cf1592db peer:InputPeer = Bool from Telegram
type TLMessagesReportSpam struct {
	Peer TLInputPeerType // peer:InputPeer
}

func (o *TLMessagesReportSpam) Cmd() uint32 {
	return TagMessagesReportSpam
}

func (o *TLMessagesReportSpam) ReadBareFrom(r *tl.Reader) {
	o.Peer = Schema.ReadLimitedBoxedObjectFrom(r, TagInputPeerEmpty, TagInputPeerSelf, TagInputPeerChat, TagInputPeerUser, TagInputPeerChannel).(TLInputPeerType)
}

func (o *TLMessagesReportSpam) WriteBareTo(w *tl.Writer) {
	w.WriteCmd(o.Peer.Cmd())
	o.Peer.WriteBareTo(w)
}

func (o *TLMessagesReportSpam) String() string {
	return tl.Pretty(o)
}

// TLMessagesHideReportSpam represents func messages.hideReportSpam#a8f1709b peer:InputPeer = Bool from Telegram
type TLMessagesHideReportSpam struct {
	Peer TLInputPeerType // peer:InputPeer
}

func (o *TLMessagesHideReportSpam) Cmd() uint32 {
	return TagMessagesHideReportSpam
}

func (o *TLMessagesHideReportSpam) ReadBareFrom(r *tl.Reader) {
	o.Peer = Schema.ReadLimitedBoxedObjectFrom(r, TagInputPeerEmpty, TagInputPeerSelf, TagInputPeerChat, TagInputPeerUser, TagInputPeerChannel).(TLInputPeerType)
}

func (o *TLMessagesHideReportSpam) WriteBareTo(w *tl.Writer) {
	w.WriteCmd(o.Peer.Cmd())
	o.Peer.WriteBareTo(w)
}

func (o *TLMessagesHideReportSpam) String() string {
	return tl.Pretty(o)
}

// TLMessagesGetPeerSettings represents func messages.getPeerSettings#3672e09c peer:InputPeer = PeerSettings from Telegram
type TLMessagesGetPeerSettings struct {
	Peer TLInputPeerType // peer:InputPeer
}

func (o *TLMessagesGetPeerSettings) Cmd() uint32 {
	return TagMessagesGetPeerSettings
}

func (o *TLMessagesGetPeerSettings) ReadBareFrom(r *tl.Reader) {
	o.Peer = Schema.ReadLimitedBoxedObjectFrom(r, TagInputPeerEmpty, TagInputPeerSelf, TagInputPeerChat, TagInputPeerUser, TagInputPeerChannel).(TLInputPeerType)
}

func (o *TLMessagesGetPeerSettings) WriteBareTo(w *tl.Writer) {
	w.WriteCmd(o.Peer.Cmd())
	o.Peer.WriteBareTo(w)
}

func (o *TLMessagesGetPeerSettings) String() string {
	return tl.Pretty(o)
}

// TLMessagesGetChats represents func messages.getChats#3c6aa187 id:Vector<int> = messages.Chats from Telegram
type TLMessagesGetChats struct {
	ID []int // id:Vector<int>
}

func (o *TLMessagesGetChats) Cmd() uint32 {
	return TagMessagesGetChats
}

func (o *TLMessagesGetChats) ReadBareFrom(r *tl.Reader) {
	if cmd := r.ReadCmd(); cmd != TagVector {
		r.Fail(errors.New("expected: vector"))
	}
	o.ID = make([]int, r.ReadInt())
	for i := 0; i < len(o.ID); i++ {
		o.ID[i] = r.ReadInt()
	}
}

func (o *TLMessagesGetChats) WriteBareTo(w *tl.Writer) {
	w.WriteCmd(TagVector)
	w.WriteInt(len(o.ID))
	for i := 0; i < len(o.ID); i++ {
		w.WriteInt(o.ID[i])
	}
}

func (o *TLMessagesGetChats) String() string {
	return tl.Pretty(o)
}

// TLMessagesGetFullChat represents func messages.getFullChat#3b831c66 chat_id:int = messages.ChatFull from Telegram
type TLMessagesGetFullChat struct {
	ChatID int // chat_id:int
}

func (o *TLMessagesGetFullChat) Cmd() uint32 {
	return TagMessagesGetFullChat
}

func (o *TLMessagesGetFullChat) ReadBareFrom(r *tl.Reader) {
	o.ChatID = r.ReadInt()
}

func (o *TLMessagesGetFullChat) WriteBareTo(w *tl.Writer) {
	w.WriteInt(o.ChatID)
}

func (o *TLMessagesGetFullChat) String() string {
	return tl.Pretty(o)
}

// TLMessagesEditChatTitle represents func messages.editChatTitle#dc452855 chat_id:int title:string = Updates from Telegram
type TLMessagesEditChatTitle struct {
	ChatID int    // chat_id:int
	Title  string // title:string
}

func (o *TLMessagesEditChatTitle) Cmd() uint32 {
	return TagMessagesEditChatTitle
}

func (o *TLMessagesEditChatTitle) ReadBareFrom(r *tl.Reader) {
	o.ChatID = r.ReadInt()
	o.Title = r.ReadString()
}

func (o *TLMessagesEditChatTitle) WriteBareTo(w *tl.Writer) {
	w.WriteInt(o.ChatID)
	w.WriteString(o.Title)
}

func (o *TLMessagesEditChatTitle) String() string {
	return tl.Pretty(o)
}

// TLMessagesEditChatPhoto represents func messages.editChatPhoto#ca4c79d8 chat_id:int photo:InputChatPhoto = Updates from Telegram
type TLMessagesEditChatPhoto struct {
	ChatID int                  // chat_id:int
	Photo  TLInputChatPhotoType // photo:InputChatPhoto
}

func (o *TLMessagesEditChatPhoto) Cmd() uint32 {
	return TagMessagesEditChatPhoto
}

func (o *TLMessagesEditChatPhoto) ReadBareFrom(r *tl.Reader) {
	o.ChatID = r.ReadInt()
	o.Photo = Schema.ReadLimitedBoxedObjectFrom(r, TagInputChatPhotoEmpty, TagInputChatUploadedPhoto, TagInputChatPhoto).(TLInputChatPhotoType)
}

func (o *TLMessagesEditChatPhoto) WriteBareTo(w *tl.Writer) {
	w.WriteInt(o.ChatID)
	w.WriteCmd(o.Photo.Cmd())
	o.Photo.WriteBareTo(w)
}

func (o *TLMessagesEditChatPhoto) String() string {
	return tl.Pretty(o)
}

// TLMessagesAddChatUser represents func messages.addChatUser#f9a0aa09 chat_id:int user_id:InputUser fwd_limit:int = Updates from Telegram
type TLMessagesAddChatUser struct {
	ChatID   int             // chat_id:int
	UserID   TLInputUserType // user_id:InputUser
	FwdLimit int             // fwd_limit:int
}

func (o *TLMessagesAddChatUser) Cmd() uint32 {
	return TagMessagesAddChatUser
}

func (o *TLMessagesAddChatUser) ReadBareFrom(r *tl.Reader) {
	o.ChatID = r.ReadInt()
	o.UserID = Schema.ReadLimitedBoxedObjectFrom(r, TagInputUserEmpty, TagInputUserSelf, TagInputUser).(TLInputUserType)
	o.FwdLimit = r.ReadInt()
}

func (o *TLMessagesAddChatUser) WriteBareTo(w *tl.Writer) {
	w.WriteInt(o.ChatID)
	w.WriteCmd(o.UserID.Cmd())
	o.UserID.WriteBareTo(w)
	w.WriteInt(o.FwdLimit)
}

func (o *TLMessagesAddChatUser) String() string {
	return tl.Pretty(o)
}

// TLMessagesDeleteChatUser represents func messages.deleteChatUser#e0611f16 chat_id:int user_id:InputUser = Updates from Telegram
type TLMessagesDeleteChatUser struct {
	ChatID int             // chat_id:int
	UserID TLInputUserType // user_id:InputUser
}

func (o *TLMessagesDeleteChatUser) Cmd() uint32 {
	return TagMessagesDeleteChatUser
}

func (o *TLMessagesDeleteChatUser) ReadBareFrom(r *tl.Reader) {
	o.ChatID = r.ReadInt()
	o.UserID = Schema.ReadLimitedBoxedObjectFrom(r, TagInputUserEmpty, TagInputUserSelf, TagInputUser).(TLInputUserType)
}

func (o *TLMessagesDeleteChatUser) WriteBareTo(w *tl.Writer) {
	w.WriteInt(o.ChatID)
	w.WriteCmd(o.UserID.Cmd())
	o.UserID.WriteBareTo(w)
}

func (o *TLMessagesDeleteChatUser) String() string {
	return tl.Pretty(o)
}

// TLMessagesCreateChat represents func messages.createChat#09cb126e users:Vector<InputUser> title:string = Updates from Telegram
type TLMessagesCreateChat struct {
	Users []TLInputUserType // users:Vector<InputUser>
	Title string            // title:string
}

func (o *TLMessagesCreateChat) Cmd() uint32 {
	return TagMessagesCreateChat
}

func (o *TLMessagesCreateChat) ReadBareFrom(r *tl.Reader) {
	if cmd := r.ReadCmd(); cmd != TagVector {
		r.Fail(errors.New("expected: vector"))
	}
	o.Users = make([]TLInputUserType, r.ReadInt())
	for i := 0; i < len(o.Users); i++ {
		o.Users[i] = Schema.ReadLimitedBoxedObjectFrom(r, TagInputUserEmpty, TagInputUserSelf, TagInputUser).(TLInputUserType)
	}
	o.Title = r.ReadString()
}

func (o *TLMessagesCreateChat) WriteBareTo(w *tl.Writer) {
	w.WriteCmd(TagVector)
	w.WriteInt(len(o.Users))
	for i := 0; i < len(o.Users); i++ {
		w.WriteCmd(o.Users[i].Cmd())
		o.Users[i].WriteBareTo(w)
	}
	w.WriteString(o.Title)
}

func (o *TLMessagesCreateChat) String() string {
	return tl.Pretty(o)
}

// TLMessagesForwardMessage represents func messages.forwardMessage#33963bf9 peer:InputPeer id:int random_id:long = Updates from Telegram
type TLMessagesForwardMessage struct {
	Peer     TLInputPeerType // peer:InputPeer
	ID       int             // id:int
	RandomID uint64          // random_id:long
}

func (o *TLMessagesForwardMessage) Cmd() uint32 {
	return TagMessagesForwardMessage
}

func (o *TLMessagesForwardMessage) ReadBareFrom(r *tl.Reader) {
	o.Peer = Schema.ReadLimitedBoxedObjectFrom(r, TagInputPeerEmpty, TagInputPeerSelf, TagInputPeerChat, TagInputPeerUser, TagInputPeerChannel).(TLInputPeerType)
	o.ID = r.ReadInt()
	o.RandomID = r.ReadUint64()
}

func (o *TLMessagesForwardMessage) WriteBareTo(w *tl.Writer) {
	w.WriteCmd(o.Peer.Cmd())
	o.Peer.WriteBareTo(w)
	w.WriteInt(o.ID)
	w.WriteUint64(o.RandomID)
}

func (o *TLMessagesForwardMessage) String() string {
	return tl.Pretty(o)
}

// TLMessagesGetDHConfig represents func messages.getDhConfig#26cf8950 version:int random_length:int = messages.DhConfig from Telegram
type TLMessagesGetDHConfig struct {
	Version      int // version:int
	RandomLength int // random_length:int
}

func (o *TLMessagesGetDHConfig) Cmd() uint32 {
	return TagMessagesGetDHConfig
}

func (o *TLMessagesGetDHConfig) ReadBareFrom(r *tl.Reader) {
	o.Version = r.ReadInt()
	o.RandomLength = r.ReadInt()
}

func (o *TLMessagesGetDHConfig) WriteBareTo(w *tl.Writer) {
	w.WriteInt(o.Version)
	w.WriteInt(o.RandomLength)
}

func (o *TLMessagesGetDHConfig) String() string {
	return tl.Pretty(o)
}

// TLMessagesRequestEncryption represents func messages.requestEncryption#f64daf43 user_id:InputUser random_id:int g_a:bytes = EncryptedChat from Telegram
type TLMessagesRequestEncryption struct {
	UserID   TLInputUserType // user_id:InputUser
	RandomID int             // random_id:int
	GA       []byte          // g_a:bytes
}

func (o *TLMessagesRequestEncryption) Cmd() uint32 {
	return TagMessagesRequestEncryption
}

func (o *TLMessagesRequestEncryption) ReadBareFrom(r *tl.Reader) {
	o.UserID = Schema.ReadLimitedBoxedObjectFrom(r, TagInputUserEmpty, TagInputUserSelf, TagInputUser).(TLInputUserType)
	o.RandomID = r.ReadInt()
	o.GA = r.ReadBlob()
}

func (o *TLMessagesRequestEncryption) WriteBareTo(w *tl.Writer) {
	w.WriteCmd(o.UserID.Cmd())
	o.UserID.WriteBareTo(w)
	w.WriteInt(o.RandomID)
	w.WriteBlob(o.GA)
}

func (o *TLMessagesRequestEncryption) String() string {
	return tl.Pretty(o)
}

// TLMessagesAcceptEncryption represents func messages.acceptEncryption#3dbc0415 peer:InputEncryptedChat g_b:bytes key_fingerprint:long = EncryptedChat from Telegram
type TLMessagesAcceptEncryption struct {
	Peer           *TLInputEncryptedChat // peer:InputEncryptedChat
	GB             []byte                // g_b:bytes
	KeyFingerprint uint64                // key_fingerprint:long
}

func (o *TLMessagesAcceptEncryption) Cmd() uint32 {
	return TagMessagesAcceptEncryption
}

func (o *TLMessagesAcceptEncryption) ReadBareFrom(r *tl.Reader) {
	if cmd := r.ReadCmd(); cmd != TagInputEncryptedChat {
		r.Fail(errors.New("expected: inputEncryptedChat"))
	}
	o.Peer = new(TLInputEncryptedChat)
	o.Peer.ReadBareFrom(r)
	o.GB = r.ReadBlob()
	o.KeyFingerprint = r.ReadUint64()
}

func (o *TLMessagesAcceptEncryption) WriteBareTo(w *tl.Writer) {
	w.WriteCmd(TagInputEncryptedChat)
	o.Peer.WriteBareTo(w)
	w.WriteBlob(o.GB)
	w.WriteUint64(o.KeyFingerprint)
}

func (o *TLMessagesAcceptEncryption) String() string {
	return tl.Pretty(o)
}

// TLMessagesDiscardEncryption represents func messages.discardEncryption#edd923c5 chat_id:int = Bool from Telegram
type TLMessagesDiscardEncryption struct {
	ChatID int // chat_id:int
}

func (o *TLMessagesDiscardEncryption) Cmd() uint32 {
	return TagMessagesDiscardEncryption
}

func (o *TLMessagesDiscardEncryption) ReadBareFrom(r *tl.Reader) {
	o.ChatID = r.ReadInt()
}

func (o *TLMessagesDiscardEncryption) WriteBareTo(w *tl.Writer) {
	w.WriteInt(o.ChatID)
}

func (o *TLMessagesDiscardEncryption) String() string {
	return tl.Pretty(o)
}

// TLMessagesSetEncryptedTyping represents func messages.setEncryptedTyping#791451ed peer:InputEncryptedChat typing:Bool = Bool from Telegram
type TLMessagesSetEncryptedTyping struct {
	Peer   *TLInputEncryptedChat // peer:InputEncryptedChat
	Typing bool                  // typing:Bool
}

func (o *TLMessagesSetEncryptedTyping) Cmd() uint32 {
	return TagMessagesSetEncryptedTyping
}

func (o *TLMessagesSetEncryptedTyping) ReadBareFrom(r *tl.Reader) {
	if cmd := r.ReadCmd(); cmd != TagInputEncryptedChat {
		r.Fail(errors.New("expected: inputEncryptedChat"))
	}
	o.Peer = new(TLInputEncryptedChat)
	o.Peer.ReadBareFrom(r)
	r.ExpectCmd(TagBoolTrue, TagBoolFalse)
	o.Typing = (r.ReadCmd() == TagBoolTrue)
}

func (o *TLMessagesSetEncryptedTyping) WriteBareTo(w *tl.Writer) {
	w.WriteCmd(TagInputEncryptedChat)
	o.Peer.WriteBareTo(w)
	if o.Typing {
		w.WriteCmd(TagBoolTrue)
	} else {
		w.WriteCmd(TagBoolFalse)
	}
}

func (o *TLMessagesSetEncryptedTyping) String() string {
	return tl.Pretty(o)
}

// TLMessagesReadEncryptedHistory represents func messages.readEncryptedHistory#7f4b690a peer:InputEncryptedChat max_date:int = Bool from Telegram
type TLMessagesReadEncryptedHistory struct {
	Peer    *TLInputEncryptedChat // peer:InputEncryptedChat
	MaxDate int                   // max_date:int
}

func (o *TLMessagesReadEncryptedHistory) Cmd() uint32 {
	return TagMessagesReadEncryptedHistory
}

func (o *TLMessagesReadEncryptedHistory) ReadBareFrom(r *tl.Reader) {
	if cmd := r.ReadCmd(); cmd != TagInputEncryptedChat {
		r.Fail(errors.New("expected: inputEncryptedChat"))
	}
	o.Peer = new(TLInputEncryptedChat)
	o.Peer.ReadBareFrom(r)
	o.MaxDate = r.ReadInt()
}

func (o *TLMessagesReadEncryptedHistory) WriteBareTo(w *tl.Writer) {
	w.WriteCmd(TagInputEncryptedChat)
	o.Peer.WriteBareTo(w)
	w.WriteInt(o.MaxDate)
}

func (o *TLMessagesReadEncryptedHistory) String() string {
	return tl.Pretty(o)
}

// TLMessagesSendEncrypted represents func messages.sendEncrypted#a9776773 peer:InputEncryptedChat random_id:long data:bytes = messages.SentEncryptedMessage from Telegram
type TLMessagesSendEncrypted struct {
	Peer     *TLInputEncryptedChat // peer:InputEncryptedChat
	RandomID uint64                // random_id:long
	Data     []byte                // data:bytes
}

func (o *TLMessagesSendEncrypted) Cmd() uint32 {
	return TagMessagesSendEncrypted
}

func (o *TLMessagesSendEncrypted) ReadBareFrom(r *tl.Reader) {
	if cmd := r.ReadCmd(); cmd != TagInputEncryptedChat {
		r.Fail(errors.New("expected: inputEncryptedChat"))
	}
	o.Peer = new(TLInputEncryptedChat)
	o.Peer.ReadBareFrom(r)
	o.RandomID = r.ReadUint64()
	o.Data = r.ReadBlob()
}

func (o *TLMessagesSendEncrypted) WriteBareTo(w *tl.Writer) {
	w.WriteCmd(TagInputEncryptedChat)
	o.Peer.WriteBareTo(w)
	w.WriteUint64(o.RandomID)
	w.WriteBlob(o.Data)
}

func (o *TLMessagesSendEncrypted) String() string {
	return tl.Pretty(o)
}

// TLMessagesSendEncryptedFile represents func messages.sendEncryptedFile#9a901b66 peer:InputEncryptedChat random_id:long data:bytes file:InputEncryptedFile = messages.SentEncryptedMessage from Telegram
type TLMessagesSendEncryptedFile struct {
	Peer     *TLInputEncryptedChat    // peer:InputEncryptedChat
	RandomID uint64                   // random_id:long
	Data     []byte                   // data:bytes
	File     TLInputEncryptedFileType // file:InputEncryptedFile
}

func (o *TLMessagesSendEncryptedFile) Cmd() uint32 {
	return TagMessagesSendEncryptedFile
}

func (o *TLMessagesSendEncryptedFile) ReadBareFrom(r *tl.Reader) {
	if cmd := r.ReadCmd(); cmd != TagInputEncryptedChat {
		r.Fail(errors.New("expected: inputEncryptedChat"))
	}
	o.Peer = new(TLInputEncryptedChat)
	o.Peer.ReadBareFrom(r)
	o.RandomID = r.ReadUint64()
	o.Data = r.ReadBlob()
	o.File = Schema.ReadLimitedBoxedObjectFrom(r, TagInputEncryptedFileEmpty, TagInputEncryptedFileUploaded, TagInputEncryptedFile, TagInputEncryptedFileBigUploaded).(TLInputEncryptedFileType)
}

func (o *TLMessagesSendEncryptedFile) WriteBareTo(w *tl.Writer) {
	w.WriteCmd(TagInputEncryptedChat)
	o.Peer.WriteBareTo(w)
	w.WriteUint64(o.RandomID)
	w.WriteBlob(o.Data)
	w.WriteCmd(o.File.Cmd())
	o.File.WriteBareTo(w)
}

func (o *TLMessagesSendEncryptedFile) String() string {
	return tl.Pretty(o)
}

// TLMessagesSendEncryptedService represents func messages.sendEncryptedService#32d439a4 peer:InputEncryptedChat random_id:long data:bytes = messages.SentEncryptedMessage from Telegram
type TLMessagesSendEncryptedService struct {
	Peer     *TLInputEncryptedChat // peer:InputEncryptedChat
	RandomID uint64                // random_id:long
	Data     []byte                // data:bytes
}

func (o *TLMessagesSendEncryptedService) Cmd() uint32 {
	return TagMessagesSendEncryptedService
}

func (o *TLMessagesSendEncryptedService) ReadBareFrom(r *tl.Reader) {
	if cmd := r.ReadCmd(); cmd != TagInputEncryptedChat {
		r.Fail(errors.New("expected: inputEncryptedChat"))
	}
	o.Peer = new(TLInputEncryptedChat)
	o.Peer.ReadBareFrom(r)
	o.RandomID = r.ReadUint64()
	o.Data = r.ReadBlob()
}

func (o *TLMessagesSendEncryptedService) WriteBareTo(w *tl.Writer) {
	w.WriteCmd(TagInputEncryptedChat)
	o.Peer.WriteBareTo(w)
	w.WriteUint64(o.RandomID)
	w.WriteBlob(o.Data)
}

func (o *TLMessagesSendEncryptedService) String() string {
	return tl.Pretty(o)
}

// TLMessagesReceivedQueue represents func messages.receivedQueue#55a5bb66 max_qts:int = Vector<long> from Telegram
type TLMessagesReceivedQueue struct {
	MaxQts int // max_qts:int
}

func (o *TLMessagesReceivedQueue) Cmd() uint32 {
	return TagMessagesReceivedQueue
}

func (o *TLMessagesReceivedQueue) ReadBareFrom(r *tl.Reader) {
	o.MaxQts = r.ReadInt()
}

func (o *TLMessagesReceivedQueue) WriteBareTo(w *tl.Writer) {
	w.WriteInt(o.MaxQts)
}

func (o *TLMessagesReceivedQueue) String() string {
	return tl.Pretty(o)
}

// TLMessagesReportEncryptedSpam represents func messages.reportEncryptedSpam#4b0c8c0f peer:InputEncryptedChat = Bool from Telegram
type TLMessagesReportEncryptedSpam struct {
	Peer *TLInputEncryptedChat // peer:InputEncryptedChat
}

func (o *TLMessagesReportEncryptedSpam) Cmd() uint32 {
	return TagMessagesReportEncryptedSpam
}

func (o *TLMessagesReportEncryptedSpam) ReadBareFrom(r *tl.Reader) {
	if cmd := r.ReadCmd(); cmd != TagInputEncryptedChat {
		r.Fail(errors.New("expected: inputEncryptedChat"))
	}
	o.Peer = new(TLInputEncryptedChat)
	o.Peer.ReadBareFrom(r)
}

func (o *TLMessagesReportEncryptedSpam) WriteBareTo(w *tl.Writer) {
	w.WriteCmd(TagInputEncryptedChat)
	o.Peer.WriteBareTo(w)
}

func (o *TLMessagesReportEncryptedSpam) String() string {
	return tl.Pretty(o)
}

// TLMessagesReadMessageContents represents func messages.readMessageContents#36a73f77 id:Vector<int> = messages.AffectedMessages from Telegram
type TLMessagesReadMessageContents struct {
	ID []int // id:Vector<int>
}

func (o *TLMessagesReadMessageContents) Cmd() uint32 {
	return TagMessagesReadMessageContents
}

func (o *TLMessagesReadMessageContents) ReadBareFrom(r *tl.Reader) {
	if cmd := r.ReadCmd(); cmd != TagVector {
		r.Fail(errors.New("expected: vector"))
	}
	o.ID = make([]int, r.ReadInt())
	for i := 0; i < len(o.ID); i++ {
		o.ID[i] = r.ReadInt()
	}
}

func (o *TLMessagesReadMessageContents) WriteBareTo(w *tl.Writer) {
	w.WriteCmd(TagVector)
	w.WriteInt(len(o.ID))
	for i := 0; i < len(o.ID); i++ {
		w.WriteInt(o.ID[i])
	}
}

func (o *TLMessagesReadMessageContents) String() string {
	return tl.Pretty(o)
}

// TLMessagesGetAllStickers represents func messages.getAllStickers#1c9618b1 hash:int = messages.AllStickers from Telegram
type TLMessagesGetAllStickers struct {
	Hash int // hash:int
}

func (o *TLMessagesGetAllStickers) Cmd() uint32 {
	return TagMessagesGetAllStickers
}

func (o *TLMessagesGetAllStickers) ReadBareFrom(r *tl.Reader) {
	o.Hash = r.ReadInt()
}

func (o *TLMessagesGetAllStickers) WriteBareTo(w *tl.Writer) {
	w.WriteInt(o.Hash)
}

func (o *TLMessagesGetAllStickers) String() string {
	return tl.Pretty(o)
}

// TLMessagesGetWebPagePreview represents func messages.getWebPagePreview#25223e24 message:string = MessageMedia from Telegram
type TLMessagesGetWebPagePreview struct {
	Message string // message:string
}

func (o *TLMessagesGetWebPagePreview) Cmd() uint32 {
	return TagMessagesGetWebPagePreview
}

func (o *TLMessagesGetWebPagePreview) ReadBareFrom(r *tl.Reader) {
	o.Message = r.ReadString()
}

func (o *TLMessagesGetWebPagePreview) WriteBareTo(w *tl.Writer) {
	w.WriteString(o.Message)
}

func (o *TLMessagesGetWebPagePreview) String() string {
	return tl.Pretty(o)
}

// TLMessagesExportChatInvite represents func messages.exportChatInvite#7d885289 chat_id:int = ExportedChatInvite from Telegram
type TLMessagesExportChatInvite struct {
	ChatID int // chat_id:int
}

func (o *TLMessagesExportChatInvite) Cmd() uint32 {
	return TagMessagesExportChatInvite
}

func (o *TLMessagesExportChatInvite) ReadBareFrom(r *tl.Reader) {
	o.ChatID = r.ReadInt()
}

func (o *TLMessagesExportChatInvite) WriteBareTo(w *tl.Writer) {
	w.WriteInt(o.ChatID)
}

func (o *TLMessagesExportChatInvite) String() string {
	return tl.Pretty(o)
}

// TLMessagesCheckChatInvite represents func messages.checkChatInvite#3eadb1bb hash:string = ChatInvite from Telegram
type TLMessagesCheckChatInvite struct {
	Hash string // hash:string
}

func (o *TLMessagesCheckChatInvite) Cmd() uint32 {
	return TagMessagesCheckChatInvite
}

func (o *TLMessagesCheckChatInvite) ReadBareFrom(r *tl.Reader) {
	o.Hash = r.ReadString()
}

func (o *TLMessagesCheckChatInvite) WriteBareTo(w *tl.Writer) {
	w.WriteString(o.Hash)
}

func (o *TLMessagesCheckChatInvite) String() string {
	return tl.Pretty(o)
}

// TLMessagesImportChatInvite represents func messages.importChatInvite#6c50051c hash:string = Updates from Telegram
type TLMessagesImportChatInvite struct {
	Hash string // hash:string
}

func (o *TLMessagesImportChatInvite) Cmd() uint32 {
	return TagMessagesImportChatInvite
}

func (o *TLMessagesImportChatInvite) ReadBareFrom(r *tl.Reader) {
	o.Hash = r.ReadString()
}

func (o *TLMessagesImportChatInvite) WriteBareTo(w *tl.Writer) {
	w.WriteString(o.Hash)
}

func (o *TLMessagesImportChatInvite) String() string {
	return tl.Pretty(o)
}

// TLMessagesGetStickerSet represents func messages.getStickerSet#2619a90e stickerset:InputStickerSet = messages.StickerSet from Telegram
type TLMessagesGetStickerSet struct {
	Stickerset TLInputStickerSetType // stickerset:InputStickerSet
}

func (o *TLMessagesGetStickerSet) Cmd() uint32 {
	return TagMessagesGetStickerSet
}

func (o *TLMessagesGetStickerSet) ReadBareFrom(r *tl.Reader) {
	o.Stickerset = Schema.ReadLimitedBoxedObjectFrom(r, TagInputStickerSetEmpty, TagInputStickerSetID, TagInputStickerSetShortName).(TLInputStickerSetType)
}

func (o *TLMessagesGetStickerSet) WriteBareTo(w *tl.Writer) {
	w.WriteCmd(o.Stickerset.Cmd())
	o.Stickerset.WriteBareTo(w)
}

func (o *TLMessagesGetStickerSet) String() string {
	return tl.Pretty(o)
}

// TLMessagesInstallStickerSet represents func messages.installStickerSet#c78fe460 stickerset:InputStickerSet archived:Bool = messages.StickerSetInstallResult from Telegram
type TLMessagesInstallStickerSet struct {
	Stickerset TLInputStickerSetType // stickerset:InputStickerSet
	Archived   bool                  // archived:Bool
}

func (o *TLMessagesInstallStickerSet) Cmd() uint32 {
	return TagMessagesInstallStickerSet
}

func (o *TLMessagesInstallStickerSet) ReadBareFrom(r *tl.Reader) {
	o.Stickerset = Schema.ReadLimitedBoxedObjectFrom(r, TagInputStickerSetEmpty, TagInputStickerSetID, TagInputStickerSetShortName).(TLInputStickerSetType)
	r.ExpectCmd(TagBoolTrue, TagBoolFalse)
	o.Archived = (r.ReadCmd() == TagBoolTrue)
}

func (o *TLMessagesInstallStickerSet) WriteBareTo(w *tl.Writer) {
	w.WriteCmd(o.Stickerset.Cmd())
	o.Stickerset.WriteBareTo(w)
	if o.Archived {
		w.WriteCmd(TagBoolTrue)
	} else {
		w.WriteCmd(TagBoolFalse)
	}
}

func (o *TLMessagesInstallStickerSet) String() string {
	return tl.Pretty(o)
}

// TLMessagesUninstallStickerSet represents func messages.uninstallStickerSet#f96e55de stickerset:InputStickerSet = Bool from Telegram
type TLMessagesUninstallStickerSet struct {
	Stickerset TLInputStickerSetType // stickerset:InputStickerSet
}

func (o *TLMessagesUninstallStickerSet) Cmd() uint32 {
	return TagMessagesUninstallStickerSet
}

func (o *TLMessagesUninstallStickerSet) ReadBareFrom(r *tl.Reader) {
	o.Stickerset = Schema.ReadLimitedBoxedObjectFrom(r, TagInputStickerSetEmpty, TagInputStickerSetID, TagInputStickerSetShortName).(TLInputStickerSetType)
}

func (o *TLMessagesUninstallStickerSet) WriteBareTo(w *tl.Writer) {
	w.WriteCmd(o.Stickerset.Cmd())
	o.Stickerset.WriteBareTo(w)
}

func (o *TLMessagesUninstallStickerSet) String() string {
	return tl.Pretty(o)
}

// TLMessagesStartBot represents func messages.startBot#e6df7378 bot:InputUser peer:InputPeer random_id:long start_param:string = Updates from Telegram
type TLMessagesStartBot struct {
	Bot        TLInputUserType // bot:InputUser
	Peer       TLInputPeerType // peer:InputPeer
	RandomID   uint64          // random_id:long
	StartParam string          // start_param:string
}

func (o *TLMessagesStartBot) Cmd() uint32 {
	return TagMessagesStartBot
}

func (o *TLMessagesStartBot) ReadBareFrom(r *tl.Reader) {
	o.Bot = Schema.ReadLimitedBoxedObjectFrom(r, TagInputUserEmpty, TagInputUserSelf, TagInputUser).(TLInputUserType)
	o.Peer = Schema.ReadLimitedBoxedObjectFrom(r, TagInputPeerEmpty, TagInputPeerSelf, TagInputPeerChat, TagInputPeerUser, TagInputPeerChannel).(TLInputPeerType)
	o.RandomID = r.ReadUint64()
	o.StartParam = r.ReadString()
}

func (o *TLMessagesStartBot) WriteBareTo(w *tl.Writer) {
	w.WriteCmd(o.Bot.Cmd())
	o.Bot.WriteBareTo(w)
	w.WriteCmd(o.Peer.Cmd())
	o.Peer.WriteBareTo(w)
	w.WriteUint64(o.RandomID)
	w.WriteString(o.StartParam)
}

func (o *TLMessagesStartBot) String() string {
	return tl.Pretty(o)
}

// TLMessagesGetMessagesViews represents func messages.getMessagesViews#c4c8a55d peer:InputPeer id:Vector<int> increment:Bool = Vector<int> from Telegram
type TLMessagesGetMessagesViews struct {
	Peer      TLInputPeerType // peer:InputPeer
	ID        []int           // id:Vector<int>
	Increment bool            // increment:Bool
}

func (o *TLMessagesGetMessagesViews) Cmd() uint32 {
	return TagMessagesGetMessagesViews
}

func (o *TLMessagesGetMessagesViews) ReadBareFrom(r *tl.Reader) {
	o.Peer = Schema.ReadLimitedBoxedObjectFrom(r, TagInputPeerEmpty, TagInputPeerSelf, TagInputPeerChat, TagInputPeerUser, TagInputPeerChannel).(TLInputPeerType)
	if cmd := r.ReadCmd(); cmd != TagVector {
		r.Fail(errors.New("expected: vector"))
	}
	o.ID = make([]int, r.ReadInt())
	for i := 0; i < len(o.ID); i++ {
		o.ID[i] = r.ReadInt()
	}
	r.ExpectCmd(TagBoolTrue, TagBoolFalse)
	o.Increment = (r.ReadCmd() == TagBoolTrue)
}

func (o *TLMessagesGetMessagesViews) WriteBareTo(w *tl.Writer) {
	w.WriteCmd(o.Peer.Cmd())
	o.Peer.WriteBareTo(w)
	w.WriteCmd(TagVector)
	w.WriteInt(len(o.ID))
	for i := 0; i < len(o.ID); i++ {
		w.WriteInt(o.ID[i])
	}
	if o.Increment {
		w.WriteCmd(TagBoolTrue)
	} else {
		w.WriteCmd(TagBoolFalse)
	}
}

func (o *TLMessagesGetMessagesViews) String() string {
	return tl.Pretty(o)
}

// TLMessagesToggleChatAdmins represents func messages.toggleChatAdmins#ec8bd9e1 chat_id:int enabled:Bool = Updates from Telegram
type TLMessagesToggleChatAdmins struct {
	ChatID  int  // chat_id:int
	Enabled bool // enabled:Bool
}

func (o *TLMessagesToggleChatAdmins) Cmd() uint32 {
	return TagMessagesToggleChatAdmins
}

func (o *TLMessagesToggleChatAdmins) ReadBareFrom(r *tl.Reader) {
	o.ChatID = r.ReadInt()
	r.ExpectCmd(TagBoolTrue, TagBoolFalse)
	o.Enabled = (r.ReadCmd() == TagBoolTrue)
}

func (o *TLMessagesToggleChatAdmins) WriteBareTo(w *tl.Writer) {
	w.WriteInt(o.ChatID)
	if o.Enabled {
		w.WriteCmd(TagBoolTrue)
	} else {
		w.WriteCmd(TagBoolFalse)
	}
}

func (o *TLMessagesToggleChatAdmins) String() string {
	return tl.Pretty(o)
}

// TLMessagesEditChatAdmin represents func messages.editChatAdmin#a9e69f2e chat_id:int user_id:InputUser is_admin:Bool = Bool from Telegram
type TLMessagesEditChatAdmin struct {
	ChatID  int             // chat_id:int
	UserID  TLInputUserType // user_id:InputUser
	IsAdmin bool            // is_admin:Bool
}

func (o *TLMessagesEditChatAdmin) Cmd() uint32 {
	return TagMessagesEditChatAdmin
}

func (o *TLMessagesEditChatAdmin) ReadBareFrom(r *tl.Reader) {
	o.ChatID = r.ReadInt()
	o.UserID = Schema.ReadLimitedBoxedObjectFrom(r, TagInputUserEmpty, TagInputUserSelf, TagInputUser).(TLInputUserType)
	r.ExpectCmd(TagBoolTrue, TagBoolFalse)
	o.IsAdmin = (r.ReadCmd() == TagBoolTrue)
}

func (o *TLMessagesEditChatAdmin) WriteBareTo(w *tl.Writer) {
	w.WriteInt(o.ChatID)
	w.WriteCmd(o.UserID.Cmd())
	o.UserID.WriteBareTo(w)
	if o.IsAdmin {
		w.WriteCmd(TagBoolTrue)
	} else {
		w.WriteCmd(TagBoolFalse)
	}
}

func (o *TLMessagesEditChatAdmin) String() string {
	return tl.Pretty(o)
}

// TLMessagesMigrateChat represents func messages.migrateChat#15a3b8e3 chat_id:int = Updates from Telegram
type TLMessagesMigrateChat struct {
	ChatID int // chat_id:int
}

func (o *TLMessagesMigrateChat) Cmd() uint32 {
	return TagMessagesMigrateChat
}

func (o *TLMessagesMigrateChat) ReadBareFrom(r *tl.Reader) {
	o.ChatID = r.ReadInt()
}

func (o *TLMessagesMigrateChat) WriteBareTo(w *tl.Writer) {
	w.WriteInt(o.ChatID)
}

func (o *TLMessagesMigrateChat) String() string {
	return tl.Pretty(o)
}

// TLMessagesSearchGlobal represents func messages.searchGlobal#9e3cacb0 q:string offset_date:int offset_peer:InputPeer offset_id:int limit:int = messages.Messages from Telegram
type TLMessagesSearchGlobal struct {
	Q          string          // q:string
	OffsetDate int             // offset_date:int
	OffsetPeer TLInputPeerType // offset_peer:InputPeer
	OffsetID   int             // offset_id:int
	Limit      int             // limit:int
}

func (o *TLMessagesSearchGlobal) Cmd() uint32 {
	return TagMessagesSearchGlobal
}

func (o *TLMessagesSearchGlobal) ReadBareFrom(r *tl.Reader) {
	o.Q = r.ReadString()
	o.OffsetDate = r.ReadInt()
	o.OffsetPeer = Schema.ReadLimitedBoxedObjectFrom(r, TagInputPeerEmpty, TagInputPeerSelf, TagInputPeerChat, TagInputPeerUser, TagInputPeerChannel).(TLInputPeerType)
	o.OffsetID = r.ReadInt()
	o.Limit = r.ReadInt()
}

func (o *TLMessagesSearchGlobal) WriteBareTo(w *tl.Writer) {
	w.WriteString(o.Q)
	w.WriteInt(o.OffsetDate)
	w.WriteCmd(o.OffsetPeer.Cmd())
	o.OffsetPeer.WriteBareTo(w)
	w.WriteInt(o.OffsetID)
	w.WriteInt(o.Limit)
}

func (o *TLMessagesSearchGlobal) String() string {
	return tl.Pretty(o)
}

// TLMessagesReorderStickerSets represents func messages.reorderStickerSets#78337739 flags:# flags.0?masks:true order:Vector<long> = Bool from Telegram
type TLMessagesReorderStickerSets struct {
	Flags uint     // flags:#
	Masks bool     // flags.0?masks:true
	Order []uint64 // order:Vector<long>
}

func (o *TLMessagesReorderStickerSets) Cmd() uint32 {
	return TagMessagesReorderStickerSets
}

func (o *TLMessagesReorderStickerSets) ReadBareFrom(r *tl.Reader) {
	o.Flags = uint(r.ReadUint32())
	o.Masks = true
	if cmd := r.ReadCmd(); cmd != TagVector {
		r.Fail(errors.New("expected: vector"))
	}
	o.Order = make([]uint64, r.ReadInt())
	for i := 0; i < len(o.Order); i++ {
		o.Order[i] = r.ReadUint64()
	}
}

func (o *TLMessagesReorderStickerSets) WriteBareTo(w *tl.Writer) {
	w.WriteUint32(uint32(o.Flags))
	w.WriteCmd(TagVector)
	w.WriteInt(len(o.Order))
	for i := 0; i < len(o.Order); i++ {
		w.WriteUint64(o.Order[i])
	}
}

func (o *TLMessagesReorderStickerSets) String() string {
	return tl.Pretty(o)
}

// TLMessagesGetDocumentByHash represents func messages.getDocumentByHash#338e2464 sha256:bytes size:int mime_type:string = Document from Telegram
type TLMessagesGetDocumentByHash struct {
	Sha256   []byte // sha256:bytes
	Size     int    // size:int
	MimeType string // mime_type:string
}

func (o *TLMessagesGetDocumentByHash) Cmd() uint32 {
	return TagMessagesGetDocumentByHash
}

func (o *TLMessagesGetDocumentByHash) ReadBareFrom(r *tl.Reader) {
	o.Sha256 = r.ReadBlob()
	o.Size = r.ReadInt()
	o.MimeType = r.ReadString()
}

func (o *TLMessagesGetDocumentByHash) WriteBareTo(w *tl.Writer) {
	w.WriteBlob(o.Sha256)
	w.WriteInt(o.Size)
	w.WriteString(o.MimeType)
}

func (o *TLMessagesGetDocumentByHash) String() string {
	return tl.Pretty(o)
}

// TLMessagesSearchGifs represents func messages.searchGifs#bf9a776b q:string offset:int = messages.FoundGifs from Telegram
type TLMessagesSearchGifs struct {
	Q      string // q:string
	Offset int    // offset:int
}

func (o *TLMessagesSearchGifs) Cmd() uint32 {
	return TagMessagesSearchGifs
}

func (o *TLMessagesSearchGifs) ReadBareFrom(r *tl.Reader) {
	o.Q = r.ReadString()
	o.Offset = r.ReadInt()
}

func (o *TLMessagesSearchGifs) WriteBareTo(w *tl.Writer) {
	w.WriteString(o.Q)
	w.WriteInt(o.Offset)
}

func (o *TLMessagesSearchGifs) String() string {
	return tl.Pretty(o)
}

// TLMessagesGetSavedGifs represents func messages.getSavedGifs#83bf3d52 hash:int = messages.SavedGifs from Telegram
type TLMessagesGetSavedGifs struct {
	Hash int // hash:int
}

func (o *TLMessagesGetSavedGifs) Cmd() uint32 {
	return TagMessagesGetSavedGifs
}

func (o *TLMessagesGetSavedGifs) ReadBareFrom(r *tl.Reader) {
	o.Hash = r.ReadInt()
}

func (o *TLMessagesGetSavedGifs) WriteBareTo(w *tl.Writer) {
	w.WriteInt(o.Hash)
}

func (o *TLMessagesGetSavedGifs) String() string {
	return tl.Pretty(o)
}

// TLMessagesSaveGif represents func messages.saveGif#327a30cb id:InputDocument unsave:Bool = Bool from Telegram
type TLMessagesSaveGif struct {
	ID     TLInputDocumentType // id:InputDocument
	Unsave bool                // unsave:Bool
}

func (o *TLMessagesSaveGif) Cmd() uint32 {
	return TagMessagesSaveGif
}

func (o *TLMessagesSaveGif) ReadBareFrom(r *tl.Reader) {
	o.ID = Schema.ReadLimitedBoxedObjectFrom(r, TagInputDocumentEmpty, TagInputDocument).(TLInputDocumentType)
	r.ExpectCmd(TagBoolTrue, TagBoolFalse)
	o.Unsave = (r.ReadCmd() == TagBoolTrue)
}

func (o *TLMessagesSaveGif) WriteBareTo(w *tl.Writer) {
	w.WriteCmd(o.ID.Cmd())
	o.ID.WriteBareTo(w)
	if o.Unsave {
		w.WriteCmd(TagBoolTrue)
	} else {
		w.WriteCmd(TagBoolFalse)
	}
}

func (o *TLMessagesSaveGif) String() string {
	return tl.Pretty(o)
}

// TLMessagesGetInlineBotResults represents func messages.getInlineBotResults#514e999d flags:# bot:InputUser peer:InputPeer flags.0?geo_point:InputGeoPoint query:string offset:string = messages.BotResults from Telegram
type TLMessagesGetInlineBotResults struct {
	Flags    uint                // flags:#
	Bot      TLInputUserType     // bot:InputUser
	Peer     TLInputPeerType     // peer:InputPeer
	GeoPoint TLInputGeoPointType // flags.0?geo_point:InputGeoPoint
	Query    string              // query:string
	Offset   string              // offset:string
}

func (o *TLMessagesGetInlineBotResults) Cmd() uint32 {
	return TagMessagesGetInlineBotResults
}

func (o *TLMessagesGetInlineBotResults) ReadBareFrom(r *tl.Reader) {
	o.Flags = uint(r.ReadUint32())
	o.Bot = Schema.ReadLimitedBoxedObjectFrom(r, TagInputUserEmpty, TagInputUserSelf, TagInputUser).(TLInputUserType)
	o.Peer = Schema.ReadLimitedBoxedObjectFrom(r, TagInputPeerEmpty, TagInputPeerSelf, TagInputPeerChat, TagInputPeerUser, TagInputPeerChannel).(TLInputPeerType)
	o.GeoPoint = Schema.ReadLimitedBoxedObjectFrom(r, TagInputGeoPointEmpty, TagInputGeoPoint).(TLInputGeoPointType)
	o.Query = r.ReadString()
	o.Offset = r.ReadString()
}

func (o *TLMessagesGetInlineBotResults) WriteBareTo(w *tl.Writer) {
	w.WriteUint32(uint32(o.Flags))
	w.WriteCmd(o.Bot.Cmd())
	o.Bot.WriteBareTo(w)
	w.WriteCmd(o.Peer.Cmd())
	o.Peer.WriteBareTo(w)
	w.WriteCmd(o.GeoPoint.Cmd())
	o.GeoPoint.WriteBareTo(w)
	w.WriteString(o.Query)
	w.WriteString(o.Offset)
}

func (o *TLMessagesGetInlineBotResults) String() string {
	return tl.Pretty(o)
}

// TLMessagesSetInlineBotResults represents func messages.setInlineBotResults#eb5ea206 flags:# flags.0?gallery:true flags.1?private:true query_id:long results:Vector<InputBotInlineResult> cache_time:int flags.2?next_offset:string flags.3?switch_pm:InlineBotSwitchPM = Bool from Telegram
type TLMessagesSetInlineBotResults struct {
	Flags      uint                         // flags:#
	Gallery    bool                         // flags.0?gallery:true
	Private    bool                         // flags.1?private:true
	QueryID    uint64                       // query_id:long
	Results    []TLInputBotInlineResultType // results:Vector<InputBotInlineResult>
	CacheTime  int                          // cache_time:int
	NextOffset string                       // flags.2?next_offset:string
	SwitchPm   *TLInlineBotSwitchPM         // flags.3?switch_pm:InlineBotSwitchPM
}

func (o *TLMessagesSetInlineBotResults) Cmd() uint32 {
	return TagMessagesSetInlineBotResults
}

func (o *TLMessagesSetInlineBotResults) ReadBareFrom(r *tl.Reader) {
	o.Flags = uint(r.ReadUint32())
	o.Gallery = true
	o.Private = true
	o.QueryID = r.ReadUint64()
	if cmd := r.ReadCmd(); cmd != TagVector {
		r.Fail(errors.New("expected: vector"))
	}
	o.Results = make([]TLInputBotInlineResultType, r.ReadInt())
	for i := 0; i < len(o.Results); i++ {
		o.Results[i] = Schema.ReadLimitedBoxedObjectFrom(r, TagInputBotInlineResult, TagInputBotInlineResultPhoto, TagInputBotInlineResultDocument, TagInputBotInlineResultGame).(TLInputBotInlineResultType)
	}
	o.CacheTime = r.ReadInt()
	o.NextOffset = r.ReadString()
	if cmd := r.ReadCmd(); cmd != TagInlineBotSwitchPM {
		r.Fail(errors.New("expected: inlineBotSwitchPM"))
	}
	o.SwitchPm = new(TLInlineBotSwitchPM)
	o.SwitchPm.ReadBareFrom(r)
}

func (o *TLMessagesSetInlineBotResults) WriteBareTo(w *tl.Writer) {
	w.WriteUint32(uint32(o.Flags))
	w.WriteUint64(o.QueryID)
	w.WriteCmd(TagVector)
	w.WriteInt(len(o.Results))
	for i := 0; i < len(o.Results); i++ {
		w.WriteCmd(o.Results[i].Cmd())
		o.Results[i].WriteBareTo(w)
	}
	w.WriteInt(o.CacheTime)
	w.WriteString(o.NextOffset)
	w.WriteCmd(TagInlineBotSwitchPM)
	o.SwitchPm.WriteBareTo(w)
}

func (o *TLMessagesSetInlineBotResults) String() string {
	return tl.Pretty(o)
}

// TLMessagesSendInlineBotResult represents func messages.sendInlineBotResult#b16e06fe flags:# flags.5?silent:true flags.6?background:true flags.7?clear_draft:true peer:InputPeer flags.0?reply_to_msg_id:int random_id:long query_id:long id:string = Updates from Telegram
type TLMessagesSendInlineBotResult struct {
	Flags        uint            // flags:#
	Silent       bool            // flags.5?silent:true
	Background   bool            // flags.6?background:true
	ClearDraft   bool            // flags.7?clear_draft:true
	Peer         TLInputPeerType // peer:InputPeer
	ReplyToMsgID int             // flags.0?reply_to_msg_id:int
	RandomID     uint64          // random_id:long
	QueryID      uint64          // query_id:long
	ID           string          // id:string
}

func (o *TLMessagesSendInlineBotResult) Cmd() uint32 {
	return TagMessagesSendInlineBotResult
}

func (o *TLMessagesSendInlineBotResult) ReadBareFrom(r *tl.Reader) {
	o.Flags = uint(r.ReadUint32())
	o.Silent = true
	o.Background = true
	o.ClearDraft = true
	o.Peer = Schema.ReadLimitedBoxedObjectFrom(r, TagInputPeerEmpty, TagInputPeerSelf, TagInputPeerChat, TagInputPeerUser, TagInputPeerChannel).(TLInputPeerType)
	o.ReplyToMsgID = r.ReadInt()
	o.RandomID = r.ReadUint64()
	o.QueryID = r.ReadUint64()
	o.ID = r.ReadString()
}

func (o *TLMessagesSendInlineBotResult) WriteBareTo(w *tl.Writer) {
	w.WriteUint32(uint32(o.Flags))
	w.WriteCmd(o.Peer.Cmd())
	o.Peer.WriteBareTo(w)
	w.WriteInt(o.ReplyToMsgID)
	w.WriteUint64(o.RandomID)
	w.WriteUint64(o.QueryID)
	w.WriteString(o.ID)
}

func (o *TLMessagesSendInlineBotResult) String() string {
	return tl.Pretty(o)
}

// TLMessagesGetMessageEditData represents func messages.getMessageEditData#fda68d36 peer:InputPeer id:int = messages.MessageEditData from Telegram
type TLMessagesGetMessageEditData struct {
	Peer TLInputPeerType // peer:InputPeer
	ID   int             // id:int
}

func (o *TLMessagesGetMessageEditData) Cmd() uint32 {
	return TagMessagesGetMessageEditData
}

func (o *TLMessagesGetMessageEditData) ReadBareFrom(r *tl.Reader) {
	o.Peer = Schema.ReadLimitedBoxedObjectFrom(r, TagInputPeerEmpty, TagInputPeerSelf, TagInputPeerChat, TagInputPeerUser, TagInputPeerChannel).(TLInputPeerType)
	o.ID = r.ReadInt()
}

func (o *TLMessagesGetMessageEditData) WriteBareTo(w *tl.Writer) {
	w.WriteCmd(o.Peer.Cmd())
	o.Peer.WriteBareTo(w)
	w.WriteInt(o.ID)
}

func (o *TLMessagesGetMessageEditData) String() string {
	return tl.Pretty(o)
}

// TLMessagesEditMessage represents func messages.editMessage#ce91e4ca flags:# flags.1?no_webpage:true peer:InputPeer id:int flags.11?message:string flags.2?reply_markup:ReplyMarkup flags.3?entities:Vector<MessageEntity> = Updates from Telegram
type TLMessagesEditMessage struct {
	Flags       uint                  // flags:#
	NoWebpage   bool                  // flags.1?no_webpage:true
	Peer        TLInputPeerType       // peer:InputPeer
	ID          int                   // id:int
	Message     string                // flags.11?message:string
	ReplyMarkup TLReplyMarkupType     // flags.2?reply_markup:ReplyMarkup
	Entities    []TLMessageEntityType // flags.3?entities:Vector<MessageEntity>
}

func (o *TLMessagesEditMessage) Cmd() uint32 {
	return TagMessagesEditMessage
}

func (o *TLMessagesEditMessage) ReadBareFrom(r *tl.Reader) {
	o.Flags = uint(r.ReadUint32())
	o.NoWebpage = true
	o.Peer = Schema.ReadLimitedBoxedObjectFrom(r, TagInputPeerEmpty, TagInputPeerSelf, TagInputPeerChat, TagInputPeerUser, TagInputPeerChannel).(TLInputPeerType)
	o.ID = r.ReadInt()
	o.Message = r.ReadString()
	o.ReplyMarkup = Schema.ReadLimitedBoxedObjectFrom(r, TagReplyKeyboardHide, TagReplyKeyboardForceReply, TagReplyKeyboardMarkup, TagReplyInlineMarkup).(TLReplyMarkupType)
	if cmd := r.ReadCmd(); cmd != TagVector {
		r.Fail(errors.New("expected: vector"))
	}
	o.Entities = make([]TLMessageEntityType, r.ReadInt())
	for i := 0; i < len(o.Entities); i++ {
		o.Entities[i] = Schema.ReadLimitedBoxedObjectFrom(r, TagMessageEntityUnknown, TagMessageEntityMention, TagMessageEntityHashtag, TagMessageEntityBotCommand, TagMessageEntityUrl, TagMessageEntityEmail, TagMessageEntityBold, TagMessageEntityItalic, TagMessageEntityCode, TagMessageEntityPre, TagMessageEntityTextUrl, TagMessageEntityMentionName, TagInputMessageEntityMentionName).(TLMessageEntityType)
	}
}

func (o *TLMessagesEditMessage) WriteBareTo(w *tl.Writer) {
	w.WriteUint32(uint32(o.Flags))
	w.WriteCmd(o.Peer.Cmd())
	o.Peer.WriteBareTo(w)
	w.WriteInt(o.ID)
	w.WriteString(o.Message)
	w.WriteCmd(o.ReplyMarkup.Cmd())
	o.ReplyMarkup.WriteBareTo(w)
	w.WriteCmd(TagVector)
	w.WriteInt(len(o.Entities))
	for i := 0; i < len(o.Entities); i++ {
		w.WriteCmd(o.Entities[i].Cmd())
		o.Entities[i].WriteBareTo(w)
	}
}

func (o *TLMessagesEditMessage) String() string {
	return tl.Pretty(o)
}

// TLMessagesEditInlineBotMessage represents func messages.editInlineBotMessage#130c2c85 flags:# flags.1?no_webpage:true id:InputBotInlineMessageID flags.11?message:string flags.2?reply_markup:ReplyMarkup flags.3?entities:Vector<MessageEntity> = Bool from Telegram
type TLMessagesEditInlineBotMessage struct {
	Flags       uint                       // flags:#
	NoWebpage   bool                       // flags.1?no_webpage:true
	ID          *TLInputBotInlineMessageID // id:InputBotInlineMessageID
	Message     string                     // flags.11?message:string
	ReplyMarkup TLReplyMarkupType          // flags.2?reply_markup:ReplyMarkup
	Entities    []TLMessageEntityType      // flags.3?entities:Vector<MessageEntity>
}

func (o *TLMessagesEditInlineBotMessage) Cmd() uint32 {
	return TagMessagesEditInlineBotMessage
}

func (o *TLMessagesEditInlineBotMessage) ReadBareFrom(r *tl.Reader) {
	o.Flags = uint(r.ReadUint32())
	o.NoWebpage = true
	if cmd := r.ReadCmd(); cmd != TagInputBotInlineMessageID {
		r.Fail(errors.New("expected: inputBotInlineMessageID"))
	}
	o.ID = new(TLInputBotInlineMessageID)
	o.ID.ReadBareFrom(r)
	o.Message = r.ReadString()
	o.ReplyMarkup = Schema.ReadLimitedBoxedObjectFrom(r, TagReplyKeyboardHide, TagReplyKeyboardForceReply, TagReplyKeyboardMarkup, TagReplyInlineMarkup).(TLReplyMarkupType)
	if cmd := r.ReadCmd(); cmd != TagVector {
		r.Fail(errors.New("expected: vector"))
	}
	o.Entities = make([]TLMessageEntityType, r.ReadInt())
	for i := 0; i < len(o.Entities); i++ {
		o.Entities[i] = Schema.ReadLimitedBoxedObjectFrom(r, TagMessageEntityUnknown, TagMessageEntityMention, TagMessageEntityHashtag, TagMessageEntityBotCommand, TagMessageEntityUrl, TagMessageEntityEmail, TagMessageEntityBold, TagMessageEntityItalic, TagMessageEntityCode, TagMessageEntityPre, TagMessageEntityTextUrl, TagMessageEntityMentionName, TagInputMessageEntityMentionName).(TLMessageEntityType)
	}
}

func (o *TLMessagesEditInlineBotMessage) WriteBareTo(w *tl.Writer) {
	w.WriteUint32(uint32(o.Flags))
	w.WriteCmd(TagInputBotInlineMessageID)
	o.ID.WriteBareTo(w)
	w.WriteString(o.Message)
	w.WriteCmd(o.ReplyMarkup.Cmd())
	o.ReplyMarkup.WriteBareTo(w)
	w.WriteCmd(TagVector)
	w.WriteInt(len(o.Entities))
	for i := 0; i < len(o.Entities); i++ {
		w.WriteCmd(o.Entities[i].Cmd())
		o.Entities[i].WriteBareTo(w)
	}
}

func (o *TLMessagesEditInlineBotMessage) String() string {
	return tl.Pretty(o)
}

// TLMessagesGetBotCallbackAnswer represents func messages.getBotCallbackAnswer#810a9fec flags:# flags.1?game:true peer:InputPeer msg_id:int flags.0?data:bytes = messages.BotCallbackAnswer from Telegram
type TLMessagesGetBotCallbackAnswer struct {
	Flags uint            // flags:#
	Game  bool            // flags.1?game:true
	Peer  TLInputPeerType // peer:InputPeer
	MsgID int             // msg_id:int
	Data  []byte          // flags.0?data:bytes
}

func (o *TLMessagesGetBotCallbackAnswer) Cmd() uint32 {
	return TagMessagesGetBotCallbackAnswer
}

func (o *TLMessagesGetBotCallbackAnswer) ReadBareFrom(r *tl.Reader) {
	o.Flags = uint(r.ReadUint32())
	o.Game = true
	o.Peer = Schema.ReadLimitedBoxedObjectFrom(r, TagInputPeerEmpty, TagInputPeerSelf, TagInputPeerChat, TagInputPeerUser, TagInputPeerChannel).(TLInputPeerType)
	o.MsgID = r.ReadInt()
	o.Data = r.ReadBlob()
}

func (o *TLMessagesGetBotCallbackAnswer) WriteBareTo(w *tl.Writer) {
	w.WriteUint32(uint32(o.Flags))
	w.WriteCmd(o.Peer.Cmd())
	o.Peer.WriteBareTo(w)
	w.WriteInt(o.MsgID)
	w.WriteBlob(o.Data)
}

func (o *TLMessagesGetBotCallbackAnswer) String() string {
	return tl.Pretty(o)
}

// TLMessagesSetBotCallbackAnswer represents func messages.setBotCallbackAnswer#d58f130a flags:# flags.1?alert:true query_id:long flags.0?message:string flags.2?url:string cache_time:int = Bool from Telegram
type TLMessagesSetBotCallbackAnswer struct {
	Flags     uint   // flags:#
	Alert     bool   // flags.1?alert:true
	QueryID   uint64 // query_id:long
	Message   string // flags.0?message:string
	Url       string // flags.2?url:string
	CacheTime int    // cache_time:int
}

func (o *TLMessagesSetBotCallbackAnswer) Cmd() uint32 {
	return TagMessagesSetBotCallbackAnswer
}

func (o *TLMessagesSetBotCallbackAnswer) ReadBareFrom(r *tl.Reader) {
	o.Flags = uint(r.ReadUint32())
	o.Alert = true
	o.QueryID = r.ReadUint64()
	o.Message = r.ReadString()
	o.Url = r.ReadString()
	o.CacheTime = r.ReadInt()
}

func (o *TLMessagesSetBotCallbackAnswer) WriteBareTo(w *tl.Writer) {
	w.WriteUint32(uint32(o.Flags))
	w.WriteUint64(o.QueryID)
	w.WriteString(o.Message)
	w.WriteString(o.Url)
	w.WriteInt(o.CacheTime)
}

func (o *TLMessagesSetBotCallbackAnswer) String() string {
	return tl.Pretty(o)
}

// TLMessagesGetPeerDialogs represents func messages.getPeerDialogs#2d9776b9 peers:Vector<InputPeer> = messages.PeerDialogs from Telegram
type TLMessagesGetPeerDialogs struct {
	Peers []TLInputPeerType // peers:Vector<InputPeer>
}

func (o *TLMessagesGetPeerDialogs) Cmd() uint32 {
	return TagMessagesGetPeerDialogs
}

func (o *TLMessagesGetPeerDialogs) ReadBareFrom(r *tl.Reader) {
	if cmd := r.ReadCmd(); cmd != TagVector {
		r.Fail(errors.New("expected: vector"))
	}
	o.Peers = make([]TLInputPeerType, r.ReadInt())
	for i := 0; i < len(o.Peers); i++ {
		o.Peers[i] = Schema.ReadLimitedBoxedObjectFrom(r, TagInputPeerEmpty, TagInputPeerSelf, TagInputPeerChat, TagInputPeerUser, TagInputPeerChannel).(TLInputPeerType)
	}
}

func (o *TLMessagesGetPeerDialogs) WriteBareTo(w *tl.Writer) {
	w.WriteCmd(TagVector)
	w.WriteInt(len(o.Peers))
	for i := 0; i < len(o.Peers); i++ {
		w.WriteCmd(o.Peers[i].Cmd())
		o.Peers[i].WriteBareTo(w)
	}
}

func (o *TLMessagesGetPeerDialogs) String() string {
	return tl.Pretty(o)
}

// TLMessagesSaveDraft represents func messages.saveDraft#bc39e14b flags:# flags.1?no_webpage:true flags.0?reply_to_msg_id:int peer:InputPeer message:string flags.3?entities:Vector<MessageEntity> = Bool from Telegram
type TLMessagesSaveDraft struct {
	Flags        uint                  // flags:#
	NoWebpage    bool                  // flags.1?no_webpage:true
	ReplyToMsgID int                   // flags.0?reply_to_msg_id:int
	Peer         TLInputPeerType       // peer:InputPeer
	Message      string                // message:string
	Entities     []TLMessageEntityType // flags.3?entities:Vector<MessageEntity>
}

func (o *TLMessagesSaveDraft) Cmd() uint32 {
	return TagMessagesSaveDraft
}

func (o *TLMessagesSaveDraft) ReadBareFrom(r *tl.Reader) {
	o.Flags = uint(r.ReadUint32())
	o.NoWebpage = true
	o.ReplyToMsgID = r.ReadInt()
	o.Peer = Schema.ReadLimitedBoxedObjectFrom(r, TagInputPeerEmpty, TagInputPeerSelf, TagInputPeerChat, TagInputPeerUser, TagInputPeerChannel).(TLInputPeerType)
	o.Message = r.ReadString()
	if cmd := r.ReadCmd(); cmd != TagVector {
		r.Fail(errors.New("expected: vector"))
	}
	o.Entities = make([]TLMessageEntityType, r.ReadInt())
	for i := 0; i < len(o.Entities); i++ {
		o.Entities[i] = Schema.ReadLimitedBoxedObjectFrom(r, TagMessageEntityUnknown, TagMessageEntityMention, TagMessageEntityHashtag, TagMessageEntityBotCommand, TagMessageEntityUrl, TagMessageEntityEmail, TagMessageEntityBold, TagMessageEntityItalic, TagMessageEntityCode, TagMessageEntityPre, TagMessageEntityTextUrl, TagMessageEntityMentionName, TagInputMessageEntityMentionName).(TLMessageEntityType)
	}
}

func (o *TLMessagesSaveDraft) WriteBareTo(w *tl.Writer) {
	w.WriteUint32(uint32(o.Flags))
	w.WriteInt(o.ReplyToMsgID)
	w.WriteCmd(o.Peer.Cmd())
	o.Peer.WriteBareTo(w)
	w.WriteString(o.Message)
	w.WriteCmd(TagVector)
	w.WriteInt(len(o.Entities))
	for i := 0; i < len(o.Entities); i++ {
		w.WriteCmd(o.Entities[i].Cmd())
		o.Entities[i].WriteBareTo(w)
	}
}

func (o *TLMessagesSaveDraft) String() string {
	return tl.Pretty(o)
}

// TLMessagesGetAllDrafts represents func messages.getAllDrafts#6a3f8d65 = Updates from Telegram
type TLMessagesGetAllDrafts struct {
}

func (o *TLMessagesGetAllDrafts) Cmd() uint32 {
	return TagMessagesGetAllDrafts
}

func (o *TLMessagesGetAllDrafts) ReadBareFrom(r *tl.Reader) {
}

func (o *TLMessagesGetAllDrafts) WriteBareTo(w *tl.Writer) {
}

func (o *TLMessagesGetAllDrafts) String() string {
	return tl.Pretty(o)
}

// TLMessagesGetFeaturedStickers represents func messages.getFeaturedStickers#2dacca4f hash:int = messages.FeaturedStickers from Telegram
type TLMessagesGetFeaturedStickers struct {
	Hash int // hash:int
}

func (o *TLMessagesGetFeaturedStickers) Cmd() uint32 {
	return TagMessagesGetFeaturedStickers
}

func (o *TLMessagesGetFeaturedStickers) ReadBareFrom(r *tl.Reader) {
	o.Hash = r.ReadInt()
}

func (o *TLMessagesGetFeaturedStickers) WriteBareTo(w *tl.Writer) {
	w.WriteInt(o.Hash)
}

func (o *TLMessagesGetFeaturedStickers) String() string {
	return tl.Pretty(o)
}

// TLMessagesReadFeaturedStickers represents func messages.readFeaturedStickers#5b118126 id:Vector<long> = Bool from Telegram
type TLMessagesReadFeaturedStickers struct {
	ID []uint64 // id:Vector<long>
}

func (o *TLMessagesReadFeaturedStickers) Cmd() uint32 {
	return TagMessagesReadFeaturedStickers
}

func (o *TLMessagesReadFeaturedStickers) ReadBareFrom(r *tl.Reader) {
	if cmd := r.ReadCmd(); cmd != TagVector {
		r.Fail(errors.New("expected: vector"))
	}
	o.ID = make([]uint64, r.ReadInt())
	for i := 0; i < len(o.ID); i++ {
		o.ID[i] = r.ReadUint64()
	}
}

func (o *TLMessagesReadFeaturedStickers) WriteBareTo(w *tl.Writer) {
	w.WriteCmd(TagVector)
	w.WriteInt(len(o.ID))
	for i := 0; i < len(o.ID); i++ {
		w.WriteUint64(o.ID[i])
	}
}

func (o *TLMessagesReadFeaturedStickers) String() string {
	return tl.Pretty(o)
}

// TLMessagesGetRecentStickers represents func messages.getRecentStickers#5ea192c9 flags:# flags.0?attached:true hash:int = messages.RecentStickers from Telegram
type TLMessagesGetRecentStickers struct {
	Flags    uint // flags:#
	Attached bool // flags.0?attached:true
	Hash     int  // hash:int
}

func (o *TLMessagesGetRecentStickers) Cmd() uint32 {
	return TagMessagesGetRecentStickers
}

func (o *TLMessagesGetRecentStickers) ReadBareFrom(r *tl.Reader) {
	o.Flags = uint(r.ReadUint32())
	o.Attached = true
	o.Hash = r.ReadInt()
}

func (o *TLMessagesGetRecentStickers) WriteBareTo(w *tl.Writer) {
	w.WriteUint32(uint32(o.Flags))
	w.WriteInt(o.Hash)
}

func (o *TLMessagesGetRecentStickers) String() string {
	return tl.Pretty(o)
}

// TLMessagesSaveRecentSticker represents func messages.saveRecentSticker#392718f8 flags:# flags.0?attached:true id:InputDocument unsave:Bool = Bool from Telegram
type TLMessagesSaveRecentSticker struct {
	Flags    uint                // flags:#
	Attached bool                // flags.0?attached:true
	ID       TLInputDocumentType // id:InputDocument
	Unsave   bool                // unsave:Bool
}

func (o *TLMessagesSaveRecentSticker) Cmd() uint32 {
	return TagMessagesSaveRecentSticker
}

func (o *TLMessagesSaveRecentSticker) ReadBareFrom(r *tl.Reader) {
	o.Flags = uint(r.ReadUint32())
	o.Attached = true
	o.ID = Schema.ReadLimitedBoxedObjectFrom(r, TagInputDocumentEmpty, TagInputDocument).(TLInputDocumentType)
	r.ExpectCmd(TagBoolTrue, TagBoolFalse)
	o.Unsave = (r.ReadCmd() == TagBoolTrue)
}

func (o *TLMessagesSaveRecentSticker) WriteBareTo(w *tl.Writer) {
	w.WriteUint32(uint32(o.Flags))
	w.WriteCmd(o.ID.Cmd())
	o.ID.WriteBareTo(w)
	if o.Unsave {
		w.WriteCmd(TagBoolTrue)
	} else {
		w.WriteCmd(TagBoolFalse)
	}
}

func (o *TLMessagesSaveRecentSticker) String() string {
	return tl.Pretty(o)
}

// TLMessagesClearRecentStickers represents func messages.clearRecentStickers#8999602d flags:# flags.0?attached:true = Bool from Telegram
type TLMessagesClearRecentStickers struct {
	Flags    uint // flags:#
	Attached bool // flags.0?attached:true
}

func (o *TLMessagesClearRecentStickers) Cmd() uint32 {
	return TagMessagesClearRecentStickers
}

func (o *TLMessagesClearRecentStickers) ReadBareFrom(r *tl.Reader) {
	o.Flags = uint(r.ReadUint32())
	o.Attached = true
}

func (o *TLMessagesClearRecentStickers) WriteBareTo(w *tl.Writer) {
	w.WriteUint32(uint32(o.Flags))
}

func (o *TLMessagesClearRecentStickers) String() string {
	return tl.Pretty(o)
}

// TLMessagesGetArchivedStickers represents func messages.getArchivedStickers#57f17692 flags:# flags.0?masks:true offset_id:long limit:int = messages.ArchivedStickers from Telegram
type TLMessagesGetArchivedStickers struct {
	Flags    uint   // flags:#
	Masks    bool   // flags.0?masks:true
	OffsetID uint64 // offset_id:long
	Limit    int    // limit:int
}

func (o *TLMessagesGetArchivedStickers) Cmd() uint32 {
	return TagMessagesGetArchivedStickers
}

func (o *TLMessagesGetArchivedStickers) ReadBareFrom(r *tl.Reader) {
	o.Flags = uint(r.ReadUint32())
	o.Masks = true
	o.OffsetID = r.ReadUint64()
	o.Limit = r.ReadInt()
}

func (o *TLMessagesGetArchivedStickers) WriteBareTo(w *tl.Writer) {
	w.WriteUint32(uint32(o.Flags))
	w.WriteUint64(o.OffsetID)
	w.WriteInt(o.Limit)
}

func (o *TLMessagesGetArchivedStickers) String() string {
	return tl.Pretty(o)
}

// TLMessagesGetMaskStickers represents func messages.getMaskStickers#65b8c79f hash:int = messages.AllStickers from Telegram
type TLMessagesGetMaskStickers struct {
	Hash int // hash:int
}

func (o *TLMessagesGetMaskStickers) Cmd() uint32 {
	return TagMessagesGetMaskStickers
}

func (o *TLMessagesGetMaskStickers) ReadBareFrom(r *tl.Reader) {
	o.Hash = r.ReadInt()
}

func (o *TLMessagesGetMaskStickers) WriteBareTo(w *tl.Writer) {
	w.WriteInt(o.Hash)
}

func (o *TLMessagesGetMaskStickers) String() string {
	return tl.Pretty(o)
}

// TLMessagesGetAttachedStickers represents func messages.getAttachedStickers#cc5b67cc media:InputStickeredMedia = Vector<StickerSetCovered> from Telegram
type TLMessagesGetAttachedStickers struct {
	Media TLInputStickeredMediaType // media:InputStickeredMedia
}

func (o *TLMessagesGetAttachedStickers) Cmd() uint32 {
	return TagMessagesGetAttachedStickers
}

func (o *TLMessagesGetAttachedStickers) ReadBareFrom(r *tl.Reader) {
	o.Media = Schema.ReadLimitedBoxedObjectFrom(r, TagInputStickeredMediaPhoto, TagInputStickeredMediaDocument).(TLInputStickeredMediaType)
}

func (o *TLMessagesGetAttachedStickers) WriteBareTo(w *tl.Writer) {
	w.WriteCmd(o.Media.Cmd())
	o.Media.WriteBareTo(w)
}

func (o *TLMessagesGetAttachedStickers) String() string {
	return tl.Pretty(o)
}

// TLMessagesSetGameScore represents func messages.setGameScore#8ef8ecc0 flags:# flags.0?edit_message:true flags.1?force:true peer:InputPeer id:int user_id:InputUser score:int = Updates from Telegram
type TLMessagesSetGameScore struct {
	Flags       uint            // flags:#
	EditMessage bool            // flags.0?edit_message:true
	Force       bool            // flags.1?force:true
	Peer        TLInputPeerType // peer:InputPeer
	ID          int             // id:int
	UserID      TLInputUserType // user_id:InputUser
	Score       int             // score:int
}

func (o *TLMessagesSetGameScore) Cmd() uint32 {
	return TagMessagesSetGameScore
}

func (o *TLMessagesSetGameScore) ReadBareFrom(r *tl.Reader) {
	o.Flags = uint(r.ReadUint32())
	o.EditMessage = true
	o.Force = true
	o.Peer = Schema.ReadLimitedBoxedObjectFrom(r, TagInputPeerEmpty, TagInputPeerSelf, TagInputPeerChat, TagInputPeerUser, TagInputPeerChannel).(TLInputPeerType)
	o.ID = r.ReadInt()
	o.UserID = Schema.ReadLimitedBoxedObjectFrom(r, TagInputUserEmpty, TagInputUserSelf, TagInputUser).(TLInputUserType)
	o.Score = r.ReadInt()
}

func (o *TLMessagesSetGameScore) WriteBareTo(w *tl.Writer) {
	w.WriteUint32(uint32(o.Flags))
	w.WriteCmd(o.Peer.Cmd())
	o.Peer.WriteBareTo(w)
	w.WriteInt(o.ID)
	w.WriteCmd(o.UserID.Cmd())
	o.UserID.WriteBareTo(w)
	w.WriteInt(o.Score)
}

func (o *TLMessagesSetGameScore) String() string {
	return tl.Pretty(o)
}

// TLMessagesSetInlineGameScore represents func messages.setInlineGameScore#15ad9f64 flags:# flags.0?edit_message:true flags.1?force:true id:InputBotInlineMessageID user_id:InputUser score:int = Bool from Telegram
type TLMessagesSetInlineGameScore struct {
	Flags       uint                       // flags:#
	EditMessage bool                       // flags.0?edit_message:true
	Force       bool                       // flags.1?force:true
	ID          *TLInputBotInlineMessageID // id:InputBotInlineMessageID
	UserID      TLInputUserType            // user_id:InputUser
	Score       int                        // score:int
}

func (o *TLMessagesSetInlineGameScore) Cmd() uint32 {
	return TagMessagesSetInlineGameScore
}

func (o *TLMessagesSetInlineGameScore) ReadBareFrom(r *tl.Reader) {
	o.Flags = uint(r.ReadUint32())
	o.EditMessage = true
	o.Force = true
	if cmd := r.ReadCmd(); cmd != TagInputBotInlineMessageID {
		r.Fail(errors.New("expected: inputBotInlineMessageID"))
	}
	o.ID = new(TLInputBotInlineMessageID)
	o.ID.ReadBareFrom(r)
	o.UserID = Schema.ReadLimitedBoxedObjectFrom(r, TagInputUserEmpty, TagInputUserSelf, TagInputUser).(TLInputUserType)
	o.Score = r.ReadInt()
}

func (o *TLMessagesSetInlineGameScore) WriteBareTo(w *tl.Writer) {
	w.WriteUint32(uint32(o.Flags))
	w.WriteCmd(TagInputBotInlineMessageID)
	o.ID.WriteBareTo(w)
	w.WriteCmd(o.UserID.Cmd())
	o.UserID.WriteBareTo(w)
	w.WriteInt(o.Score)
}

func (o *TLMessagesSetInlineGameScore) String() string {
	return tl.Pretty(o)
}

// TLMessagesGetGameHighScores represents func messages.getGameHighScores#e822649d peer:InputPeer id:int user_id:InputUser = messages.HighScores from Telegram
type TLMessagesGetGameHighScores struct {
	Peer   TLInputPeerType // peer:InputPeer
	ID     int             // id:int
	UserID TLInputUserType // user_id:InputUser
}

func (o *TLMessagesGetGameHighScores) Cmd() uint32 {
	return TagMessagesGetGameHighScores
}

func (o *TLMessagesGetGameHighScores) ReadBareFrom(r *tl.Reader) {
	o.Peer = Schema.ReadLimitedBoxedObjectFrom(r, TagInputPeerEmpty, TagInputPeerSelf, TagInputPeerChat, TagInputPeerUser, TagInputPeerChannel).(TLInputPeerType)
	o.ID = r.ReadInt()
	o.UserID = Schema.ReadLimitedBoxedObjectFrom(r, TagInputUserEmpty, TagInputUserSelf, TagInputUser).(TLInputUserType)
}

func (o *TLMessagesGetGameHighScores) WriteBareTo(w *tl.Writer) {
	w.WriteCmd(o.Peer.Cmd())
	o.Peer.WriteBareTo(w)
	w.WriteInt(o.ID)
	w.WriteCmd(o.UserID.Cmd())
	o.UserID.WriteBareTo(w)
}

func (o *TLMessagesGetGameHighScores) String() string {
	return tl.Pretty(o)
}

// TLMessagesGetInlineGameHighScores represents func messages.getInlineGameHighScores#0f635e1b id:InputBotInlineMessageID user_id:InputUser = messages.HighScores from Telegram
type TLMessagesGetInlineGameHighScores struct {
	ID     *TLInputBotInlineMessageID // id:InputBotInlineMessageID
	UserID TLInputUserType            // user_id:InputUser
}

func (o *TLMessagesGetInlineGameHighScores) Cmd() uint32 {
	return TagMessagesGetInlineGameHighScores
}

func (o *TLMessagesGetInlineGameHighScores) ReadBareFrom(r *tl.Reader) {
	if cmd := r.ReadCmd(); cmd != TagInputBotInlineMessageID {
		r.Fail(errors.New("expected: inputBotInlineMessageID"))
	}
	o.ID = new(TLInputBotInlineMessageID)
	o.ID.ReadBareFrom(r)
	o.UserID = Schema.ReadLimitedBoxedObjectFrom(r, TagInputUserEmpty, TagInputUserSelf, TagInputUser).(TLInputUserType)
}

func (o *TLMessagesGetInlineGameHighScores) WriteBareTo(w *tl.Writer) {
	w.WriteCmd(TagInputBotInlineMessageID)
	o.ID.WriteBareTo(w)
	w.WriteCmd(o.UserID.Cmd())
	o.UserID.WriteBareTo(w)
}

func (o *TLMessagesGetInlineGameHighScores) String() string {
	return tl.Pretty(o)
}

// TLMessagesGetCommonChats represents func messages.getCommonChats#0d0a48c4 user_id:InputUser max_id:int limit:int = messages.Chats from Telegram
type TLMessagesGetCommonChats struct {
	UserID TLInputUserType // user_id:InputUser
	MaxID  int             // max_id:int
	Limit  int             // limit:int
}

func (o *TLMessagesGetCommonChats) Cmd() uint32 {
	return TagMessagesGetCommonChats
}

func (o *TLMessagesGetCommonChats) ReadBareFrom(r *tl.Reader) {
	o.UserID = Schema.ReadLimitedBoxedObjectFrom(r, TagInputUserEmpty, TagInputUserSelf, TagInputUser).(TLInputUserType)
	o.MaxID = r.ReadInt()
	o.Limit = r.ReadInt()
}

func (o *TLMessagesGetCommonChats) WriteBareTo(w *tl.Writer) {
	w.WriteCmd(o.UserID.Cmd())
	o.UserID.WriteBareTo(w)
	w.WriteInt(o.MaxID)
	w.WriteInt(o.Limit)
}

func (o *TLMessagesGetCommonChats) String() string {
	return tl.Pretty(o)
}

// TLMessagesGetAllChats represents func messages.getAllChats#eba80ff0 except_ids:Vector<int> = messages.Chats from Telegram
type TLMessagesGetAllChats struct {
	ExceptIDs []int // except_ids:Vector<int>
}

func (o *TLMessagesGetAllChats) Cmd() uint32 {
	return TagMessagesGetAllChats
}

func (o *TLMessagesGetAllChats) ReadBareFrom(r *tl.Reader) {
	if cmd := r.ReadCmd(); cmd != TagVector {
		r.Fail(errors.New("expected: vector"))
	}
	o.ExceptIDs = make([]int, r.ReadInt())
	for i := 0; i < len(o.ExceptIDs); i++ {
		o.ExceptIDs[i] = r.ReadInt()
	}
}

func (o *TLMessagesGetAllChats) WriteBareTo(w *tl.Writer) {
	w.WriteCmd(TagVector)
	w.WriteInt(len(o.ExceptIDs))
	for i := 0; i < len(o.ExceptIDs); i++ {
		w.WriteInt(o.ExceptIDs[i])
	}
}

func (o *TLMessagesGetAllChats) String() string {
	return tl.Pretty(o)
}

// TLMessagesGetWebPage represents func messages.getWebPage#32ca8f91 url:string hash:int = WebPage from Telegram
type TLMessagesGetWebPage struct {
	Url  string // url:string
	Hash int    // hash:int
}

func (o *TLMessagesGetWebPage) Cmd() uint32 {
	return TagMessagesGetWebPage
}

func (o *TLMessagesGetWebPage) ReadBareFrom(r *tl.Reader) {
	o.Url = r.ReadString()
	o.Hash = r.ReadInt()
}

func (o *TLMessagesGetWebPage) WriteBareTo(w *tl.Writer) {
	w.WriteString(o.Url)
	w.WriteInt(o.Hash)
}

func (o *TLMessagesGetWebPage) String() string {
	return tl.Pretty(o)
}

// TLMessagesToggleDialogPin represents func messages.toggleDialogPin#3289be6a flags:# flags.0?pinned:true peer:InputPeer = Bool from Telegram
type TLMessagesToggleDialogPin struct {
	Flags  uint            // flags:#
	Pinned bool            // flags.0?pinned:true
	Peer   TLInputPeerType // peer:InputPeer
}

func (o *TLMessagesToggleDialogPin) Cmd() uint32 {
	return TagMessagesToggleDialogPin
}

func (o *TLMessagesToggleDialogPin) ReadBareFrom(r *tl.Reader) {
	o.Flags = uint(r.ReadUint32())
	o.Pinned = true
	o.Peer = Schema.ReadLimitedBoxedObjectFrom(r, TagInputPeerEmpty, TagInputPeerSelf, TagInputPeerChat, TagInputPeerUser, TagInputPeerChannel).(TLInputPeerType)
}

func (o *TLMessagesToggleDialogPin) WriteBareTo(w *tl.Writer) {
	w.WriteUint32(uint32(o.Flags))
	w.WriteCmd(o.Peer.Cmd())
	o.Peer.WriteBareTo(w)
}

func (o *TLMessagesToggleDialogPin) String() string {
	return tl.Pretty(o)
}

// TLMessagesReorderPinnedDialogs represents func messages.reorderPinnedDialogs#959ff644 flags:# flags.0?force:true order:Vector<InputPeer> = Bool from Telegram
type TLMessagesReorderPinnedDialogs struct {
	Flags uint              // flags:#
	Force bool              // flags.0?force:true
	Order []TLInputPeerType // order:Vector<InputPeer>
}

func (o *TLMessagesReorderPinnedDialogs) Cmd() uint32 {
	return TagMessagesReorderPinnedDialogs
}

func (o *TLMessagesReorderPinnedDialogs) ReadBareFrom(r *tl.Reader) {
	o.Flags = uint(r.ReadUint32())
	o.Force = true
	if cmd := r.ReadCmd(); cmd != TagVector {
		r.Fail(errors.New("expected: vector"))
	}
	o.Order = make([]TLInputPeerType, r.ReadInt())
	for i := 0; i < len(o.Order); i++ {
		o.Order[i] = Schema.ReadLimitedBoxedObjectFrom(r, TagInputPeerEmpty, TagInputPeerSelf, TagInputPeerChat, TagInputPeerUser, TagInputPeerChannel).(TLInputPeerType)
	}
}

func (o *TLMessagesReorderPinnedDialogs) WriteBareTo(w *tl.Writer) {
	w.WriteUint32(uint32(o.Flags))
	w.WriteCmd(TagVector)
	w.WriteInt(len(o.Order))
	for i := 0; i < len(o.Order); i++ {
		w.WriteCmd(o.Order[i].Cmd())
		o.Order[i].WriteBareTo(w)
	}
}

func (o *TLMessagesReorderPinnedDialogs) String() string {
	return tl.Pretty(o)
}

// TLMessagesGetPinnedDialogs represents func messages.getPinnedDialogs#e254d64e = messages.PeerDialogs from Telegram
type TLMessagesGetPinnedDialogs struct {
}

func (o *TLMessagesGetPinnedDialogs) Cmd() uint32 {
	return TagMessagesGetPinnedDialogs
}

func (o *TLMessagesGetPinnedDialogs) ReadBareFrom(r *tl.Reader) {
}

func (o *TLMessagesGetPinnedDialogs) WriteBareTo(w *tl.Writer) {
}

func (o *TLMessagesGetPinnedDialogs) String() string {
	return tl.Pretty(o)
}

// TLMessagesSetBotShippingResults represents func messages.setBotShippingResults#e5f672fa flags:# query_id:long flags.0?error:string flags.1?shipping_options:Vector<ShippingOption> = Bool from Telegram
type TLMessagesSetBotShippingResults struct {
	Flags           uint                // flags:#
	QueryID         uint64              // query_id:long
	Error           string              // flags.0?error:string
	ShippingOptions []*TLShippingOption // flags.1?shipping_options:Vector<ShippingOption>
}

func (o *TLMessagesSetBotShippingResults) Cmd() uint32 {
	return TagMessagesSetBotShippingResults
}

func (o *TLMessagesSetBotShippingResults) ReadBareFrom(r *tl.Reader) {
	o.Flags = uint(r.ReadUint32())
	o.QueryID = r.ReadUint64()
	o.Error = r.ReadString()
	if cmd := r.ReadCmd(); cmd != TagVector {
		r.Fail(errors.New("expected: vector"))
	}
	o.ShippingOptions = make([]*TLShippingOption, r.ReadInt())
	for i := 0; i < len(o.ShippingOptions); i++ {
		if cmd := r.ReadCmd(); cmd != TagShippingOption {
			r.Fail(errors.New("expected: shippingOption"))
		}
		o.ShippingOptions[i] = new(TLShippingOption)
		o.ShippingOptions[i].ReadBareFrom(r)
	}
}

func (o *TLMessagesSetBotShippingResults) WriteBareTo(w *tl.Writer) {
	w.WriteUint32(uint32(o.Flags))
	w.WriteUint64(o.QueryID)
	w.WriteString(o.Error)
	w.WriteCmd(TagVector)
	w.WriteInt(len(o.ShippingOptions))
	for i := 0; i < len(o.ShippingOptions); i++ {
		w.WriteCmd(TagShippingOption)
		o.ShippingOptions[i].WriteBareTo(w)
	}
}

func (o *TLMessagesSetBotShippingResults) String() string {
	return tl.Pretty(o)
}

// TLMessagesSetBotPrecheckoutResults represents func messages.setBotPrecheckoutResults#09c2dd95 flags:# flags.1?success:true query_id:long flags.0?error:string = Bool from Telegram
type TLMessagesSetBotPrecheckoutResults struct {
	Flags   uint   // flags:#
	Success bool   // flags.1?success:true
	QueryID uint64 // query_id:long
	Error   string // flags.0?error:string
}

func (o *TLMessagesSetBotPrecheckoutResults) Cmd() uint32 {
	return TagMessagesSetBotPrecheckoutResults
}

func (o *TLMessagesSetBotPrecheckoutResults) ReadBareFrom(r *tl.Reader) {
	o.Flags = uint(r.ReadUint32())
	o.Success = true
	o.QueryID = r.ReadUint64()
	o.Error = r.ReadString()
}

func (o *TLMessagesSetBotPrecheckoutResults) WriteBareTo(w *tl.Writer) {
	w.WriteUint32(uint32(o.Flags))
	w.WriteUint64(o.QueryID)
	w.WriteString(o.Error)
}

func (o *TLMessagesSetBotPrecheckoutResults) String() string {
	return tl.Pretty(o)
}

// TLUpdatesGetState represents func updates.getState#edd4882a = updates.State from Telegram
type TLUpdatesGetState struct {
}

func (o *TLUpdatesGetState) Cmd() uint32 {
	return TagUpdatesGetState
}

func (o *TLUpdatesGetState) ReadBareFrom(r *tl.Reader) {
}

func (o *TLUpdatesGetState) WriteBareTo(w *tl.Writer) {
}

func (o *TLUpdatesGetState) String() string {
	return tl.Pretty(o)
}

// TLUpdatesGetDifference represents func updates.getDifference#25939651 flags:# pts:int flags.0?pts_total_limit:int date:int qts:int = updates.Difference from Telegram
type TLUpdatesGetDifference struct {
	Flags         uint // flags:#
	Pts           int  // pts:int
	PtsTotalLimit int  // flags.0?pts_total_limit:int
	Date          int  // date:int
	Qts           int  // qts:int
}

func (o *TLUpdatesGetDifference) Cmd() uint32 {
	return TagUpdatesGetDifference
}

func (o *TLUpdatesGetDifference) ReadBareFrom(r *tl.Reader) {
	o.Flags = uint(r.ReadUint32())
	o.Pts = r.ReadInt()
	o.PtsTotalLimit = r.ReadInt()
	o.Date = r.ReadInt()
	o.Qts = r.ReadInt()
}

func (o *TLUpdatesGetDifference) WriteBareTo(w *tl.Writer) {
	w.WriteUint32(uint32(o.Flags))
	w.WriteInt(o.Pts)
	w.WriteInt(o.PtsTotalLimit)
	w.WriteInt(o.Date)
	w.WriteInt(o.Qts)
}

func (o *TLUpdatesGetDifference) String() string {
	return tl.Pretty(o)
}

// TLUpdatesGetChannelDifference represents func updates.getChannelDifference#03173d78 flags:# flags.0?force:true channel:InputChannel filter:ChannelMessagesFilter pts:int limit:int = updates.ChannelDifference from Telegram
type TLUpdatesGetChannelDifference struct {
	Flags   uint                        // flags:#
	Force   bool                        // flags.0?force:true
	Channel TLInputChannelType          // channel:InputChannel
	Filter  TLChannelMessagesFilterType // filter:ChannelMessagesFilter
	Pts     int                         // pts:int
	Limit   int                         // limit:int
}

func (o *TLUpdatesGetChannelDifference) Cmd() uint32 {
	return TagUpdatesGetChannelDifference
}

func (o *TLUpdatesGetChannelDifference) ReadBareFrom(r *tl.Reader) {
	o.Flags = uint(r.ReadUint32())
	o.Force = true
	o.Channel = Schema.ReadLimitedBoxedObjectFrom(r, TagInputChannelEmpty, TagInputChannel).(TLInputChannelType)
	o.Filter = Schema.ReadLimitedBoxedObjectFrom(r, TagChannelMessagesFilterEmpty, TagChannelMessagesFilter).(TLChannelMessagesFilterType)
	o.Pts = r.ReadInt()
	o.Limit = r.ReadInt()
}

func (o *TLUpdatesGetChannelDifference) WriteBareTo(w *tl.Writer) {
	w.WriteUint32(uint32(o.Flags))
	w.WriteCmd(o.Channel.Cmd())
	o.Channel.WriteBareTo(w)
	w.WriteCmd(o.Filter.Cmd())
	o.Filter.WriteBareTo(w)
	w.WriteInt(o.Pts)
	w.WriteInt(o.Limit)
}

func (o *TLUpdatesGetChannelDifference) String() string {
	return tl.Pretty(o)
}

// TLPhotosUpdateProfilePhoto represents func photos.updateProfilePhoto#f0bb5152 id:InputPhoto = UserProfilePhoto from Telegram
type TLPhotosUpdateProfilePhoto struct {
	ID TLInputPhotoType // id:InputPhoto
}

func (o *TLPhotosUpdateProfilePhoto) Cmd() uint32 {
	return TagPhotosUpdateProfilePhoto
}

func (o *TLPhotosUpdateProfilePhoto) ReadBareFrom(r *tl.Reader) {
	o.ID = Schema.ReadLimitedBoxedObjectFrom(r, TagInputPhotoEmpty, TagInputPhoto).(TLInputPhotoType)
}

func (o *TLPhotosUpdateProfilePhoto) WriteBareTo(w *tl.Writer) {
	w.WriteCmd(o.ID.Cmd())
	o.ID.WriteBareTo(w)
}

func (o *TLPhotosUpdateProfilePhoto) String() string {
	return tl.Pretty(o)
}

// TLPhotosUploadProfilePhoto represents func photos.uploadProfilePhoto#4f32c098 file:InputFile = photos.Photo from Telegram
type TLPhotosUploadProfilePhoto struct {
	File TLInputFileType // file:InputFile
}

func (o *TLPhotosUploadProfilePhoto) Cmd() uint32 {
	return TagPhotosUploadProfilePhoto
}

func (o *TLPhotosUploadProfilePhoto) ReadBareFrom(r *tl.Reader) {
	o.File = Schema.ReadLimitedBoxedObjectFrom(r, TagInputFile, TagInputFileBig).(TLInputFileType)
}

func (o *TLPhotosUploadProfilePhoto) WriteBareTo(w *tl.Writer) {
	w.WriteCmd(o.File.Cmd())
	o.File.WriteBareTo(w)
}

func (o *TLPhotosUploadProfilePhoto) String() string {
	return tl.Pretty(o)
}

// TLPhotosDeletePhotos represents func photos.deletePhotos#87cf7f2f id:Vector<InputPhoto> = Vector<long> from Telegram
type TLPhotosDeletePhotos struct {
	ID []TLInputPhotoType // id:Vector<InputPhoto>
}

func (o *TLPhotosDeletePhotos) Cmd() uint32 {
	return TagPhotosDeletePhotos
}

func (o *TLPhotosDeletePhotos) ReadBareFrom(r *tl.Reader) {
	if cmd := r.ReadCmd(); cmd != TagVector {
		r.Fail(errors.New("expected: vector"))
	}
	o.ID = make([]TLInputPhotoType, r.ReadInt())
	for i := 0; i < len(o.ID); i++ {
		o.ID[i] = Schema.ReadLimitedBoxedObjectFrom(r, TagInputPhotoEmpty, TagInputPhoto).(TLInputPhotoType)
	}
}

func (o *TLPhotosDeletePhotos) WriteBareTo(w *tl.Writer) {
	w.WriteCmd(TagVector)
	w.WriteInt(len(o.ID))
	for i := 0; i < len(o.ID); i++ {
		w.WriteCmd(o.ID[i].Cmd())
		o.ID[i].WriteBareTo(w)
	}
}

func (o *TLPhotosDeletePhotos) String() string {
	return tl.Pretty(o)
}

// TLPhotosGetUserPhotos represents func photos.getUserPhotos#91cd32a8 user_id:InputUser offset:int max_id:long limit:int = photos.Photos from Telegram
type TLPhotosGetUserPhotos struct {
	UserID TLInputUserType // user_id:InputUser
	Offset int             // offset:int
	MaxID  uint64          // max_id:long
	Limit  int             // limit:int
}

func (o *TLPhotosGetUserPhotos) Cmd() uint32 {
	return TagPhotosGetUserPhotos
}

func (o *TLPhotosGetUserPhotos) ReadBareFrom(r *tl.Reader) {
	o.UserID = Schema.ReadLimitedBoxedObjectFrom(r, TagInputUserEmpty, TagInputUserSelf, TagInputUser).(TLInputUserType)
	o.Offset = r.ReadInt()
	o.MaxID = r.ReadUint64()
	o.Limit = r.ReadInt()
}

func (o *TLPhotosGetUserPhotos) WriteBareTo(w *tl.Writer) {
	w.WriteCmd(o.UserID.Cmd())
	o.UserID.WriteBareTo(w)
	w.WriteInt(o.Offset)
	w.WriteUint64(o.MaxID)
	w.WriteInt(o.Limit)
}

func (o *TLPhotosGetUserPhotos) String() string {
	return tl.Pretty(o)
}

// TLUploadSaveFilePart represents func upload.saveFilePart#b304a621 file_id:long file_part:int bytes:bytes = Bool from Telegram
type TLUploadSaveFilePart struct {
	FileID   uint64 // file_id:long
	FilePart int    // file_part:int
	Bytes    []byte // bytes:bytes
}

func (o *TLUploadSaveFilePart) Cmd() uint32 {
	return TagUploadSaveFilePart
}

func (o *TLUploadSaveFilePart) ReadBareFrom(r *tl.Reader) {
	o.FileID = r.ReadUint64()
	o.FilePart = r.ReadInt()
	o.Bytes = r.ReadBlob()
}

func (o *TLUploadSaveFilePart) WriteBareTo(w *tl.Writer) {
	w.WriteUint64(o.FileID)
	w.WriteInt(o.FilePart)
	w.WriteBlob(o.Bytes)
}

func (o *TLUploadSaveFilePart) String() string {
	return tl.Pretty(o)
}

// TLUploadGetFile represents func upload.getFile#e3a6cfb5 location:InputFileLocation offset:int limit:int = upload.File from Telegram
type TLUploadGetFile struct {
	Location TLInputFileLocationType // location:InputFileLocation
	Offset   int                     // offset:int
	Limit    int                     // limit:int
}

func (o *TLUploadGetFile) Cmd() uint32 {
	return TagUploadGetFile
}

func (o *TLUploadGetFile) ReadBareFrom(r *tl.Reader) {
	o.Location = Schema.ReadLimitedBoxedObjectFrom(r, TagInputFileLocation, TagInputEncryptedFileLocation, TagInputDocumentFileLocation).(TLInputFileLocationType)
	o.Offset = r.ReadInt()
	o.Limit = r.ReadInt()
}

func (o *TLUploadGetFile) WriteBareTo(w *tl.Writer) {
	w.WriteCmd(o.Location.Cmd())
	o.Location.WriteBareTo(w)
	w.WriteInt(o.Offset)
	w.WriteInt(o.Limit)
}

func (o *TLUploadGetFile) String() string {
	return tl.Pretty(o)
}

// TLUploadSaveBigFilePart represents func upload.saveBigFilePart#de7b673d file_id:long file_part:int file_total_parts:int bytes:bytes = Bool from Telegram
type TLUploadSaveBigFilePart struct {
	FileID         uint64 // file_id:long
	FilePart       int    // file_part:int
	FileTotalParts int    // file_total_parts:int
	Bytes          []byte // bytes:bytes
}

func (o *TLUploadSaveBigFilePart) Cmd() uint32 {
	return TagUploadSaveBigFilePart
}

func (o *TLUploadSaveBigFilePart) ReadBareFrom(r *tl.Reader) {
	o.FileID = r.ReadUint64()
	o.FilePart = r.ReadInt()
	o.FileTotalParts = r.ReadInt()
	o.Bytes = r.ReadBlob()
}

func (o *TLUploadSaveBigFilePart) WriteBareTo(w *tl.Writer) {
	w.WriteUint64(o.FileID)
	w.WriteInt(o.FilePart)
	w.WriteInt(o.FileTotalParts)
	w.WriteBlob(o.Bytes)
}

func (o *TLUploadSaveBigFilePart) String() string {
	return tl.Pretty(o)
}

// TLUploadGetWebFile represents func upload.getWebFile#24e6818d location:InputWebFileLocation offset:int limit:int = upload.WebFile from Telegram
type TLUploadGetWebFile struct {
	Location *TLInputWebFileLocation // location:InputWebFileLocation
	Offset   int                     // offset:int
	Limit    int                     // limit:int
}

func (o *TLUploadGetWebFile) Cmd() uint32 {
	return TagUploadGetWebFile
}

func (o *TLUploadGetWebFile) ReadBareFrom(r *tl.Reader) {
	if cmd := r.ReadCmd(); cmd != TagInputWebFileLocation {
		r.Fail(errors.New("expected: inputWebFileLocation"))
	}
	o.Location = new(TLInputWebFileLocation)
	o.Location.ReadBareFrom(r)
	o.Offset = r.ReadInt()
	o.Limit = r.ReadInt()
}

func (o *TLUploadGetWebFile) WriteBareTo(w *tl.Writer) {
	w.WriteCmd(TagInputWebFileLocation)
	o.Location.WriteBareTo(w)
	w.WriteInt(o.Offset)
	w.WriteInt(o.Limit)
}

func (o *TLUploadGetWebFile) String() string {
	return tl.Pretty(o)
}

// TLHelpGetConfig represents func help.getConfig#c4f9186b = Config from Telegram
type TLHelpGetConfig struct {
}

func (o *TLHelpGetConfig) Cmd() uint32 {
	return TagHelpGetConfig
}

func (o *TLHelpGetConfig) ReadBareFrom(r *tl.Reader) {
}

func (o *TLHelpGetConfig) WriteBareTo(w *tl.Writer) {
}

func (o *TLHelpGetConfig) String() string {
	return tl.Pretty(o)
}

// TLHelpGetNearestDC represents func help.getNearestDc#1fb33026 = NearestDc from Telegram
type TLHelpGetNearestDC struct {
}

func (o *TLHelpGetNearestDC) Cmd() uint32 {
	return TagHelpGetNearestDC
}

func (o *TLHelpGetNearestDC) ReadBareFrom(r *tl.Reader) {
}

func (o *TLHelpGetNearestDC) WriteBareTo(w *tl.Writer) {
}

func (o *TLHelpGetNearestDC) String() string {
	return tl.Pretty(o)
}

// TLHelpGetAppUpdate represents func help.getAppUpdate#ae2de196 = help.AppUpdate from Telegram
type TLHelpGetAppUpdate struct {
}

func (o *TLHelpGetAppUpdate) Cmd() uint32 {
	return TagHelpGetAppUpdate
}

func (o *TLHelpGetAppUpdate) ReadBareFrom(r *tl.Reader) {
}

func (o *TLHelpGetAppUpdate) WriteBareTo(w *tl.Writer) {
}

func (o *TLHelpGetAppUpdate) String() string {
	return tl.Pretty(o)
}

// TLHelpSaveAppLog represents func help.saveAppLog#6f02f748 events:Vector<InputAppEvent> = Bool from Telegram
type TLHelpSaveAppLog struct {
	Events []*TLInputAppEvent // events:Vector<InputAppEvent>
}

func (o *TLHelpSaveAppLog) Cmd() uint32 {
	return TagHelpSaveAppLog
}

func (o *TLHelpSaveAppLog) ReadBareFrom(r *tl.Reader) {
	if cmd := r.ReadCmd(); cmd != TagVector {
		r.Fail(errors.New("expected: vector"))
	}
	o.Events = make([]*TLInputAppEvent, r.ReadInt())
	for i := 0; i < len(o.Events); i++ {
		if cmd := r.ReadCmd(); cmd != TagInputAppEvent {
			r.Fail(errors.New("expected: inputAppEvent"))
		}
		o.Events[i] = new(TLInputAppEvent)
		o.Events[i].ReadBareFrom(r)
	}
}

func (o *TLHelpSaveAppLog) WriteBareTo(w *tl.Writer) {
	w.WriteCmd(TagVector)
	w.WriteInt(len(o.Events))
	for i := 0; i < len(o.Events); i++ {
		w.WriteCmd(TagInputAppEvent)
		o.Events[i].WriteBareTo(w)
	}
}

func (o *TLHelpSaveAppLog) String() string {
	return tl.Pretty(o)
}

// TLHelpGetInviteText represents func help.getInviteText#4d392343 = help.InviteText from Telegram
type TLHelpGetInviteText struct {
}

func (o *TLHelpGetInviteText) Cmd() uint32 {
	return TagHelpGetInviteText
}

func (o *TLHelpGetInviteText) ReadBareFrom(r *tl.Reader) {
}

func (o *TLHelpGetInviteText) WriteBareTo(w *tl.Writer) {
}

func (o *TLHelpGetInviteText) String() string {
	return tl.Pretty(o)
}

// TLHelpGetSupport represents func help.getSupport#9cdf08cd = help.Support from Telegram
type TLHelpGetSupport struct {
}

func (o *TLHelpGetSupport) Cmd() uint32 {
	return TagHelpGetSupport
}

func (o *TLHelpGetSupport) ReadBareFrom(r *tl.Reader) {
}

func (o *TLHelpGetSupport) WriteBareTo(w *tl.Writer) {
}

func (o *TLHelpGetSupport) String() string {
	return tl.Pretty(o)
}

// TLHelpGetAppChangelog represents func help.getAppChangelog#9010ef6f prev_app_version:string = Updates from Telegram
type TLHelpGetAppChangelog struct {
	PrevAppVersion string // prev_app_version:string
}

func (o *TLHelpGetAppChangelog) Cmd() uint32 {
	return TagHelpGetAppChangelog
}

func (o *TLHelpGetAppChangelog) ReadBareFrom(r *tl.Reader) {
	o.PrevAppVersion = r.ReadString()
}

func (o *TLHelpGetAppChangelog) WriteBareTo(w *tl.Writer) {
	w.WriteString(o.PrevAppVersion)
}

func (o *TLHelpGetAppChangelog) String() string {
	return tl.Pretty(o)
}

// TLHelpGetTermsOfService represents func help.getTermsOfService#350170f3 = help.TermsOfService from Telegram
type TLHelpGetTermsOfService struct {
}

func (o *TLHelpGetTermsOfService) Cmd() uint32 {
	return TagHelpGetTermsOfService
}

func (o *TLHelpGetTermsOfService) ReadBareFrom(r *tl.Reader) {
}

func (o *TLHelpGetTermsOfService) WriteBareTo(w *tl.Writer) {
}

func (o *TLHelpGetTermsOfService) String() string {
	return tl.Pretty(o)
}

// TLHelpSetBotUpdatesStatus represents func help.setBotUpdatesStatus#ec22cfcd pending_updates_count:int message:string = Bool from Telegram
type TLHelpSetBotUpdatesStatus struct {
	PendingUpdatesCount int    // pending_updates_count:int
	Message             string // message:string
}

func (o *TLHelpSetBotUpdatesStatus) Cmd() uint32 {
	return TagHelpSetBotUpdatesStatus
}

func (o *TLHelpSetBotUpdatesStatus) ReadBareFrom(r *tl.Reader) {
	o.PendingUpdatesCount = r.ReadInt()
	o.Message = r.ReadString()
}

func (o *TLHelpSetBotUpdatesStatus) WriteBareTo(w *tl.Writer) {
	w.WriteInt(o.PendingUpdatesCount)
	w.WriteString(o.Message)
}

func (o *TLHelpSetBotUpdatesStatus) String() string {
	return tl.Pretty(o)
}

// TLChannelsReadHistory represents func channels.readHistory#cc104937 channel:InputChannel max_id:int = Bool from Telegram
type TLChannelsReadHistory struct {
	Channel TLInputChannelType // channel:InputChannel
	MaxID   int                // max_id:int
}

func (o *TLChannelsReadHistory) Cmd() uint32 {
	return TagChannelsReadHistory
}

func (o *TLChannelsReadHistory) ReadBareFrom(r *tl.Reader) {
	o.Channel = Schema.ReadLimitedBoxedObjectFrom(r, TagInputChannelEmpty, TagInputChannel).(TLInputChannelType)
	o.MaxID = r.ReadInt()
}

func (o *TLChannelsReadHistory) WriteBareTo(w *tl.Writer) {
	w.WriteCmd(o.Channel.Cmd())
	o.Channel.WriteBareTo(w)
	w.WriteInt(o.MaxID)
}

func (o *TLChannelsReadHistory) String() string {
	return tl.Pretty(o)
}

// TLChannelsDeleteMessages represents func channels.deleteMessages#84c1fd4e channel:InputChannel id:Vector<int> = messages.AffectedMessages from Telegram
type TLChannelsDeleteMessages struct {
	Channel TLInputChannelType // channel:InputChannel
	ID      []int              // id:Vector<int>
}

func (o *TLChannelsDeleteMessages) Cmd() uint32 {
	return TagChannelsDeleteMessages
}

func (o *TLChannelsDeleteMessages) ReadBareFrom(r *tl.Reader) {
	o.Channel = Schema.ReadLimitedBoxedObjectFrom(r, TagInputChannelEmpty, TagInputChannel).(TLInputChannelType)
	if cmd := r.ReadCmd(); cmd != TagVector {
		r.Fail(errors.New("expected: vector"))
	}
	o.ID = make([]int, r.ReadInt())
	for i := 0; i < len(o.ID); i++ {
		o.ID[i] = r.ReadInt()
	}
}

func (o *TLChannelsDeleteMessages) WriteBareTo(w *tl.Writer) {
	w.WriteCmd(o.Channel.Cmd())
	o.Channel.WriteBareTo(w)
	w.WriteCmd(TagVector)
	w.WriteInt(len(o.ID))
	for i := 0; i < len(o.ID); i++ {
		w.WriteInt(o.ID[i])
	}
}

func (o *TLChannelsDeleteMessages) String() string {
	return tl.Pretty(o)
}

// TLChannelsDeleteUserHistory represents func channels.deleteUserHistory#d10dd71b channel:InputChannel user_id:InputUser = messages.AffectedHistory from Telegram
type TLChannelsDeleteUserHistory struct {
	Channel TLInputChannelType // channel:InputChannel
	UserID  TLInputUserType    // user_id:InputUser
}

func (o *TLChannelsDeleteUserHistory) Cmd() uint32 {
	return TagChannelsDeleteUserHistory
}

func (o *TLChannelsDeleteUserHistory) ReadBareFrom(r *tl.Reader) {
	o.Channel = Schema.ReadLimitedBoxedObjectFrom(r, TagInputChannelEmpty, TagInputChannel).(TLInputChannelType)
	o.UserID = Schema.ReadLimitedBoxedObjectFrom(r, TagInputUserEmpty, TagInputUserSelf, TagInputUser).(TLInputUserType)
}

func (o *TLChannelsDeleteUserHistory) WriteBareTo(w *tl.Writer) {
	w.WriteCmd(o.Channel.Cmd())
	o.Channel.WriteBareTo(w)
	w.WriteCmd(o.UserID.Cmd())
	o.UserID.WriteBareTo(w)
}

func (o *TLChannelsDeleteUserHistory) String() string {
	return tl.Pretty(o)
}

// TLChannelsReportSpam represents func channels.reportSpam#fe087810 channel:InputChannel user_id:InputUser id:Vector<int> = Bool from Telegram
type TLChannelsReportSpam struct {
	Channel TLInputChannelType // channel:InputChannel
	UserID  TLInputUserType    // user_id:InputUser
	ID      []int              // id:Vector<int>
}

func (o *TLChannelsReportSpam) Cmd() uint32 {
	return TagChannelsReportSpam
}

func (o *TLChannelsReportSpam) ReadBareFrom(r *tl.Reader) {
	o.Channel = Schema.ReadLimitedBoxedObjectFrom(r, TagInputChannelEmpty, TagInputChannel).(TLInputChannelType)
	o.UserID = Schema.ReadLimitedBoxedObjectFrom(r, TagInputUserEmpty, TagInputUserSelf, TagInputUser).(TLInputUserType)
	if cmd := r.ReadCmd(); cmd != TagVector {
		r.Fail(errors.New("expected: vector"))
	}
	o.ID = make([]int, r.ReadInt())
	for i := 0; i < len(o.ID); i++ {
		o.ID[i] = r.ReadInt()
	}
}

func (o *TLChannelsReportSpam) WriteBareTo(w *tl.Writer) {
	w.WriteCmd(o.Channel.Cmd())
	o.Channel.WriteBareTo(w)
	w.WriteCmd(o.UserID.Cmd())
	o.UserID.WriteBareTo(w)
	w.WriteCmd(TagVector)
	w.WriteInt(len(o.ID))
	for i := 0; i < len(o.ID); i++ {
		w.WriteInt(o.ID[i])
	}
}

func (o *TLChannelsReportSpam) String() string {
	return tl.Pretty(o)
}

// TLChannelsGetMessages represents func channels.getMessages#93d7b347 channel:InputChannel id:Vector<int> = messages.Messages from Telegram
type TLChannelsGetMessages struct {
	Channel TLInputChannelType // channel:InputChannel
	ID      []int              // id:Vector<int>
}

func (o *TLChannelsGetMessages) Cmd() uint32 {
	return TagChannelsGetMessages
}

func (o *TLChannelsGetMessages) ReadBareFrom(r *tl.Reader) {
	o.Channel = Schema.ReadLimitedBoxedObjectFrom(r, TagInputChannelEmpty, TagInputChannel).(TLInputChannelType)
	if cmd := r.ReadCmd(); cmd != TagVector {
		r.Fail(errors.New("expected: vector"))
	}
	o.ID = make([]int, r.ReadInt())
	for i := 0; i < len(o.ID); i++ {
		o.ID[i] = r.ReadInt()
	}
}

func (o *TLChannelsGetMessages) WriteBareTo(w *tl.Writer) {
	w.WriteCmd(o.Channel.Cmd())
	o.Channel.WriteBareTo(w)
	w.WriteCmd(TagVector)
	w.WriteInt(len(o.ID))
	for i := 0; i < len(o.ID); i++ {
		w.WriteInt(o.ID[i])
	}
}

func (o *TLChannelsGetMessages) String() string {
	return tl.Pretty(o)
}

// TLChannelsGetParticipants represents func channels.getParticipants#24d98f92 channel:InputChannel filter:ChannelParticipantsFilter offset:int limit:int = channels.ChannelParticipants from Telegram
type TLChannelsGetParticipants struct {
	Channel TLInputChannelType              // channel:InputChannel
	Filter  TLChannelParticipantsFilterType // filter:ChannelParticipantsFilter
	Offset  int                             // offset:int
	Limit   int                             // limit:int
}

func (o *TLChannelsGetParticipants) Cmd() uint32 {
	return TagChannelsGetParticipants
}

func (o *TLChannelsGetParticipants) ReadBareFrom(r *tl.Reader) {
	o.Channel = Schema.ReadLimitedBoxedObjectFrom(r, TagInputChannelEmpty, TagInputChannel).(TLInputChannelType)
	o.Filter = Schema.ReadLimitedBoxedObjectFrom(r, TagChannelParticipantsRecent, TagChannelParticipantsAdmins, TagChannelParticipantsKicked, TagChannelParticipantsBots).(TLChannelParticipantsFilterType)
	o.Offset = r.ReadInt()
	o.Limit = r.ReadInt()
}

func (o *TLChannelsGetParticipants) WriteBareTo(w *tl.Writer) {
	w.WriteCmd(o.Channel.Cmd())
	o.Channel.WriteBareTo(w)
	w.WriteCmd(o.Filter.Cmd())
	o.Filter.WriteBareTo(w)
	w.WriteInt(o.Offset)
	w.WriteInt(o.Limit)
}

func (o *TLChannelsGetParticipants) String() string {
	return tl.Pretty(o)
}

// TLChannelsGetParticipant represents func channels.getParticipant#546dd7a6 channel:InputChannel user_id:InputUser = channels.ChannelParticipant from Telegram
type TLChannelsGetParticipant struct {
	Channel TLInputChannelType // channel:InputChannel
	UserID  TLInputUserType    // user_id:InputUser
}

func (o *TLChannelsGetParticipant) Cmd() uint32 {
	return TagChannelsGetParticipant
}

func (o *TLChannelsGetParticipant) ReadBareFrom(r *tl.Reader) {
	o.Channel = Schema.ReadLimitedBoxedObjectFrom(r, TagInputChannelEmpty, TagInputChannel).(TLInputChannelType)
	o.UserID = Schema.ReadLimitedBoxedObjectFrom(r, TagInputUserEmpty, TagInputUserSelf, TagInputUser).(TLInputUserType)
}

func (o *TLChannelsGetParticipant) WriteBareTo(w *tl.Writer) {
	w.WriteCmd(o.Channel.Cmd())
	o.Channel.WriteBareTo(w)
	w.WriteCmd(o.UserID.Cmd())
	o.UserID.WriteBareTo(w)
}

func (o *TLChannelsGetParticipant) String() string {
	return tl.Pretty(o)
}

// TLChannelsGetChannels represents func channels.getChannels#0a7f6bbb id:Vector<InputChannel> = messages.Chats from Telegram
type TLChannelsGetChannels struct {
	ID []TLInputChannelType // id:Vector<InputChannel>
}

func (o *TLChannelsGetChannels) Cmd() uint32 {
	return TagChannelsGetChannels
}

func (o *TLChannelsGetChannels) ReadBareFrom(r *tl.Reader) {
	if cmd := r.ReadCmd(); cmd != TagVector {
		r.Fail(errors.New("expected: vector"))
	}
	o.ID = make([]TLInputChannelType, r.ReadInt())
	for i := 0; i < len(o.ID); i++ {
		o.ID[i] = Schema.ReadLimitedBoxedObjectFrom(r, TagInputChannelEmpty, TagInputChannel).(TLInputChannelType)
	}
}

func (o *TLChannelsGetChannels) WriteBareTo(w *tl.Writer) {
	w.WriteCmd(TagVector)
	w.WriteInt(len(o.ID))
	for i := 0; i < len(o.ID); i++ {
		w.WriteCmd(o.ID[i].Cmd())
		o.ID[i].WriteBareTo(w)
	}
}

func (o *TLChannelsGetChannels) String() string {
	return tl.Pretty(o)
}

// TLChannelsGetFullChannel represents func channels.getFullChannel#08736a09 channel:InputChannel = messages.ChatFull from Telegram
type TLChannelsGetFullChannel struct {
	Channel TLInputChannelType // channel:InputChannel
}

func (o *TLChannelsGetFullChannel) Cmd() uint32 {
	return TagChannelsGetFullChannel
}

func (o *TLChannelsGetFullChannel) ReadBareFrom(r *tl.Reader) {
	o.Channel = Schema.ReadLimitedBoxedObjectFrom(r, TagInputChannelEmpty, TagInputChannel).(TLInputChannelType)
}

func (o *TLChannelsGetFullChannel) WriteBareTo(w *tl.Writer) {
	w.WriteCmd(o.Channel.Cmd())
	o.Channel.WriteBareTo(w)
}

func (o *TLChannelsGetFullChannel) String() string {
	return tl.Pretty(o)
}

// TLChannelsCreateChannel represents func channels.createChannel#f4893d7f flags:# flags.0?broadcast:true flags.1?megagroup:true title:string about:string = Updates from Telegram
type TLChannelsCreateChannel struct {
	Flags     uint   // flags:#
	Broadcast bool   // flags.0?broadcast:true
	Megagroup bool   // flags.1?megagroup:true
	Title     string // title:string
	About     string // about:string
}

func (o *TLChannelsCreateChannel) Cmd() uint32 {
	return TagChannelsCreateChannel
}

func (o *TLChannelsCreateChannel) ReadBareFrom(r *tl.Reader) {
	o.Flags = uint(r.ReadUint32())
	o.Broadcast = true
	o.Megagroup = true
	o.Title = r.ReadString()
	o.About = r.ReadString()
}

func (o *TLChannelsCreateChannel) WriteBareTo(w *tl.Writer) {
	w.WriteUint32(uint32(o.Flags))
	w.WriteString(o.Title)
	w.WriteString(o.About)
}

func (o *TLChannelsCreateChannel) String() string {
	return tl.Pretty(o)
}

// TLChannelsEditAbout represents func channels.editAbout#13e27f1e channel:InputChannel about:string = Bool from Telegram
type TLChannelsEditAbout struct {
	Channel TLInputChannelType // channel:InputChannel
	About   string             // about:string
}

func (o *TLChannelsEditAbout) Cmd() uint32 {
	return TagChannelsEditAbout
}

func (o *TLChannelsEditAbout) ReadBareFrom(r *tl.Reader) {
	o.Channel = Schema.ReadLimitedBoxedObjectFrom(r, TagInputChannelEmpty, TagInputChannel).(TLInputChannelType)
	o.About = r.ReadString()
}

func (o *TLChannelsEditAbout) WriteBareTo(w *tl.Writer) {
	w.WriteCmd(o.Channel.Cmd())
	o.Channel.WriteBareTo(w)
	w.WriteString(o.About)
}

func (o *TLChannelsEditAbout) String() string {
	return tl.Pretty(o)
}

// TLChannelsEditAdmin represents func channels.editAdmin#eb7611d0 channel:InputChannel user_id:InputUser role:ChannelParticipantRole = Updates from Telegram
type TLChannelsEditAdmin struct {
	Channel TLInputChannelType           // channel:InputChannel
	UserID  TLInputUserType              // user_id:InputUser
	Role    TLChannelParticipantRoleType // role:ChannelParticipantRole
}

func (o *TLChannelsEditAdmin) Cmd() uint32 {
	return TagChannelsEditAdmin
}

func (o *TLChannelsEditAdmin) ReadBareFrom(r *tl.Reader) {
	o.Channel = Schema.ReadLimitedBoxedObjectFrom(r, TagInputChannelEmpty, TagInputChannel).(TLInputChannelType)
	o.UserID = Schema.ReadLimitedBoxedObjectFrom(r, TagInputUserEmpty, TagInputUserSelf, TagInputUser).(TLInputUserType)
	o.Role = Schema.ReadLimitedBoxedObjectFrom(r, TagChannelRoleEmpty, TagChannelRoleModerator, TagChannelRoleEditor).(TLChannelParticipantRoleType)
}

func (o *TLChannelsEditAdmin) WriteBareTo(w *tl.Writer) {
	w.WriteCmd(o.Channel.Cmd())
	o.Channel.WriteBareTo(w)
	w.WriteCmd(o.UserID.Cmd())
	o.UserID.WriteBareTo(w)
	w.WriteCmd(o.Role.Cmd())
	o.Role.WriteBareTo(w)
}

func (o *TLChannelsEditAdmin) String() string {
	return tl.Pretty(o)
}

// TLChannelsEditTitle represents func channels.editTitle#566decd0 channel:InputChannel title:string = Updates from Telegram
type TLChannelsEditTitle struct {
	Channel TLInputChannelType // channel:InputChannel
	Title   string             // title:string
}

func (o *TLChannelsEditTitle) Cmd() uint32 {
	return TagChannelsEditTitle
}

func (o *TLChannelsEditTitle) ReadBareFrom(r *tl.Reader) {
	o.Channel = Schema.ReadLimitedBoxedObjectFrom(r, TagInputChannelEmpty, TagInputChannel).(TLInputChannelType)
	o.Title = r.ReadString()
}

func (o *TLChannelsEditTitle) WriteBareTo(w *tl.Writer) {
	w.WriteCmd(o.Channel.Cmd())
	o.Channel.WriteBareTo(w)
	w.WriteString(o.Title)
}

func (o *TLChannelsEditTitle) String() string {
	return tl.Pretty(o)
}

// TLChannelsEditPhoto represents func channels.editPhoto#f12e57c9 channel:InputChannel photo:InputChatPhoto = Updates from Telegram
type TLChannelsEditPhoto struct {
	Channel TLInputChannelType   // channel:InputChannel
	Photo   TLInputChatPhotoType // photo:InputChatPhoto
}

func (o *TLChannelsEditPhoto) Cmd() uint32 {
	return TagChannelsEditPhoto
}

func (o *TLChannelsEditPhoto) ReadBareFrom(r *tl.Reader) {
	o.Channel = Schema.ReadLimitedBoxedObjectFrom(r, TagInputChannelEmpty, TagInputChannel).(TLInputChannelType)
	o.Photo = Schema.ReadLimitedBoxedObjectFrom(r, TagInputChatPhotoEmpty, TagInputChatUploadedPhoto, TagInputChatPhoto).(TLInputChatPhotoType)
}

func (o *TLChannelsEditPhoto) WriteBareTo(w *tl.Writer) {
	w.WriteCmd(o.Channel.Cmd())
	o.Channel.WriteBareTo(w)
	w.WriteCmd(o.Photo.Cmd())
	o.Photo.WriteBareTo(w)
}

func (o *TLChannelsEditPhoto) String() string {
	return tl.Pretty(o)
}

// TLChannelsCheckUsername represents func channels.checkUsername#10e6bd2c channel:InputChannel username:string = Bool from Telegram
type TLChannelsCheckUsername struct {
	Channel  TLInputChannelType // channel:InputChannel
	Username string             // username:string
}

func (o *TLChannelsCheckUsername) Cmd() uint32 {
	return TagChannelsCheckUsername
}

func (o *TLChannelsCheckUsername) ReadBareFrom(r *tl.Reader) {
	o.Channel = Schema.ReadLimitedBoxedObjectFrom(r, TagInputChannelEmpty, TagInputChannel).(TLInputChannelType)
	o.Username = r.ReadString()
}

func (o *TLChannelsCheckUsername) WriteBareTo(w *tl.Writer) {
	w.WriteCmd(o.Channel.Cmd())
	o.Channel.WriteBareTo(w)
	w.WriteString(o.Username)
}

func (o *TLChannelsCheckUsername) String() string {
	return tl.Pretty(o)
}

// TLChannelsUpdateUsername represents func channels.updateUsername#3514b3de channel:InputChannel username:string = Bool from Telegram
type TLChannelsUpdateUsername struct {
	Channel  TLInputChannelType // channel:InputChannel
	Username string             // username:string
}

func (o *TLChannelsUpdateUsername) Cmd() uint32 {
	return TagChannelsUpdateUsername
}

func (o *TLChannelsUpdateUsername) ReadBareFrom(r *tl.Reader) {
	o.Channel = Schema.ReadLimitedBoxedObjectFrom(r, TagInputChannelEmpty, TagInputChannel).(TLInputChannelType)
	o.Username = r.ReadString()
}

func (o *TLChannelsUpdateUsername) WriteBareTo(w *tl.Writer) {
	w.WriteCmd(o.Channel.Cmd())
	o.Channel.WriteBareTo(w)
	w.WriteString(o.Username)
}

func (o *TLChannelsUpdateUsername) String() string {
	return tl.Pretty(o)
}

// TLChannelsJoinChannel represents func channels.joinChannel#24b524c5 channel:InputChannel = Updates from Telegram
type TLChannelsJoinChannel struct {
	Channel TLInputChannelType // channel:InputChannel
}

func (o *TLChannelsJoinChannel) Cmd() uint32 {
	return TagChannelsJoinChannel
}

func (o *TLChannelsJoinChannel) ReadBareFrom(r *tl.Reader) {
	o.Channel = Schema.ReadLimitedBoxedObjectFrom(r, TagInputChannelEmpty, TagInputChannel).(TLInputChannelType)
}

func (o *TLChannelsJoinChannel) WriteBareTo(w *tl.Writer) {
	w.WriteCmd(o.Channel.Cmd())
	o.Channel.WriteBareTo(w)
}

func (o *TLChannelsJoinChannel) String() string {
	return tl.Pretty(o)
}

// TLChannelsLeaveChannel represents func channels.leaveChannel#f836aa95 channel:InputChannel = Updates from Telegram
type TLChannelsLeaveChannel struct {
	Channel TLInputChannelType // channel:InputChannel
}

func (o *TLChannelsLeaveChannel) Cmd() uint32 {
	return TagChannelsLeaveChannel
}

func (o *TLChannelsLeaveChannel) ReadBareFrom(r *tl.Reader) {
	o.Channel = Schema.ReadLimitedBoxedObjectFrom(r, TagInputChannelEmpty, TagInputChannel).(TLInputChannelType)
}

func (o *TLChannelsLeaveChannel) WriteBareTo(w *tl.Writer) {
	w.WriteCmd(o.Channel.Cmd())
	o.Channel.WriteBareTo(w)
}

func (o *TLChannelsLeaveChannel) String() string {
	return tl.Pretty(o)
}

// TLChannelsInviteToChannel represents func channels.inviteToChannel#199f3a6c channel:InputChannel users:Vector<InputUser> = Updates from Telegram
type TLChannelsInviteToChannel struct {
	Channel TLInputChannelType // channel:InputChannel
	Users   []TLInputUserType  // users:Vector<InputUser>
}

func (o *TLChannelsInviteToChannel) Cmd() uint32 {
	return TagChannelsInviteToChannel
}

func (o *TLChannelsInviteToChannel) ReadBareFrom(r *tl.Reader) {
	o.Channel = Schema.ReadLimitedBoxedObjectFrom(r, TagInputChannelEmpty, TagInputChannel).(TLInputChannelType)
	if cmd := r.ReadCmd(); cmd != TagVector {
		r.Fail(errors.New("expected: vector"))
	}
	o.Users = make([]TLInputUserType, r.ReadInt())
	for i := 0; i < len(o.Users); i++ {
		o.Users[i] = Schema.ReadLimitedBoxedObjectFrom(r, TagInputUserEmpty, TagInputUserSelf, TagInputUser).(TLInputUserType)
	}
}

func (o *TLChannelsInviteToChannel) WriteBareTo(w *tl.Writer) {
	w.WriteCmd(o.Channel.Cmd())
	o.Channel.WriteBareTo(w)
	w.WriteCmd(TagVector)
	w.WriteInt(len(o.Users))
	for i := 0; i < len(o.Users); i++ {
		w.WriteCmd(o.Users[i].Cmd())
		o.Users[i].WriteBareTo(w)
	}
}

func (o *TLChannelsInviteToChannel) String() string {
	return tl.Pretty(o)
}

// TLChannelsKickFromChannel represents func channels.kickFromChannel#a672de14 channel:InputChannel user_id:InputUser kicked:Bool = Updates from Telegram
type TLChannelsKickFromChannel struct {
	Channel TLInputChannelType // channel:InputChannel
	UserID  TLInputUserType    // user_id:InputUser
	Kicked  bool               // kicked:Bool
}

func (o *TLChannelsKickFromChannel) Cmd() uint32 {
	return TagChannelsKickFromChannel
}

func (o *TLChannelsKickFromChannel) ReadBareFrom(r *tl.Reader) {
	o.Channel = Schema.ReadLimitedBoxedObjectFrom(r, TagInputChannelEmpty, TagInputChannel).(TLInputChannelType)
	o.UserID = Schema.ReadLimitedBoxedObjectFrom(r, TagInputUserEmpty, TagInputUserSelf, TagInputUser).(TLInputUserType)
	r.ExpectCmd(TagBoolTrue, TagBoolFalse)
	o.Kicked = (r.ReadCmd() == TagBoolTrue)
}

func (o *TLChannelsKickFromChannel) WriteBareTo(w *tl.Writer) {
	w.WriteCmd(o.Channel.Cmd())
	o.Channel.WriteBareTo(w)
	w.WriteCmd(o.UserID.Cmd())
	o.UserID.WriteBareTo(w)
	if o.Kicked {
		w.WriteCmd(TagBoolTrue)
	} else {
		w.WriteCmd(TagBoolFalse)
	}
}

func (o *TLChannelsKickFromChannel) String() string {
	return tl.Pretty(o)
}

// TLChannelsExportInvite represents func channels.exportInvite#c7560885 channel:InputChannel = ExportedChatInvite from Telegram
type TLChannelsExportInvite struct {
	Channel TLInputChannelType // channel:InputChannel
}

func (o *TLChannelsExportInvite) Cmd() uint32 {
	return TagChannelsExportInvite
}

func (o *TLChannelsExportInvite) ReadBareFrom(r *tl.Reader) {
	o.Channel = Schema.ReadLimitedBoxedObjectFrom(r, TagInputChannelEmpty, TagInputChannel).(TLInputChannelType)
}

func (o *TLChannelsExportInvite) WriteBareTo(w *tl.Writer) {
	w.WriteCmd(o.Channel.Cmd())
	o.Channel.WriteBareTo(w)
}

func (o *TLChannelsExportInvite) String() string {
	return tl.Pretty(o)
}

// TLChannelsDeleteChannel represents func channels.deleteChannel#c0111fe3 channel:InputChannel = Updates from Telegram
type TLChannelsDeleteChannel struct {
	Channel TLInputChannelType // channel:InputChannel
}

func (o *TLChannelsDeleteChannel) Cmd() uint32 {
	return TagChannelsDeleteChannel
}

func (o *TLChannelsDeleteChannel) ReadBareFrom(r *tl.Reader) {
	o.Channel = Schema.ReadLimitedBoxedObjectFrom(r, TagInputChannelEmpty, TagInputChannel).(TLInputChannelType)
}

func (o *TLChannelsDeleteChannel) WriteBareTo(w *tl.Writer) {
	w.WriteCmd(o.Channel.Cmd())
	o.Channel.WriteBareTo(w)
}

func (o *TLChannelsDeleteChannel) String() string {
	return tl.Pretty(o)
}

// TLChannelsToggleInvites represents func channels.toggleInvites#49609307 channel:InputChannel enabled:Bool = Updates from Telegram
type TLChannelsToggleInvites struct {
	Channel TLInputChannelType // channel:InputChannel
	Enabled bool               // enabled:Bool
}

func (o *TLChannelsToggleInvites) Cmd() uint32 {
	return TagChannelsToggleInvites
}

func (o *TLChannelsToggleInvites) ReadBareFrom(r *tl.Reader) {
	o.Channel = Schema.ReadLimitedBoxedObjectFrom(r, TagInputChannelEmpty, TagInputChannel).(TLInputChannelType)
	r.ExpectCmd(TagBoolTrue, TagBoolFalse)
	o.Enabled = (r.ReadCmd() == TagBoolTrue)
}

func (o *TLChannelsToggleInvites) WriteBareTo(w *tl.Writer) {
	w.WriteCmd(o.Channel.Cmd())
	o.Channel.WriteBareTo(w)
	if o.Enabled {
		w.WriteCmd(TagBoolTrue)
	} else {
		w.WriteCmd(TagBoolFalse)
	}
}

func (o *TLChannelsToggleInvites) String() string {
	return tl.Pretty(o)
}

// TLChannelsExportMessageLink represents func channels.exportMessageLink#c846d22d channel:InputChannel id:int = ExportedMessageLink from Telegram
type TLChannelsExportMessageLink struct {
	Channel TLInputChannelType // channel:InputChannel
	ID      int                // id:int
}

func (o *TLChannelsExportMessageLink) Cmd() uint32 {
	return TagChannelsExportMessageLink
}

func (o *TLChannelsExportMessageLink) ReadBareFrom(r *tl.Reader) {
	o.Channel = Schema.ReadLimitedBoxedObjectFrom(r, TagInputChannelEmpty, TagInputChannel).(TLInputChannelType)
	o.ID = r.ReadInt()
}

func (o *TLChannelsExportMessageLink) WriteBareTo(w *tl.Writer) {
	w.WriteCmd(o.Channel.Cmd())
	o.Channel.WriteBareTo(w)
	w.WriteInt(o.ID)
}

func (o *TLChannelsExportMessageLink) String() string {
	return tl.Pretty(o)
}

// TLChannelsToggleSignatures represents func channels.toggleSignatures#1f69b606 channel:InputChannel enabled:Bool = Updates from Telegram
type TLChannelsToggleSignatures struct {
	Channel TLInputChannelType // channel:InputChannel
	Enabled bool               // enabled:Bool
}

func (o *TLChannelsToggleSignatures) Cmd() uint32 {
	return TagChannelsToggleSignatures
}

func (o *TLChannelsToggleSignatures) ReadBareFrom(r *tl.Reader) {
	o.Channel = Schema.ReadLimitedBoxedObjectFrom(r, TagInputChannelEmpty, TagInputChannel).(TLInputChannelType)
	r.ExpectCmd(TagBoolTrue, TagBoolFalse)
	o.Enabled = (r.ReadCmd() == TagBoolTrue)
}

func (o *TLChannelsToggleSignatures) WriteBareTo(w *tl.Writer) {
	w.WriteCmd(o.Channel.Cmd())
	o.Channel.WriteBareTo(w)
	if o.Enabled {
		w.WriteCmd(TagBoolTrue)
	} else {
		w.WriteCmd(TagBoolFalse)
	}
}

func (o *TLChannelsToggleSignatures) String() string {
	return tl.Pretty(o)
}

// TLChannelsUpdatePinnedMessage represents func channels.updatePinnedMessage#a72ded52 flags:# flags.0?silent:true channel:InputChannel id:int = Updates from Telegram
type TLChannelsUpdatePinnedMessage struct {
	Flags   uint               // flags:#
	Silent  bool               // flags.0?silent:true
	Channel TLInputChannelType // channel:InputChannel
	ID      int                // id:int
}

func (o *TLChannelsUpdatePinnedMessage) Cmd() uint32 {
	return TagChannelsUpdatePinnedMessage
}

func (o *TLChannelsUpdatePinnedMessage) ReadBareFrom(r *tl.Reader) {
	o.Flags = uint(r.ReadUint32())
	o.Silent = true
	o.Channel = Schema.ReadLimitedBoxedObjectFrom(r, TagInputChannelEmpty, TagInputChannel).(TLInputChannelType)
	o.ID = r.ReadInt()
}

func (o *TLChannelsUpdatePinnedMessage) WriteBareTo(w *tl.Writer) {
	w.WriteUint32(uint32(o.Flags))
	w.WriteCmd(o.Channel.Cmd())
	o.Channel.WriteBareTo(w)
	w.WriteInt(o.ID)
}

func (o *TLChannelsUpdatePinnedMessage) String() string {
	return tl.Pretty(o)
}

// TLChannelsGetAdminedPublicChannels represents func channels.getAdminedPublicChannels#8d8d82d7 = messages.Chats from Telegram
type TLChannelsGetAdminedPublicChannels struct {
}

func (o *TLChannelsGetAdminedPublicChannels) Cmd() uint32 {
	return TagChannelsGetAdminedPublicChannels
}

func (o *TLChannelsGetAdminedPublicChannels) ReadBareFrom(r *tl.Reader) {
}

func (o *TLChannelsGetAdminedPublicChannels) WriteBareTo(w *tl.Writer) {
}

func (o *TLChannelsGetAdminedPublicChannels) String() string {
	return tl.Pretty(o)
}

// TLBotsSendCustomRequest represents func bots.sendCustomRequest#aa2769ed custom_method:string params:DataJSON = DataJSON from Telegram
type TLBotsSendCustomRequest struct {
	CustomMethod string      // custom_method:string
	Params       *TLDataJSON // params:DataJSON
}

func (o *TLBotsSendCustomRequest) Cmd() uint32 {
	return TagBotsSendCustomRequest
}

func (o *TLBotsSendCustomRequest) ReadBareFrom(r *tl.Reader) {
	o.CustomMethod = r.ReadString()
	if cmd := r.ReadCmd(); cmd != TagDataJSON {
		r.Fail(errors.New("expected: dataJSON"))
	}
	o.Params = new(TLDataJSON)
	o.Params.ReadBareFrom(r)
}

func (o *TLBotsSendCustomRequest) WriteBareTo(w *tl.Writer) {
	w.WriteString(o.CustomMethod)
	w.WriteCmd(TagDataJSON)
	o.Params.WriteBareTo(w)
}

func (o *TLBotsSendCustomRequest) String() string {
	return tl.Pretty(o)
}

// TLBotsAnswerWebhookJSONQuery represents func bots.answerWebhookJSONQuery#e6213f4d query_id:long data:DataJSON = Bool from Telegram
type TLBotsAnswerWebhookJSONQuery struct {
	QueryID uint64      // query_id:long
	Data    *TLDataJSON // data:DataJSON
}

func (o *TLBotsAnswerWebhookJSONQuery) Cmd() uint32 {
	return TagBotsAnswerWebhookJSONQuery
}

func (o *TLBotsAnswerWebhookJSONQuery) ReadBareFrom(r *tl.Reader) {
	o.QueryID = r.ReadUint64()
	if cmd := r.ReadCmd(); cmd != TagDataJSON {
		r.Fail(errors.New("expected: dataJSON"))
	}
	o.Data = new(TLDataJSON)
	o.Data.ReadBareFrom(r)
}

func (o *TLBotsAnswerWebhookJSONQuery) WriteBareTo(w *tl.Writer) {
	w.WriteUint64(o.QueryID)
	w.WriteCmd(TagDataJSON)
	o.Data.WriteBareTo(w)
}

func (o *TLBotsAnswerWebhookJSONQuery) String() string {
	return tl.Pretty(o)
}

// TLPaymentsGetPaymentForm represents func payments.getPaymentForm#99f09745 msg_id:int = payments.PaymentForm from Telegram
type TLPaymentsGetPaymentForm struct {
	MsgID int // msg_id:int
}

func (o *TLPaymentsGetPaymentForm) Cmd() uint32 {
	return TagPaymentsGetPaymentForm
}

func (o *TLPaymentsGetPaymentForm) ReadBareFrom(r *tl.Reader) {
	o.MsgID = r.ReadInt()
}

func (o *TLPaymentsGetPaymentForm) WriteBareTo(w *tl.Writer) {
	w.WriteInt(o.MsgID)
}

func (o *TLPaymentsGetPaymentForm) String() string {
	return tl.Pretty(o)
}

// TLPaymentsGetPaymentReceipt represents func payments.getPaymentReceipt#a092a980 msg_id:int = payments.PaymentReceipt from Telegram
type TLPaymentsGetPaymentReceipt struct {
	MsgID int // msg_id:int
}

func (o *TLPaymentsGetPaymentReceipt) Cmd() uint32 {
	return TagPaymentsGetPaymentReceipt
}

func (o *TLPaymentsGetPaymentReceipt) ReadBareFrom(r *tl.Reader) {
	o.MsgID = r.ReadInt()
}

func (o *TLPaymentsGetPaymentReceipt) WriteBareTo(w *tl.Writer) {
	w.WriteInt(o.MsgID)
}

func (o *TLPaymentsGetPaymentReceipt) String() string {
	return tl.Pretty(o)
}

// TLPaymentsValidateRequestedInfo represents func payments.validateRequestedInfo#770a8e74 flags:# flags.0?save:true msg_id:int info:PaymentRequestedInfo = payments.ValidatedRequestedInfo from Telegram
type TLPaymentsValidateRequestedInfo struct {
	Flags uint                    // flags:#
	Save  bool                    // flags.0?save:true
	MsgID int                     // msg_id:int
	Info  *TLPaymentRequestedInfo // info:PaymentRequestedInfo
}

func (o *TLPaymentsValidateRequestedInfo) Cmd() uint32 {
	return TagPaymentsValidateRequestedInfo
}

func (o *TLPaymentsValidateRequestedInfo) ReadBareFrom(r *tl.Reader) {
	o.Flags = uint(r.ReadUint32())
	o.Save = true
	o.MsgID = r.ReadInt()
	if cmd := r.ReadCmd(); cmd != TagPaymentRequestedInfo {
		r.Fail(errors.New("expected: paymentRequestedInfo"))
	}
	o.Info = new(TLPaymentRequestedInfo)
	o.Info.ReadBareFrom(r)
}

func (o *TLPaymentsValidateRequestedInfo) WriteBareTo(w *tl.Writer) {
	w.WriteUint32(uint32(o.Flags))
	w.WriteInt(o.MsgID)
	w.WriteCmd(TagPaymentRequestedInfo)
	o.Info.WriteBareTo(w)
}

func (o *TLPaymentsValidateRequestedInfo) String() string {
	return tl.Pretty(o)
}

// TLPaymentsSendPaymentForm represents func payments.sendPaymentForm#2b8879b3 flags:# msg_id:int flags.0?requested_info_id:string flags.1?shipping_option_id:string credentials:InputPaymentCredentials = payments.PaymentResult from Telegram
type TLPaymentsSendPaymentForm struct {
	Flags            uint                          // flags:#
	MsgID            int                           // msg_id:int
	RequestedInfoID  string                        // flags.0?requested_info_id:string
	ShippingOptionID string                        // flags.1?shipping_option_id:string
	Credentials      TLInputPaymentCredentialsType // credentials:InputPaymentCredentials
}

func (o *TLPaymentsSendPaymentForm) Cmd() uint32 {
	return TagPaymentsSendPaymentForm
}

func (o *TLPaymentsSendPaymentForm) ReadBareFrom(r *tl.Reader) {
	o.Flags = uint(r.ReadUint32())
	o.MsgID = r.ReadInt()
	o.RequestedInfoID = r.ReadString()
	o.ShippingOptionID = r.ReadString()
	o.Credentials = Schema.ReadLimitedBoxedObjectFrom(r, TagInputPaymentCredentialsSaved, TagInputPaymentCredentials).(TLInputPaymentCredentialsType)
}

func (o *TLPaymentsSendPaymentForm) WriteBareTo(w *tl.Writer) {
	w.WriteUint32(uint32(o.Flags))
	w.WriteInt(o.MsgID)
	w.WriteString(o.RequestedInfoID)
	w.WriteString(o.ShippingOptionID)
	w.WriteCmd(o.Credentials.Cmd())
	o.Credentials.WriteBareTo(w)
}

func (o *TLPaymentsSendPaymentForm) String() string {
	return tl.Pretty(o)
}

// TLPaymentsGetSavedInfo represents func payments.getSavedInfo#227d824b = payments.SavedInfo from Telegram
type TLPaymentsGetSavedInfo struct {
}

func (o *TLPaymentsGetSavedInfo) Cmd() uint32 {
	return TagPaymentsGetSavedInfo
}

func (o *TLPaymentsGetSavedInfo) ReadBareFrom(r *tl.Reader) {
}

func (o *TLPaymentsGetSavedInfo) WriteBareTo(w *tl.Writer) {
}

func (o *TLPaymentsGetSavedInfo) String() string {
	return tl.Pretty(o)
}

// TLPaymentsClearSavedInfo represents func payments.clearSavedInfo#d83d70c1 flags:# flags.0?credentials:true flags.1?info:true = Bool from Telegram
type TLPaymentsClearSavedInfo struct {
	Flags       uint // flags:#
	Credentials bool // flags.0?credentials:true
	Info        bool // flags.1?info:true
}

func (o *TLPaymentsClearSavedInfo) Cmd() uint32 {
	return TagPaymentsClearSavedInfo
}

func (o *TLPaymentsClearSavedInfo) ReadBareFrom(r *tl.Reader) {
	o.Flags = uint(r.ReadUint32())
	o.Credentials = true
	o.Info = true
}

func (o *TLPaymentsClearSavedInfo) WriteBareTo(w *tl.Writer) {
	w.WriteUint32(uint32(o.Flags))
}

func (o *TLPaymentsClearSavedInfo) String() string {
	return tl.Pretty(o)
}

// TLPhoneGetCallConfig represents func phone.getCallConfig#55451fa9 = DataJSON from Telegram
type TLPhoneGetCallConfig struct {
}

func (o *TLPhoneGetCallConfig) Cmd() uint32 {
	return TagPhoneGetCallConfig
}

func (o *TLPhoneGetCallConfig) ReadBareFrom(r *tl.Reader) {
}

func (o *TLPhoneGetCallConfig) WriteBareTo(w *tl.Writer) {
}

func (o *TLPhoneGetCallConfig) String() string {
	return tl.Pretty(o)
}

// TLPhoneRequestCall represents func phone.requestCall#5b95b3d4 user_id:InputUser random_id:int g_a_hash:bytes protocol:PhoneCallProtocol = phone.PhoneCall from Telegram
type TLPhoneRequestCall struct {
	UserID   TLInputUserType      // user_id:InputUser
	RandomID int                  // random_id:int
	GAHash   []byte               // g_a_hash:bytes
	Protocol *TLPhoneCallProtocol // protocol:PhoneCallProtocol
}

func (o *TLPhoneRequestCall) Cmd() uint32 {
	return TagPhoneRequestCall
}

func (o *TLPhoneRequestCall) ReadBareFrom(r *tl.Reader) {
	o.UserID = Schema.ReadLimitedBoxedObjectFrom(r, TagInputUserEmpty, TagInputUserSelf, TagInputUser).(TLInputUserType)
	o.RandomID = r.ReadInt()
	o.GAHash = r.ReadBlob()
	if cmd := r.ReadCmd(); cmd != TagPhoneCallProtocol {
		r.Fail(errors.New("expected: phoneCallProtocol"))
	}
	o.Protocol = new(TLPhoneCallProtocol)
	o.Protocol.ReadBareFrom(r)
}

func (o *TLPhoneRequestCall) WriteBareTo(w *tl.Writer) {
	w.WriteCmd(o.UserID.Cmd())
	o.UserID.WriteBareTo(w)
	w.WriteInt(o.RandomID)
	w.WriteBlob(o.GAHash)
	w.WriteCmd(TagPhoneCallProtocol)
	o.Protocol.WriteBareTo(w)
}

func (o *TLPhoneRequestCall) String() string {
	return tl.Pretty(o)
}

// TLPhoneAcceptCall represents func phone.acceptCall#3bd2b4a0 peer:InputPhoneCall g_b:bytes protocol:PhoneCallProtocol = phone.PhoneCall from Telegram
type TLPhoneAcceptCall struct {
	Peer     *TLInputPhoneCall    // peer:InputPhoneCall
	GB       []byte               // g_b:bytes
	Protocol *TLPhoneCallProtocol // protocol:PhoneCallProtocol
}

func (o *TLPhoneAcceptCall) Cmd() uint32 {
	return TagPhoneAcceptCall
}

func (o *TLPhoneAcceptCall) ReadBareFrom(r *tl.Reader) {
	if cmd := r.ReadCmd(); cmd != TagInputPhoneCall {
		r.Fail(errors.New("expected: inputPhoneCall"))
	}
	o.Peer = new(TLInputPhoneCall)
	o.Peer.ReadBareFrom(r)
	o.GB = r.ReadBlob()
	if cmd := r.ReadCmd(); cmd != TagPhoneCallProtocol {
		r.Fail(errors.New("expected: phoneCallProtocol"))
	}
	o.Protocol = new(TLPhoneCallProtocol)
	o.Protocol.ReadBareFrom(r)
}

func (o *TLPhoneAcceptCall) WriteBareTo(w *tl.Writer) {
	w.WriteCmd(TagInputPhoneCall)
	o.Peer.WriteBareTo(w)
	w.WriteBlob(o.GB)
	w.WriteCmd(TagPhoneCallProtocol)
	o.Protocol.WriteBareTo(w)
}

func (o *TLPhoneAcceptCall) String() string {
	return tl.Pretty(o)
}

// TLPhoneConfirmCall represents func phone.confirmCall#2efe1722 peer:InputPhoneCall g_a:bytes key_fingerprint:long protocol:PhoneCallProtocol = phone.PhoneCall from Telegram
type TLPhoneConfirmCall struct {
	Peer           *TLInputPhoneCall    // peer:InputPhoneCall
	GA             []byte               // g_a:bytes
	KeyFingerprint uint64               // key_fingerprint:long
	Protocol       *TLPhoneCallProtocol // protocol:PhoneCallProtocol
}

func (o *TLPhoneConfirmCall) Cmd() uint32 {
	return TagPhoneConfirmCall
}

func (o *TLPhoneConfirmCall) ReadBareFrom(r *tl.Reader) {
	if cmd := r.ReadCmd(); cmd != TagInputPhoneCall {
		r.Fail(errors.New("expected: inputPhoneCall"))
	}
	o.Peer = new(TLInputPhoneCall)
	o.Peer.ReadBareFrom(r)
	o.GA = r.ReadBlob()
	o.KeyFingerprint = r.ReadUint64()
	if cmd := r.ReadCmd(); cmd != TagPhoneCallProtocol {
		r.Fail(errors.New("expected: phoneCallProtocol"))
	}
	o.Protocol = new(TLPhoneCallProtocol)
	o.Protocol.ReadBareFrom(r)
}

func (o *TLPhoneConfirmCall) WriteBareTo(w *tl.Writer) {
	w.WriteCmd(TagInputPhoneCall)
	o.Peer.WriteBareTo(w)
	w.WriteBlob(o.GA)
	w.WriteUint64(o.KeyFingerprint)
	w.WriteCmd(TagPhoneCallProtocol)
	o.Protocol.WriteBareTo(w)
}

func (o *TLPhoneConfirmCall) String() string {
	return tl.Pretty(o)
}

// TLPhoneReceivedCall represents func phone.receivedCall#17d54f61 peer:InputPhoneCall = Bool from Telegram
type TLPhoneReceivedCall struct {
	Peer *TLInputPhoneCall // peer:InputPhoneCall
}

func (o *TLPhoneReceivedCall) Cmd() uint32 {
	return TagPhoneReceivedCall
}

func (o *TLPhoneReceivedCall) ReadBareFrom(r *tl.Reader) {
	if cmd := r.ReadCmd(); cmd != TagInputPhoneCall {
		r.Fail(errors.New("expected: inputPhoneCall"))
	}
	o.Peer = new(TLInputPhoneCall)
	o.Peer.ReadBareFrom(r)
}

func (o *TLPhoneReceivedCall) WriteBareTo(w *tl.Writer) {
	w.WriteCmd(TagInputPhoneCall)
	o.Peer.WriteBareTo(w)
}

func (o *TLPhoneReceivedCall) String() string {
	return tl.Pretty(o)
}

// TLPhoneDiscardCall represents func phone.discardCall#78d413a6 peer:InputPhoneCall duration:int reason:PhoneCallDiscardReason connection_id:long = Updates from Telegram
type TLPhoneDiscardCall struct {
	Peer         *TLInputPhoneCall            // peer:InputPhoneCall
	Duration     int                          // duration:int
	Reason       TLPhoneCallDiscardReasonType // reason:PhoneCallDiscardReason
	ConnectionID uint64                       // connection_id:long
}

func (o *TLPhoneDiscardCall) Cmd() uint32 {
	return TagPhoneDiscardCall
}

func (o *TLPhoneDiscardCall) ReadBareFrom(r *tl.Reader) {
	if cmd := r.ReadCmd(); cmd != TagInputPhoneCall {
		r.Fail(errors.New("expected: inputPhoneCall"))
	}
	o.Peer = new(TLInputPhoneCall)
	o.Peer.ReadBareFrom(r)
	o.Duration = r.ReadInt()
	o.Reason = Schema.ReadLimitedBoxedObjectFrom(r, TagPhoneCallDiscardReasonMissed, TagPhoneCallDiscardReasonDisconnect, TagPhoneCallDiscardReasonHangup, TagPhoneCallDiscardReasonBusy).(TLPhoneCallDiscardReasonType)
	o.ConnectionID = r.ReadUint64()
}

func (o *TLPhoneDiscardCall) WriteBareTo(w *tl.Writer) {
	w.WriteCmd(TagInputPhoneCall)
	o.Peer.WriteBareTo(w)
	w.WriteInt(o.Duration)
	w.WriteCmd(o.Reason.Cmd())
	o.Reason.WriteBareTo(w)
	w.WriteUint64(o.ConnectionID)
}

func (o *TLPhoneDiscardCall) String() string {
	return tl.Pretty(o)
}

// TLPhoneSetCallRating represents func phone.setCallRating#1c536a34 peer:InputPhoneCall rating:int comment:string = Updates from Telegram
type TLPhoneSetCallRating struct {
	Peer    *TLInputPhoneCall // peer:InputPhoneCall
	Rating  int               // rating:int
	Comment string            // comment:string
}

func (o *TLPhoneSetCallRating) Cmd() uint32 {
	return TagPhoneSetCallRating
}

func (o *TLPhoneSetCallRating) ReadBareFrom(r *tl.Reader) {
	if cmd := r.ReadCmd(); cmd != TagInputPhoneCall {
		r.Fail(errors.New("expected: inputPhoneCall"))
	}
	o.Peer = new(TLInputPhoneCall)
	o.Peer.ReadBareFrom(r)
	o.Rating = r.ReadInt()
	o.Comment = r.ReadString()
}

func (o *TLPhoneSetCallRating) WriteBareTo(w *tl.Writer) {
	w.WriteCmd(TagInputPhoneCall)
	o.Peer.WriteBareTo(w)
	w.WriteInt(o.Rating)
	w.WriteString(o.Comment)
}

func (o *TLPhoneSetCallRating) String() string {
	return tl.Pretty(o)
}

// TLPhoneSaveCallDebug represents func phone.saveCallDebug#277add7e peer:InputPhoneCall debug:DataJSON = Bool from Telegram
type TLPhoneSaveCallDebug struct {
	Peer  *TLInputPhoneCall // peer:InputPhoneCall
	Debug *TLDataJSON       // debug:DataJSON
}

func (o *TLPhoneSaveCallDebug) Cmd() uint32 {
	return TagPhoneSaveCallDebug
}

func (o *TLPhoneSaveCallDebug) ReadBareFrom(r *tl.Reader) {
	if cmd := r.ReadCmd(); cmd != TagInputPhoneCall {
		r.Fail(errors.New("expected: inputPhoneCall"))
	}
	o.Peer = new(TLInputPhoneCall)
	o.Peer.ReadBareFrom(r)
	if cmd := r.ReadCmd(); cmd != TagDataJSON {
		r.Fail(errors.New("expected: dataJSON"))
	}
	o.Debug = new(TLDataJSON)
	o.Debug.ReadBareFrom(r)
}

func (o *TLPhoneSaveCallDebug) WriteBareTo(w *tl.Writer) {
	w.WriteCmd(TagInputPhoneCall)
	o.Peer.WriteBareTo(w)
	w.WriteCmd(TagDataJSON)
	o.Debug.WriteBareTo(w)
}

func (o *TLPhoneSaveCallDebug) String() string {
	return tl.Pretty(o)
}

// TLServerDHParamsFail represents ctor server_DH_params_fail#79cb045d nonce:int128 server_nonce:int128 new_nonce_hash:int128 = Server_DH_Params from MTProto
type TLServerDHParamsFail struct {
	Nonce        [16]byte // nonce:int128
	ServerNonce  [16]byte // server_nonce:int128
	NewNonceHash [16]byte // new_nonce_hash:int128
}

func (o *TLServerDHParamsFail) IsTLServerDHParams() {}

func (o *TLServerDHParamsFail) Cmd() uint32 {
	return TagServerDHParamsFail
}

func (o *TLServerDHParamsFail) ReadBareFrom(r *tl.Reader) {
	r.ReadUint128(o.Nonce[:])
	r.ReadUint128(o.ServerNonce[:])
	r.ReadUint128(o.NewNonceHash[:])
}

func (o *TLServerDHParamsFail) WriteBareTo(w *tl.Writer) {
	w.WriteUint128(o.Nonce[:])
	w.WriteUint128(o.ServerNonce[:])
	w.WriteUint128(o.NewNonceHash[:])
}

func (o *TLServerDHParamsFail) String() string {
	return tl.Pretty(o)
}

// TLServerDHParamsOK represents ctor server_DH_params_ok#d0e8075c nonce:int128 server_nonce:int128 encrypted_answer:bytes = Server_DH_Params from MTProto
type TLServerDHParamsOK struct {
	Nonce           [16]byte // nonce:int128
	ServerNonce     [16]byte // server_nonce:int128
	EncryptedAnswer []byte   // encrypted_answer:bytes
}

func (o *TLServerDHParamsOK) IsTLServerDHParams() {}

func (o *TLServerDHParamsOK) Cmd() uint32 {
	return TagServerDHParamsOK
}

func (o *TLServerDHParamsOK) ReadBareFrom(r *tl.Reader) {
	r.ReadUint128(o.Nonce[:])
	r.ReadUint128(o.ServerNonce[:])
	o.EncryptedAnswer = r.ReadBlob()
}

func (o *TLServerDHParamsOK) WriteBareTo(w *tl.Writer) {
	w.WriteUint128(o.Nonce[:])
	w.WriteUint128(o.ServerNonce[:])
	w.WriteBlob(o.EncryptedAnswer)
}

func (o *TLServerDHParamsOK) String() string {
	return tl.Pretty(o)
}

// TLDHGenOK represents ctor dh_gen_ok#3bcbf734 nonce:int128 server_nonce:int128 new_nonce_hash1:int128 = Set_client_DH_params_answer from MTProto
type TLDHGenOK struct {
	Nonce         [16]byte // nonce:int128
	ServerNonce   [16]byte // server_nonce:int128
	NewNonceHash1 [16]byte // new_nonce_hash1:int128
}

func (o *TLDHGenOK) IsTLSetClientDHParamsAnswer() {}

func (o *TLDHGenOK) Cmd() uint32 {
	return TagDHGenOK
}

func (o *TLDHGenOK) ReadBareFrom(r *tl.Reader) {
	r.ReadUint128(o.Nonce[:])
	r.ReadUint128(o.ServerNonce[:])
	r.ReadUint128(o.NewNonceHash1[:])
}

func (o *TLDHGenOK) WriteBareTo(w *tl.Writer) {
	w.WriteUint128(o.Nonce[:])
	w.WriteUint128(o.ServerNonce[:])
	w.WriteUint128(o.NewNonceHash1[:])
}

func (o *TLDHGenOK) String() string {
	return tl.Pretty(o)
}

// TLDHGenRetry represents ctor dh_gen_retry#46dc1fb9 nonce:int128 server_nonce:int128 new_nonce_hash2:int128 = Set_client_DH_params_answer from MTProto
type TLDHGenRetry struct {
	Nonce         [16]byte // nonce:int128
	ServerNonce   [16]byte // server_nonce:int128
	NewNonceHash2 [16]byte // new_nonce_hash2:int128
}

func (o *TLDHGenRetry) IsTLSetClientDHParamsAnswer() {}

func (o *TLDHGenRetry) Cmd() uint32 {
	return TagDHGenRetry
}

func (o *TLDHGenRetry) ReadBareFrom(r *tl.Reader) {
	r.ReadUint128(o.Nonce[:])
	r.ReadUint128(o.ServerNonce[:])
	r.ReadUint128(o.NewNonceHash2[:])
}

func (o *TLDHGenRetry) WriteBareTo(w *tl.Writer) {
	w.WriteUint128(o.Nonce[:])
	w.WriteUint128(o.ServerNonce[:])
	w.WriteUint128(o.NewNonceHash2[:])
}

func (o *TLDHGenRetry) String() string {
	return tl.Pretty(o)
}

// TLDHGenFail represents ctor dh_gen_fail#a69dae02 nonce:int128 server_nonce:int128 new_nonce_hash3:int128 = Set_client_DH_params_answer from MTProto
type TLDHGenFail struct {
	Nonce         [16]byte // nonce:int128
	ServerNonce   [16]byte // server_nonce:int128
	NewNonceHash3 [16]byte // new_nonce_hash3:int128
}

func (o *TLDHGenFail) IsTLSetClientDHParamsAnswer() {}

func (o *TLDHGenFail) Cmd() uint32 {
	return TagDHGenFail
}

func (o *TLDHGenFail) ReadBareFrom(r *tl.Reader) {
	r.ReadUint128(o.Nonce[:])
	r.ReadUint128(o.ServerNonce[:])
	r.ReadUint128(o.NewNonceHash3[:])
}

func (o *TLDHGenFail) WriteBareTo(w *tl.Writer) {
	w.WriteUint128(o.Nonce[:])
	w.WriteUint128(o.ServerNonce[:])
	w.WriteUint128(o.NewNonceHash3[:])
}

func (o *TLDHGenFail) String() string {
	return tl.Pretty(o)
}

// TLRPCAnswerUnknown represents ctor rpc_answer_unknown#5e2ad36e = RpcDropAnswer from MTProto
type TLRPCAnswerUnknown struct {
}

func (o *TLRPCAnswerUnknown) IsTLRPCDropAnswer() {}

func (o *TLRPCAnswerUnknown) Cmd() uint32 {
	return TagRPCAnswerUnknown
}

func (o *TLRPCAnswerUnknown) ReadBareFrom(r *tl.Reader) {
}

func (o *TLRPCAnswerUnknown) WriteBareTo(w *tl.Writer) {
}

func (o *TLRPCAnswerUnknown) String() string {
	return tl.Pretty(o)
}

// TLRPCAnswerDroppedRunning represents ctor rpc_answer_dropped_running#cd78e586 = RpcDropAnswer from MTProto
type TLRPCAnswerDroppedRunning struct {
}

func (o *TLRPCAnswerDroppedRunning) IsTLRPCDropAnswer() {}

func (o *TLRPCAnswerDroppedRunning) Cmd() uint32 {
	return TagRPCAnswerDroppedRunning
}

func (o *TLRPCAnswerDroppedRunning) ReadBareFrom(r *tl.Reader) {
}

func (o *TLRPCAnswerDroppedRunning) WriteBareTo(w *tl.Writer) {
}

func (o *TLRPCAnswerDroppedRunning) String() string {
	return tl.Pretty(o)
}

// TLRPCAnswerDropped represents ctor rpc_answer_dropped#a43ad8b7 msg_id:long seq_no:int bytes:int = RpcDropAnswer from MTProto
type TLRPCAnswerDropped struct {
	MsgID uint64 // msg_id:long
	SeqNo int    // seq_no:int
	Bytes int    // bytes:int
}

func (o *TLRPCAnswerDropped) IsTLRPCDropAnswer() {}

func (o *TLRPCAnswerDropped) Cmd() uint32 {
	return TagRPCAnswerDropped
}

func (o *TLRPCAnswerDropped) ReadBareFrom(r *tl.Reader) {
	o.MsgID = r.ReadUint64()
	o.SeqNo = r.ReadInt()
	o.Bytes = r.ReadInt()
}

func (o *TLRPCAnswerDropped) WriteBareTo(w *tl.Writer) {
	w.WriteUint64(o.MsgID)
	w.WriteInt(o.SeqNo)
	w.WriteInt(o.Bytes)
}

func (o *TLRPCAnswerDropped) String() string {
	return tl.Pretty(o)
}

// TLDestroySessionOK represents ctor destroy_session_ok#e22045fc session_id:long = DestroySessionRes from MTProto
type TLDestroySessionOK struct {
	SessionID uint64 // session_id:long
}

func (o *TLDestroySessionOK) IsTLDestroySessionRes() {}

func (o *TLDestroySessionOK) Cmd() uint32 {
	return TagDestroySessionOK
}

func (o *TLDestroySessionOK) ReadBareFrom(r *tl.Reader) {
	o.SessionID = r.ReadUint64()
}

func (o *TLDestroySessionOK) WriteBareTo(w *tl.Writer) {
	w.WriteUint64(o.SessionID)
}

func (o *TLDestroySessionOK) String() string {
	return tl.Pretty(o)
}

// TLDestroySessionNone represents ctor destroy_session_none#62d350c9 session_id:long = DestroySessionRes from MTProto
type TLDestroySessionNone struct {
	SessionID uint64 // session_id:long
}

func (o *TLDestroySessionNone) IsTLDestroySessionRes() {}

func (o *TLDestroySessionNone) Cmd() uint32 {
	return TagDestroySessionNone
}

func (o *TLDestroySessionNone) ReadBareFrom(r *tl.Reader) {
	o.SessionID = r.ReadUint64()
}

func (o *TLDestroySessionNone) WriteBareTo(w *tl.Writer) {
	w.WriteUint64(o.SessionID)
}

func (o *TLDestroySessionNone) String() string {
	return tl.Pretty(o)
}

// TLMessageEmpty represents ctor messageEmpty#83e5de54 id:int = Message from Telegram
type TLMessageEmpty struct {
	ID int // id:int
}

func (o *TLMessageEmpty) IsTLMessage() {}

func (o *TLMessageEmpty) Cmd() uint32 {
	return TagMessageEmpty
}

func (o *TLMessageEmpty) ReadBareFrom(r *tl.Reader) {
	o.ID = r.ReadInt()
}

func (o *TLMessageEmpty) WriteBareTo(w *tl.Writer) {
	w.WriteInt(o.ID)
}

func (o *TLMessageEmpty) String() string {
	return tl.Pretty(o)
}

// TLMessage represents ctor message#c09be45f flags:# flags.1?out:true flags.4?mentioned:true flags.5?media_unread:true flags.13?silent:true flags.14?post:true id:int flags.8?from_id:int to_id:Peer flags.2?fwd_from:MessageFwdHeader flags.11?via_bot_id:int flags.3?reply_to_msg_id:int date:int message:string flags.9?media:MessageMedia flags.6?reply_markup:ReplyMarkup flags.7?entities:Vector<MessageEntity> flags.10?views:int flags.15?edit_date:int = Message from Telegram
type TLMessage struct {
	Flags        uint                  // flags:#
	Out          bool                  // flags.1?out:true
	Mentioned    bool                  // flags.4?mentioned:true
	MediaUnread  bool                  // flags.5?media_unread:true
	Silent       bool                  // flags.13?silent:true
	Post         bool                  // flags.14?post:true
	ID           int                   // id:int
	FromID       int                   // flags.8?from_id:int
	ToID         TLPeerType            // to_id:Peer
	FwdFrom      *TLMessageFwdHeader   // flags.2?fwd_from:MessageFwdHeader
	ViaBotID     int                   // flags.11?via_bot_id:int
	ReplyToMsgID int                   // flags.3?reply_to_msg_id:int
	Date         int                   // date:int
	Message      string                // message:string
	Media        TLMessageMediaType    // flags.9?media:MessageMedia
	ReplyMarkup  TLReplyMarkupType     // flags.6?reply_markup:ReplyMarkup
	Entities     []TLMessageEntityType // flags.7?entities:Vector<MessageEntity>
	Views        int                   // flags.10?views:int
	EditDate     int                   // flags.15?edit_date:int
}

func (o *TLMessage) IsTLMessage() {}

func (o *TLMessage) Cmd() uint32 {
	return TagMessage
}

func (o *TLMessage) ReadBareFrom(r *tl.Reader) {
	o.Flags = uint(r.ReadUint32())
	o.Out = true
	o.Mentioned = true
	o.MediaUnread = true
	o.Silent = true
	o.Post = true
	o.ID = r.ReadInt()
	o.FromID = r.ReadInt()
	o.ToID = Schema.ReadLimitedBoxedObjectFrom(r, TagPeerUser, TagPeerChat, TagPeerChannel).(TLPeerType)
	if cmd := r.ReadCmd(); cmd != TagMessageFwdHeader {
		r.Fail(errors.New("expected: messageFwdHeader"))
	}
	o.FwdFrom = new(TLMessageFwdHeader)
	o.FwdFrom.ReadBareFrom(r)
	o.ViaBotID = r.ReadInt()
	o.ReplyToMsgID = r.ReadInt()
	o.Date = r.ReadInt()
	o.Message = r.ReadString()
	o.Media = Schema.ReadLimitedBoxedObjectFrom(r, TagMessageMediaEmpty, TagMessageMediaPhoto, TagMessageMediaGeo, TagMessageMediaContact, TagMessageMediaUnsupported, TagMessageMediaDocument, TagMessageMediaWebPage, TagMessageMediaVenue, TagMessageMediaGame, TagMessageMediaInvoice).(TLMessageMediaType)
	o.ReplyMarkup = Schema.ReadLimitedBoxedObjectFrom(r, TagReplyKeyboardHide, TagReplyKeyboardForceReply, TagReplyKeyboardMarkup, TagReplyInlineMarkup).(TLReplyMarkupType)
	if cmd := r.ReadCmd(); cmd != TagVector {
		r.Fail(errors.New("expected: vector"))
	}
	o.Entities = make([]TLMessageEntityType, r.ReadInt())
	for i := 0; i < len(o.Entities); i++ {
		o.Entities[i] = Schema.ReadLimitedBoxedObjectFrom(r, TagMessageEntityUnknown, TagMessageEntityMention, TagMessageEntityHashtag, TagMessageEntityBotCommand, TagMessageEntityUrl, TagMessageEntityEmail, TagMessageEntityBold, TagMessageEntityItalic, TagMessageEntityCode, TagMessageEntityPre, TagMessageEntityTextUrl, TagMessageEntityMentionName, TagInputMessageEntityMentionName).(TLMessageEntityType)
	}
	o.Views = r.ReadInt()
	o.EditDate = r.ReadInt()
}

func (o *TLMessage) WriteBareTo(w *tl.Writer) {
	w.WriteUint32(uint32(o.Flags))
	w.WriteInt(o.ID)
	w.WriteInt(o.FromID)
	w.WriteCmd(o.ToID.Cmd())
	o.ToID.WriteBareTo(w)
	w.WriteCmd(TagMessageFwdHeader)
	o.FwdFrom.WriteBareTo(w)
	w.WriteInt(o.ViaBotID)
	w.WriteInt(o.ReplyToMsgID)
	w.WriteInt(o.Date)
	w.WriteString(o.Message)
	w.WriteCmd(o.Media.Cmd())
	o.Media.WriteBareTo(w)
	w.WriteCmd(o.ReplyMarkup.Cmd())
	o.ReplyMarkup.WriteBareTo(w)
	w.WriteCmd(TagVector)
	w.WriteInt(len(o.Entities))
	for i := 0; i < len(o.Entities); i++ {
		w.WriteCmd(o.Entities[i].Cmd())
		o.Entities[i].WriteBareTo(w)
	}
	w.WriteInt(o.Views)
	w.WriteInt(o.EditDate)
}

func (o *TLMessage) String() string {
	return tl.Pretty(o)
}

// TLMessageService represents ctor messageService#9e19a1f6 flags:# flags.1?out:true flags.4?mentioned:true flags.5?media_unread:true flags.13?silent:true flags.14?post:true id:int flags.8?from_id:int to_id:Peer flags.3?reply_to_msg_id:int date:int action:MessageAction = Message from Telegram
type TLMessageService struct {
	Flags        uint                // flags:#
	Out          bool                // flags.1?out:true
	Mentioned    bool                // flags.4?mentioned:true
	MediaUnread  bool                // flags.5?media_unread:true
	Silent       bool                // flags.13?silent:true
	Post         bool                // flags.14?post:true
	ID           int                 // id:int
	FromID       int                 // flags.8?from_id:int
	ToID         TLPeerType          // to_id:Peer
	ReplyToMsgID int                 // flags.3?reply_to_msg_id:int
	Date         int                 // date:int
	Action       TLMessageActionType // action:MessageAction
}

func (o *TLMessageService) IsTLMessage() {}

func (o *TLMessageService) Cmd() uint32 {
	return TagMessageService
}

func (o *TLMessageService) ReadBareFrom(r *tl.Reader) {
	o.Flags = uint(r.ReadUint32())
	o.Out = true
	o.Mentioned = true
	o.MediaUnread = true
	o.Silent = true
	o.Post = true
	o.ID = r.ReadInt()
	o.FromID = r.ReadInt()
	o.ToID = Schema.ReadLimitedBoxedObjectFrom(r, TagPeerUser, TagPeerChat, TagPeerChannel).(TLPeerType)
	o.ReplyToMsgID = r.ReadInt()
	o.Date = r.ReadInt()
	o.Action = Schema.ReadLimitedBoxedObjectFrom(r, TagMessageActionEmpty, TagMessageActionChatCreate, TagMessageActionChatEditTitle, TagMessageActionChatEditPhoto, TagMessageActionChatDeletePhoto, TagMessageActionChatAddUser, TagMessageActionChatDeleteUser, TagMessageActionChatJoinedByLink, TagMessageActionChannelCreate, TagMessageActionChatMigrateTo, TagMessageActionChannelMigrateFrom, TagMessageActionPinMessage, TagMessageActionHistoryClear, TagMessageActionGameScore, TagMessageActionPaymentSentMe, TagMessageActionPaymentSent, TagMessageActionPhoneCall).(TLMessageActionType)
}

func (o *TLMessageService) WriteBareTo(w *tl.Writer) {
	w.WriteUint32(uint32(o.Flags))
	w.WriteInt(o.ID)
	w.WriteInt(o.FromID)
	w.WriteCmd(o.ToID.Cmd())
	o.ToID.WriteBareTo(w)
	w.WriteInt(o.ReplyToMsgID)
	w.WriteInt(o.Date)
	w.WriteCmd(o.Action.Cmd())
	o.Action.WriteBareTo(w)
}

func (o *TLMessageService) String() string {
	return tl.Pretty(o)
}

// TLBadMsgNotification represents ctor bad_msg_notification#a7eff811 bad_msg_id:long bad_msg_seqno:int error_code:int = BadMsgNotification from MTProto
type TLBadMsgNotification struct {
	BadMsgID    uint64 // bad_msg_id:long
	BadMsgSeqno int    // bad_msg_seqno:int
	ErrorCode   int    // error_code:int
}

func (o *TLBadMsgNotification) IsTLBadMsgNotification() {}

func (o *TLBadMsgNotification) Cmd() uint32 {
	return TagBadMsgNotification
}

func (o *TLBadMsgNotification) ReadBareFrom(r *tl.Reader) {
	o.BadMsgID = r.ReadUint64()
	o.BadMsgSeqno = r.ReadInt()
	o.ErrorCode = r.ReadInt()
}

func (o *TLBadMsgNotification) WriteBareTo(w *tl.Writer) {
	w.WriteUint64(o.BadMsgID)
	w.WriteInt(o.BadMsgSeqno)
	w.WriteInt(o.ErrorCode)
}

func (o *TLBadMsgNotification) String() string {
	return tl.Pretty(o)
}

// TLBadServerSalt represents ctor bad_server_salt#edab447b bad_msg_id:long bad_msg_seqno:int error_code:int new_server_salt:long = BadMsgNotification from MTProto
type TLBadServerSalt struct {
	BadMsgID      uint64 // bad_msg_id:long
	BadMsgSeqno   int    // bad_msg_seqno:int
	ErrorCode     int    // error_code:int
	NewServerSalt uint64 // new_server_salt:long
}

func (o *TLBadServerSalt) IsTLBadMsgNotification() {}

func (o *TLBadServerSalt) Cmd() uint32 {
	return TagBadServerSalt
}

func (o *TLBadServerSalt) ReadBareFrom(r *tl.Reader) {
	o.BadMsgID = r.ReadUint64()
	o.BadMsgSeqno = r.ReadInt()
	o.ErrorCode = r.ReadInt()
	o.NewServerSalt = r.ReadUint64()
}

func (o *TLBadServerSalt) WriteBareTo(w *tl.Writer) {
	w.WriteUint64(o.BadMsgID)
	w.WriteInt(o.BadMsgSeqno)
	w.WriteInt(o.ErrorCode)
	w.WriteUint64(o.NewServerSalt)
}

func (o *TLBadServerSalt) String() string {
	return tl.Pretty(o)
}

// TLMsgDetailedInfo represents ctor msg_detailed_info#276d3ec6 msg_id:long answer_msg_id:long bytes:int status:int = MsgDetailedInfo from MTProto
type TLMsgDetailedInfo struct {
	MsgID       uint64 // msg_id:long
	AnswerMsgID uint64 // answer_msg_id:long
	Bytes       int    // bytes:int
	Status      int    // status:int
}

func (o *TLMsgDetailedInfo) IsTLMsgDetailedInfo() {}

func (o *TLMsgDetailedInfo) Cmd() uint32 {
	return TagMsgDetailedInfo
}

func (o *TLMsgDetailedInfo) ReadBareFrom(r *tl.Reader) {
	o.MsgID = r.ReadUint64()
	o.AnswerMsgID = r.ReadUint64()
	o.Bytes = r.ReadInt()
	o.Status = r.ReadInt()
}

func (o *TLMsgDetailedInfo) WriteBareTo(w *tl.Writer) {
	w.WriteUint64(o.MsgID)
	w.WriteUint64(o.AnswerMsgID)
	w.WriteInt(o.Bytes)
	w.WriteInt(o.Status)
}

func (o *TLMsgDetailedInfo) String() string {
	return tl.Pretty(o)
}

// TLMsgNewDetailedInfo represents ctor msg_new_detailed_info#809db6df answer_msg_id:long bytes:int status:int = MsgDetailedInfo from MTProto
type TLMsgNewDetailedInfo struct {
	AnswerMsgID uint64 // answer_msg_id:long
	Bytes       int    // bytes:int
	Status      int    // status:int
}

func (o *TLMsgNewDetailedInfo) IsTLMsgDetailedInfo() {}

func (o *TLMsgNewDetailedInfo) Cmd() uint32 {
	return TagMsgNewDetailedInfo
}

func (o *TLMsgNewDetailedInfo) ReadBareFrom(r *tl.Reader) {
	o.AnswerMsgID = r.ReadUint64()
	o.Bytes = r.ReadInt()
	o.Status = r.ReadInt()
}

func (o *TLMsgNewDetailedInfo) WriteBareTo(w *tl.Writer) {
	w.WriteUint64(o.AnswerMsgID)
	w.WriteInt(o.Bytes)
	w.WriteInt(o.Status)
}

func (o *TLMsgNewDetailedInfo) String() string {
	return tl.Pretty(o)
}

// TLInputPeerEmpty represents ctor inputPeerEmpty#7f3b18ea = InputPeer from Telegram
type TLInputPeerEmpty struct {
}

func (o *TLInputPeerEmpty) IsTLInputPeer() {}

func (o *TLInputPeerEmpty) Cmd() uint32 {
	return TagInputPeerEmpty
}

func (o *TLInputPeerEmpty) ReadBareFrom(r *tl.Reader) {
}

func (o *TLInputPeerEmpty) WriteBareTo(w *tl.Writer) {
}

func (o *TLInputPeerEmpty) String() string {
	return tl.Pretty(o)
}

// TLInputPeerSelf represents ctor inputPeerSelf#7da07ec9 = InputPeer from Telegram
type TLInputPeerSelf struct {
}

func (o *TLInputPeerSelf) IsTLInputPeer() {}

func (o *TLInputPeerSelf) Cmd() uint32 {
	return TagInputPeerSelf
}

func (o *TLInputPeerSelf) ReadBareFrom(r *tl.Reader) {
}

func (o *TLInputPeerSelf) WriteBareTo(w *tl.Writer) {
}

func (o *TLInputPeerSelf) String() string {
	return tl.Pretty(o)
}

// TLInputPeerChat represents ctor inputPeerChat#179be863 chat_id:int = InputPeer from Telegram
type TLInputPeerChat struct {
	ChatID int // chat_id:int
}

func (o *TLInputPeerChat) IsTLInputPeer() {}

func (o *TLInputPeerChat) Cmd() uint32 {
	return TagInputPeerChat
}

func (o *TLInputPeerChat) ReadBareFrom(r *tl.Reader) {
	o.ChatID = r.ReadInt()
}

func (o *TLInputPeerChat) WriteBareTo(w *tl.Writer) {
	w.WriteInt(o.ChatID)
}

func (o *TLInputPeerChat) String() string {
	return tl.Pretty(o)
}

// TLInputPeerUser represents ctor inputPeerUser#7b8e7de6 user_id:int access_hash:long = InputPeer from Telegram
type TLInputPeerUser struct {
	UserID     int    // user_id:int
	AccessHash uint64 // access_hash:long
}

func (o *TLInputPeerUser) IsTLInputPeer() {}

func (o *TLInputPeerUser) Cmd() uint32 {
	return TagInputPeerUser
}

func (o *TLInputPeerUser) ReadBareFrom(r *tl.Reader) {
	o.UserID = r.ReadInt()
	o.AccessHash = r.ReadUint64()
}

func (o *TLInputPeerUser) WriteBareTo(w *tl.Writer) {
	w.WriteInt(o.UserID)
	w.WriteUint64(o.AccessHash)
}

func (o *TLInputPeerUser) String() string {
	return tl.Pretty(o)
}

// TLInputPeerChannel represents ctor inputPeerChannel#20adaef8 channel_id:int access_hash:long = InputPeer from Telegram
type TLInputPeerChannel struct {
	ChannelID  int    // channel_id:int
	AccessHash uint64 // access_hash:long
}

func (o *TLInputPeerChannel) IsTLInputPeer() {}

func (o *TLInputPeerChannel) Cmd() uint32 {
	return TagInputPeerChannel
}

func (o *TLInputPeerChannel) ReadBareFrom(r *tl.Reader) {
	o.ChannelID = r.ReadInt()
	o.AccessHash = r.ReadUint64()
}

func (o *TLInputPeerChannel) WriteBareTo(w *tl.Writer) {
	w.WriteInt(o.ChannelID)
	w.WriteUint64(o.AccessHash)
}

func (o *TLInputPeerChannel) String() string {
	return tl.Pretty(o)
}

// TLInputUserEmpty represents ctor inputUserEmpty#b98886cf = InputUser from Telegram
type TLInputUserEmpty struct {
}

func (o *TLInputUserEmpty) IsTLInputUser() {}

func (o *TLInputUserEmpty) Cmd() uint32 {
	return TagInputUserEmpty
}

func (o *TLInputUserEmpty) ReadBareFrom(r *tl.Reader) {
}

func (o *TLInputUserEmpty) WriteBareTo(w *tl.Writer) {
}

func (o *TLInputUserEmpty) String() string {
	return tl.Pretty(o)
}

// TLInputUserSelf represents ctor inputUserSelf#f7c1b13f = InputUser from Telegram
type TLInputUserSelf struct {
}

func (o *TLInputUserSelf) IsTLInputUser() {}

func (o *TLInputUserSelf) Cmd() uint32 {
	return TagInputUserSelf
}

func (o *TLInputUserSelf) ReadBareFrom(r *tl.Reader) {
}

func (o *TLInputUserSelf) WriteBareTo(w *tl.Writer) {
}

func (o *TLInputUserSelf) String() string {
	return tl.Pretty(o)
}

// TLInputUser represents ctor inputUser#d8292816 user_id:int access_hash:long = InputUser from Telegram
type TLInputUser struct {
	UserID     int    // user_id:int
	AccessHash uint64 // access_hash:long
}

func (o *TLInputUser) IsTLInputUser() {}

func (o *TLInputUser) Cmd() uint32 {
	return TagInputUser
}

func (o *TLInputUser) ReadBareFrom(r *tl.Reader) {
	o.UserID = r.ReadInt()
	o.AccessHash = r.ReadUint64()
}

func (o *TLInputUser) WriteBareTo(w *tl.Writer) {
	w.WriteInt(o.UserID)
	w.WriteUint64(o.AccessHash)
}

func (o *TLInputUser) String() string {
	return tl.Pretty(o)
}

// TLInputFile represents ctor inputFile#f52ff27f id:long parts:int name:string md5_checksum:string = InputFile from Telegram
type TLInputFile struct {
	ID          uint64 // id:long
	Parts       int    // parts:int
	Name        string // name:string
	Md5Checksum string // md5_checksum:string
}

func (o *TLInputFile) IsTLInputFile() {}

func (o *TLInputFile) Cmd() uint32 {
	return TagInputFile
}

func (o *TLInputFile) ReadBareFrom(r *tl.Reader) {
	o.ID = r.ReadUint64()
	o.Parts = r.ReadInt()
	o.Name = r.ReadString()
	o.Md5Checksum = r.ReadString()
}

func (o *TLInputFile) WriteBareTo(w *tl.Writer) {
	w.WriteUint64(o.ID)
	w.WriteInt(o.Parts)
	w.WriteString(o.Name)
	w.WriteString(o.Md5Checksum)
}

func (o *TLInputFile) String() string {
	return tl.Pretty(o)
}

// TLInputFileBig represents ctor inputFileBig#fa4f0bb5 id:long parts:int name:string = InputFile from Telegram
type TLInputFileBig struct {
	ID    uint64 // id:long
	Parts int    // parts:int
	Name  string // name:string
}

func (o *TLInputFileBig) IsTLInputFile() {}

func (o *TLInputFileBig) Cmd() uint32 {
	return TagInputFileBig
}

func (o *TLInputFileBig) ReadBareFrom(r *tl.Reader) {
	o.ID = r.ReadUint64()
	o.Parts = r.ReadInt()
	o.Name = r.ReadString()
}

func (o *TLInputFileBig) WriteBareTo(w *tl.Writer) {
	w.WriteUint64(o.ID)
	w.WriteInt(o.Parts)
	w.WriteString(o.Name)
}

func (o *TLInputFileBig) String() string {
	return tl.Pretty(o)
}

// TLInputMediaEmpty represents ctor inputMediaEmpty#9664f57f = InputMedia from Telegram
type TLInputMediaEmpty struct {
}

func (o *TLInputMediaEmpty) IsTLInputMedia() {}

func (o *TLInputMediaEmpty) Cmd() uint32 {
	return TagInputMediaEmpty
}

func (o *TLInputMediaEmpty) ReadBareFrom(r *tl.Reader) {
}

func (o *TLInputMediaEmpty) WriteBareTo(w *tl.Writer) {
}

func (o *TLInputMediaEmpty) String() string {
	return tl.Pretty(o)
}

// TLInputMediaUploadedPhoto represents ctor inputMediaUploadedPhoto#630c9af1 flags:# file:InputFile caption:string flags.0?stickers:Vector<InputDocument> = InputMedia from Telegram
type TLInputMediaUploadedPhoto struct {
	Flags    uint                  // flags:#
	File     TLInputFileType       // file:InputFile
	Caption  string                // caption:string
	Stickers []TLInputDocumentType // flags.0?stickers:Vector<InputDocument>
}

func (o *TLInputMediaUploadedPhoto) IsTLInputMedia() {}

func (o *TLInputMediaUploadedPhoto) Cmd() uint32 {
	return TagInputMediaUploadedPhoto
}

func (o *TLInputMediaUploadedPhoto) ReadBareFrom(r *tl.Reader) {
	o.Flags = uint(r.ReadUint32())
	o.File = Schema.ReadLimitedBoxedObjectFrom(r, TagInputFile, TagInputFileBig).(TLInputFileType)
	o.Caption = r.ReadString()
	if cmd := r.ReadCmd(); cmd != TagVector {
		r.Fail(errors.New("expected: vector"))
	}
	o.Stickers = make([]TLInputDocumentType, r.ReadInt())
	for i := 0; i < len(o.Stickers); i++ {
		o.Stickers[i] = Schema.ReadLimitedBoxedObjectFrom(r, TagInputDocumentEmpty, TagInputDocument).(TLInputDocumentType)
	}
}

func (o *TLInputMediaUploadedPhoto) WriteBareTo(w *tl.Writer) {
	w.WriteUint32(uint32(o.Flags))
	w.WriteCmd(o.File.Cmd())
	o.File.WriteBareTo(w)
	w.WriteString(o.Caption)
	w.WriteCmd(TagVector)
	w.WriteInt(len(o.Stickers))
	for i := 0; i < len(o.Stickers); i++ {
		w.WriteCmd(o.Stickers[i].Cmd())
		o.Stickers[i].WriteBareTo(w)
	}
}

func (o *TLInputMediaUploadedPhoto) String() string {
	return tl.Pretty(o)
}

// TLInputMediaPhoto represents ctor inputMediaPhoto#e9bfb4f3 id:InputPhoto caption:string = InputMedia from Telegram
type TLInputMediaPhoto struct {
	ID      TLInputPhotoType // id:InputPhoto
	Caption string           // caption:string
}

func (o *TLInputMediaPhoto) IsTLInputMedia() {}

func (o *TLInputMediaPhoto) Cmd() uint32 {
	return TagInputMediaPhoto
}

func (o *TLInputMediaPhoto) ReadBareFrom(r *tl.Reader) {
	o.ID = Schema.ReadLimitedBoxedObjectFrom(r, TagInputPhotoEmpty, TagInputPhoto).(TLInputPhotoType)
	o.Caption = r.ReadString()
}

func (o *TLInputMediaPhoto) WriteBareTo(w *tl.Writer) {
	w.WriteCmd(o.ID.Cmd())
	o.ID.WriteBareTo(w)
	w.WriteString(o.Caption)
}

func (o *TLInputMediaPhoto) String() string {
	return tl.Pretty(o)
}

// TLInputMediaGeoPoint represents ctor inputMediaGeoPoint#f9c44144 geo_point:InputGeoPoint = InputMedia from Telegram
type TLInputMediaGeoPoint struct {
	GeoPoint TLInputGeoPointType // geo_point:InputGeoPoint
}

func (o *TLInputMediaGeoPoint) IsTLInputMedia() {}

func (o *TLInputMediaGeoPoint) Cmd() uint32 {
	return TagInputMediaGeoPoint
}

func (o *TLInputMediaGeoPoint) ReadBareFrom(r *tl.Reader) {
	o.GeoPoint = Schema.ReadLimitedBoxedObjectFrom(r, TagInputGeoPointEmpty, TagInputGeoPoint).(TLInputGeoPointType)
}

func (o *TLInputMediaGeoPoint) WriteBareTo(w *tl.Writer) {
	w.WriteCmd(o.GeoPoint.Cmd())
	o.GeoPoint.WriteBareTo(w)
}

func (o *TLInputMediaGeoPoint) String() string {
	return tl.Pretty(o)
}

// TLInputMediaContact represents ctor inputMediaContact#a6e45987 phone_number:string first_name:string last_name:string = InputMedia from Telegram
type TLInputMediaContact struct {
	PhoneNumber string // phone_number:string
	FirstName   string // first_name:string
	LastName    string // last_name:string
}

func (o *TLInputMediaContact) IsTLInputMedia() {}

func (o *TLInputMediaContact) Cmd() uint32 {
	return TagInputMediaContact
}

func (o *TLInputMediaContact) ReadBareFrom(r *tl.Reader) {
	o.PhoneNumber = r.ReadString()
	o.FirstName = r.ReadString()
	o.LastName = r.ReadString()
}

func (o *TLInputMediaContact) WriteBareTo(w *tl.Writer) {
	w.WriteString(o.PhoneNumber)
	w.WriteString(o.FirstName)
	w.WriteString(o.LastName)
}

func (o *TLInputMediaContact) String() string {
	return tl.Pretty(o)
}

// TLInputMediaUploadedDocument represents ctor inputMediaUploadedDocument#d070f1e9 flags:# file:InputFile mime_type:string attributes:Vector<DocumentAttribute> caption:string flags.0?stickers:Vector<InputDocument> = InputMedia from Telegram
type TLInputMediaUploadedDocument struct {
	Flags      uint                      // flags:#
	File       TLInputFileType           // file:InputFile
	MimeType   string                    // mime_type:string
	Attributes []TLDocumentAttributeType // attributes:Vector<DocumentAttribute>
	Caption    string                    // caption:string
	Stickers   []TLInputDocumentType     // flags.0?stickers:Vector<InputDocument>
}

func (o *TLInputMediaUploadedDocument) IsTLInputMedia() {}

func (o *TLInputMediaUploadedDocument) Cmd() uint32 {
	return TagInputMediaUploadedDocument
}

func (o *TLInputMediaUploadedDocument) ReadBareFrom(r *tl.Reader) {
	o.Flags = uint(r.ReadUint32())
	o.File = Schema.ReadLimitedBoxedObjectFrom(r, TagInputFile, TagInputFileBig).(TLInputFileType)
	o.MimeType = r.ReadString()
	if cmd := r.ReadCmd(); cmd != TagVector {
		r.Fail(errors.New("expected: vector"))
	}
	o.Attributes = make([]TLDocumentAttributeType, r.ReadInt())
	for i := 0; i < len(o.Attributes); i++ {
		o.Attributes[i] = Schema.ReadLimitedBoxedObjectFrom(r, TagDocumentAttributeImageSize, TagDocumentAttributeAnimated, TagDocumentAttributeSticker, TagDocumentAttributeVideo, TagDocumentAttributeAudio, TagDocumentAttributeFilename, TagDocumentAttributeHasStickers).(TLDocumentAttributeType)
	}
	o.Caption = r.ReadString()
	if cmd := r.ReadCmd(); cmd != TagVector {
		r.Fail(errors.New("expected: vector"))
	}
	o.Stickers = make([]TLInputDocumentType, r.ReadInt())
	for i := 0; i < len(o.Stickers); i++ {
		o.Stickers[i] = Schema.ReadLimitedBoxedObjectFrom(r, TagInputDocumentEmpty, TagInputDocument).(TLInputDocumentType)
	}
}

func (o *TLInputMediaUploadedDocument) WriteBareTo(w *tl.Writer) {
	w.WriteUint32(uint32(o.Flags))
	w.WriteCmd(o.File.Cmd())
	o.File.WriteBareTo(w)
	w.WriteString(o.MimeType)
	w.WriteCmd(TagVector)
	w.WriteInt(len(o.Attributes))
	for i := 0; i < len(o.Attributes); i++ {
		w.WriteCmd(o.Attributes[i].Cmd())
		o.Attributes[i].WriteBareTo(w)
	}
	w.WriteString(o.Caption)
	w.WriteCmd(TagVector)
	w.WriteInt(len(o.Stickers))
	for i := 0; i < len(o.Stickers); i++ {
		w.WriteCmd(o.Stickers[i].Cmd())
		o.Stickers[i].WriteBareTo(w)
	}
}

func (o *TLInputMediaUploadedDocument) String() string {
	return tl.Pretty(o)
}

// TLInputMediaUploadedThumbDocument represents ctor inputMediaUploadedThumbDocument#50d88cae flags:# file:InputFile thumb:InputFile mime_type:string attributes:Vector<DocumentAttribute> caption:string flags.0?stickers:Vector<InputDocument> = InputMedia from Telegram
type TLInputMediaUploadedThumbDocument struct {
	Flags      uint                      // flags:#
	File       TLInputFileType           // file:InputFile
	Thumb      TLInputFileType           // thumb:InputFile
	MimeType   string                    // mime_type:string
	Attributes []TLDocumentAttributeType // attributes:Vector<DocumentAttribute>
	Caption    string                    // caption:string
	Stickers   []TLInputDocumentType     // flags.0?stickers:Vector<InputDocument>
}

func (o *TLInputMediaUploadedThumbDocument) IsTLInputMedia() {}

func (o *TLInputMediaUploadedThumbDocument) Cmd() uint32 {
	return TagInputMediaUploadedThumbDocument
}

func (o *TLInputMediaUploadedThumbDocument) ReadBareFrom(r *tl.Reader) {
	o.Flags = uint(r.ReadUint32())
	o.File = Schema.ReadLimitedBoxedObjectFrom(r, TagInputFile, TagInputFileBig).(TLInputFileType)
	o.Thumb = Schema.ReadLimitedBoxedObjectFrom(r, TagInputFile, TagInputFileBig).(TLInputFileType)
	o.MimeType = r.ReadString()
	if cmd := r.ReadCmd(); cmd != TagVector {
		r.Fail(errors.New("expected: vector"))
	}
	o.Attributes = make([]TLDocumentAttributeType, r.ReadInt())
	for i := 0; i < len(o.Attributes); i++ {
		o.Attributes[i] = Schema.ReadLimitedBoxedObjectFrom(r, TagDocumentAttributeImageSize, TagDocumentAttributeAnimated, TagDocumentAttributeSticker, TagDocumentAttributeVideo, TagDocumentAttributeAudio, TagDocumentAttributeFilename, TagDocumentAttributeHasStickers).(TLDocumentAttributeType)
	}
	o.Caption = r.ReadString()
	if cmd := r.ReadCmd(); cmd != TagVector {
		r.Fail(errors.New("expected: vector"))
	}
	o.Stickers = make([]TLInputDocumentType, r.ReadInt())
	for i := 0; i < len(o.Stickers); i++ {
		o.Stickers[i] = Schema.ReadLimitedBoxedObjectFrom(r, TagInputDocumentEmpty, TagInputDocument).(TLInputDocumentType)
	}
}

func (o *TLInputMediaUploadedThumbDocument) WriteBareTo(w *tl.Writer) {
	w.WriteUint32(uint32(o.Flags))
	w.WriteCmd(o.File.Cmd())
	o.File.WriteBareTo(w)
	w.WriteCmd(o.Thumb.Cmd())
	o.Thumb.WriteBareTo(w)
	w.WriteString(o.MimeType)
	w.WriteCmd(TagVector)
	w.WriteInt(len(o.Attributes))
	for i := 0; i < len(o.Attributes); i++ {
		w.WriteCmd(o.Attributes[i].Cmd())
		o.Attributes[i].WriteBareTo(w)
	}
	w.WriteString(o.Caption)
	w.WriteCmd(TagVector)
	w.WriteInt(len(o.Stickers))
	for i := 0; i < len(o.Stickers); i++ {
		w.WriteCmd(o.Stickers[i].Cmd())
		o.Stickers[i].WriteBareTo(w)
	}
}

func (o *TLInputMediaUploadedThumbDocument) String() string {
	return tl.Pretty(o)
}

// TLInputMediaDocument represents ctor inputMediaDocument#1a77f29c id:InputDocument caption:string = InputMedia from Telegram
type TLInputMediaDocument struct {
	ID      TLInputDocumentType // id:InputDocument
	Caption string              // caption:string
}

func (o *TLInputMediaDocument) IsTLInputMedia() {}

func (o *TLInputMediaDocument) Cmd() uint32 {
	return TagInputMediaDocument
}

func (o *TLInputMediaDocument) ReadBareFrom(r *tl.Reader) {
	o.ID = Schema.ReadLimitedBoxedObjectFrom(r, TagInputDocumentEmpty, TagInputDocument).(TLInputDocumentType)
	o.Caption = r.ReadString()
}

func (o *TLInputMediaDocument) WriteBareTo(w *tl.Writer) {
	w.WriteCmd(o.ID.Cmd())
	o.ID.WriteBareTo(w)
	w.WriteString(o.Caption)
}

func (o *TLInputMediaDocument) String() string {
	return tl.Pretty(o)
}

// TLInputMediaVenue represents ctor inputMediaVenue#2827a81a geo_point:InputGeoPoint title:string address:string provider:string venue_id:string = InputMedia from Telegram
type TLInputMediaVenue struct {
	GeoPoint TLInputGeoPointType // geo_point:InputGeoPoint
	Title    string              // title:string
	Address  string              // address:string
	Provider string              // provider:string
	VenueID  string              // venue_id:string
}

func (o *TLInputMediaVenue) IsTLInputMedia() {}

func (o *TLInputMediaVenue) Cmd() uint32 {
	return TagInputMediaVenue
}

func (o *TLInputMediaVenue) ReadBareFrom(r *tl.Reader) {
	o.GeoPoint = Schema.ReadLimitedBoxedObjectFrom(r, TagInputGeoPointEmpty, TagInputGeoPoint).(TLInputGeoPointType)
	o.Title = r.ReadString()
	o.Address = r.ReadString()
	o.Provider = r.ReadString()
	o.VenueID = r.ReadString()
}

func (o *TLInputMediaVenue) WriteBareTo(w *tl.Writer) {
	w.WriteCmd(o.GeoPoint.Cmd())
	o.GeoPoint.WriteBareTo(w)
	w.WriteString(o.Title)
	w.WriteString(o.Address)
	w.WriteString(o.Provider)
	w.WriteString(o.VenueID)
}

func (o *TLInputMediaVenue) String() string {
	return tl.Pretty(o)
}

// TLInputMediaGifExternal represents ctor inputMediaGifExternal#4843b0fd url:string q:string = InputMedia from Telegram
type TLInputMediaGifExternal struct {
	Url string // url:string
	Q   string // q:string
}

func (o *TLInputMediaGifExternal) IsTLInputMedia() {}

func (o *TLInputMediaGifExternal) Cmd() uint32 {
	return TagInputMediaGifExternal
}

func (o *TLInputMediaGifExternal) ReadBareFrom(r *tl.Reader) {
	o.Url = r.ReadString()
	o.Q = r.ReadString()
}

func (o *TLInputMediaGifExternal) WriteBareTo(w *tl.Writer) {
	w.WriteString(o.Url)
	w.WriteString(o.Q)
}

func (o *TLInputMediaGifExternal) String() string {
	return tl.Pretty(o)
}

// TLInputMediaPhotoExternal represents ctor inputMediaPhotoExternal#b55f4f18 url:string caption:string = InputMedia from Telegram
type TLInputMediaPhotoExternal struct {
	Url     string // url:string
	Caption string // caption:string
}

func (o *TLInputMediaPhotoExternal) IsTLInputMedia() {}

func (o *TLInputMediaPhotoExternal) Cmd() uint32 {
	return TagInputMediaPhotoExternal
}

func (o *TLInputMediaPhotoExternal) ReadBareFrom(r *tl.Reader) {
	o.Url = r.ReadString()
	o.Caption = r.ReadString()
}

func (o *TLInputMediaPhotoExternal) WriteBareTo(w *tl.Writer) {
	w.WriteString(o.Url)
	w.WriteString(o.Caption)
}

func (o *TLInputMediaPhotoExternal) String() string {
	return tl.Pretty(o)
}

// TLInputMediaDocumentExternal represents ctor inputMediaDocumentExternal#e5e9607c url:string caption:string = InputMedia from Telegram
type TLInputMediaDocumentExternal struct {
	Url     string // url:string
	Caption string // caption:string
}

func (o *TLInputMediaDocumentExternal) IsTLInputMedia() {}

func (o *TLInputMediaDocumentExternal) Cmd() uint32 {
	return TagInputMediaDocumentExternal
}

func (o *TLInputMediaDocumentExternal) ReadBareFrom(r *tl.Reader) {
	o.Url = r.ReadString()
	o.Caption = r.ReadString()
}

func (o *TLInputMediaDocumentExternal) WriteBareTo(w *tl.Writer) {
	w.WriteString(o.Url)
	w.WriteString(o.Caption)
}

func (o *TLInputMediaDocumentExternal) String() string {
	return tl.Pretty(o)
}

// TLInputMediaGame represents ctor inputMediaGame#d33f43f3 id:InputGame = InputMedia from Telegram
type TLInputMediaGame struct {
	ID TLInputGameType // id:InputGame
}

func (o *TLInputMediaGame) IsTLInputMedia() {}

func (o *TLInputMediaGame) Cmd() uint32 {
	return TagInputMediaGame
}

func (o *TLInputMediaGame) ReadBareFrom(r *tl.Reader) {
	o.ID = Schema.ReadLimitedBoxedObjectFrom(r, TagInputGameID, TagInputGameShortName).(TLInputGameType)
}

func (o *TLInputMediaGame) WriteBareTo(w *tl.Writer) {
	w.WriteCmd(o.ID.Cmd())
	o.ID.WriteBareTo(w)
}

func (o *TLInputMediaGame) String() string {
	return tl.Pretty(o)
}

// TLInputMediaInvoice represents ctor inputMediaInvoice#92153685 flags:# title:string description:string flags.0?photo:InputWebDocument invoice:Invoice payload:bytes provider:string start_param:string = InputMedia from Telegram
type TLInputMediaInvoice struct {
	Flags       uint                // flags:#
	Title       string              // title:string
	Description string              // description:string
	Photo       *TLInputWebDocument // flags.0?photo:InputWebDocument
	Invoice     *TLInvoice          // invoice:Invoice
	Payload     []byte              // payload:bytes
	Provider    string              // provider:string
	StartParam  string              // start_param:string
}

func (o *TLInputMediaInvoice) IsTLInputMedia() {}

func (o *TLInputMediaInvoice) Cmd() uint32 {
	return TagInputMediaInvoice
}

func (o *TLInputMediaInvoice) ReadBareFrom(r *tl.Reader) {
	o.Flags = uint(r.ReadUint32())
	o.Title = r.ReadString()
	o.Description = r.ReadString()
	if cmd := r.ReadCmd(); cmd != TagInputWebDocument {
		r.Fail(errors.New("expected: inputWebDocument"))
	}
	o.Photo = new(TLInputWebDocument)
	o.Photo.ReadBareFrom(r)
	if cmd := r.ReadCmd(); cmd != TagInvoice {
		r.Fail(errors.New("expected: invoice"))
	}
	o.Invoice = new(TLInvoice)
	o.Invoice.ReadBareFrom(r)
	o.Payload = r.ReadBlob()
	o.Provider = r.ReadString()
	o.StartParam = r.ReadString()
}

func (o *TLInputMediaInvoice) WriteBareTo(w *tl.Writer) {
	w.WriteUint32(uint32(o.Flags))
	w.WriteString(o.Title)
	w.WriteString(o.Description)
	w.WriteCmd(TagInputWebDocument)
	o.Photo.WriteBareTo(w)
	w.WriteCmd(TagInvoice)
	o.Invoice.WriteBareTo(w)
	w.WriteBlob(o.Payload)
	w.WriteString(o.Provider)
	w.WriteString(o.StartParam)
}

func (o *TLInputMediaInvoice) String() string {
	return tl.Pretty(o)
}

// TLInputChatPhotoEmpty represents ctor inputChatPhotoEmpty#1ca48f57 = InputChatPhoto from Telegram
type TLInputChatPhotoEmpty struct {
}

func (o *TLInputChatPhotoEmpty) IsTLInputChatPhoto() {}

func (o *TLInputChatPhotoEmpty) Cmd() uint32 {
	return TagInputChatPhotoEmpty
}

func (o *TLInputChatPhotoEmpty) ReadBareFrom(r *tl.Reader) {
}

func (o *TLInputChatPhotoEmpty) WriteBareTo(w *tl.Writer) {
}

func (o *TLInputChatPhotoEmpty) String() string {
	return tl.Pretty(o)
}

// TLInputChatUploadedPhoto represents ctor inputChatUploadedPhoto#927c55b4 file:InputFile = InputChatPhoto from Telegram
type TLInputChatUploadedPhoto struct {
	File TLInputFileType // file:InputFile
}

func (o *TLInputChatUploadedPhoto) IsTLInputChatPhoto() {}

func (o *TLInputChatUploadedPhoto) Cmd() uint32 {
	return TagInputChatUploadedPhoto
}

func (o *TLInputChatUploadedPhoto) ReadBareFrom(r *tl.Reader) {
	o.File = Schema.ReadLimitedBoxedObjectFrom(r, TagInputFile, TagInputFileBig).(TLInputFileType)
}

func (o *TLInputChatUploadedPhoto) WriteBareTo(w *tl.Writer) {
	w.WriteCmd(o.File.Cmd())
	o.File.WriteBareTo(w)
}

func (o *TLInputChatUploadedPhoto) String() string {
	return tl.Pretty(o)
}

// TLInputChatPhoto represents ctor inputChatPhoto#8953ad37 id:InputPhoto = InputChatPhoto from Telegram
type TLInputChatPhoto struct {
	ID TLInputPhotoType // id:InputPhoto
}

func (o *TLInputChatPhoto) IsTLInputChatPhoto() {}

func (o *TLInputChatPhoto) Cmd() uint32 {
	return TagInputChatPhoto
}

func (o *TLInputChatPhoto) ReadBareFrom(r *tl.Reader) {
	o.ID = Schema.ReadLimitedBoxedObjectFrom(r, TagInputPhotoEmpty, TagInputPhoto).(TLInputPhotoType)
}

func (o *TLInputChatPhoto) WriteBareTo(w *tl.Writer) {
	w.WriteCmd(o.ID.Cmd())
	o.ID.WriteBareTo(w)
}

func (o *TLInputChatPhoto) String() string {
	return tl.Pretty(o)
}

// TLInputGeoPointEmpty represents ctor inputGeoPointEmpty#e4c123d6 = InputGeoPoint from Telegram
type TLInputGeoPointEmpty struct {
}

func (o *TLInputGeoPointEmpty) IsTLInputGeoPoint() {}

func (o *TLInputGeoPointEmpty) Cmd() uint32 {
	return TagInputGeoPointEmpty
}

func (o *TLInputGeoPointEmpty) ReadBareFrom(r *tl.Reader) {
}

func (o *TLInputGeoPointEmpty) WriteBareTo(w *tl.Writer) {
}

func (o *TLInputGeoPointEmpty) String() string {
	return tl.Pretty(o)
}

// TLInputGeoPoint represents ctor inputGeoPoint#f3b7acc9 lat:double long:double = InputGeoPoint from Telegram
type TLInputGeoPoint struct {
	Lat  float64 // lat:double
	Long float64 // long:double
}

func (o *TLInputGeoPoint) IsTLInputGeoPoint() {}

func (o *TLInputGeoPoint) Cmd() uint32 {
	return TagInputGeoPoint
}

func (o *TLInputGeoPoint) ReadBareFrom(r *tl.Reader) {
	o.Lat = r.ReadFloat64()
	o.Long = r.ReadFloat64()
}

func (o *TLInputGeoPoint) WriteBareTo(w *tl.Writer) {
	w.WriteFloat64(o.Lat)
	w.WriteFloat64(o.Long)
}

func (o *TLInputGeoPoint) String() string {
	return tl.Pretty(o)
}

// TLInputPhotoEmpty represents ctor inputPhotoEmpty#1cd7bf0d = InputPhoto from Telegram
type TLInputPhotoEmpty struct {
}

func (o *TLInputPhotoEmpty) IsTLInputPhoto() {}

func (o *TLInputPhotoEmpty) Cmd() uint32 {
	return TagInputPhotoEmpty
}

func (o *TLInputPhotoEmpty) ReadBareFrom(r *tl.Reader) {
}

func (o *TLInputPhotoEmpty) WriteBareTo(w *tl.Writer) {
}

func (o *TLInputPhotoEmpty) String() string {
	return tl.Pretty(o)
}

// TLInputPhoto represents ctor inputPhoto#fb95c6c4 id:long access_hash:long = InputPhoto from Telegram
type TLInputPhoto struct {
	ID         uint64 // id:long
	AccessHash uint64 // access_hash:long
}

func (o *TLInputPhoto) IsTLInputPhoto() {}

func (o *TLInputPhoto) Cmd() uint32 {
	return TagInputPhoto
}

func (o *TLInputPhoto) ReadBareFrom(r *tl.Reader) {
	o.ID = r.ReadUint64()
	o.AccessHash = r.ReadUint64()
}

func (o *TLInputPhoto) WriteBareTo(w *tl.Writer) {
	w.WriteUint64(o.ID)
	w.WriteUint64(o.AccessHash)
}

func (o *TLInputPhoto) String() string {
	return tl.Pretty(o)
}

// TLInputFileLocation represents ctor inputFileLocation#14637196 volume_id:long local_id:int secret:long = InputFileLocation from Telegram
type TLInputFileLocation struct {
	VolumeID uint64 // volume_id:long
	LocalID  int    // local_id:int
	Secret   uint64 // secret:long
}

func (o *TLInputFileLocation) IsTLInputFileLocation() {}

func (o *TLInputFileLocation) Cmd() uint32 {
	return TagInputFileLocation
}

func (o *TLInputFileLocation) ReadBareFrom(r *tl.Reader) {
	o.VolumeID = r.ReadUint64()
	o.LocalID = r.ReadInt()
	o.Secret = r.ReadUint64()
}

func (o *TLInputFileLocation) WriteBareTo(w *tl.Writer) {
	w.WriteUint64(o.VolumeID)
	w.WriteInt(o.LocalID)
	w.WriteUint64(o.Secret)
}

func (o *TLInputFileLocation) String() string {
	return tl.Pretty(o)
}

// TLInputEncryptedFileLocation represents ctor inputEncryptedFileLocation#f5235d55 id:long access_hash:long = InputFileLocation from Telegram
type TLInputEncryptedFileLocation struct {
	ID         uint64 // id:long
	AccessHash uint64 // access_hash:long
}

func (o *TLInputEncryptedFileLocation) IsTLInputFileLocation() {}

func (o *TLInputEncryptedFileLocation) Cmd() uint32 {
	return TagInputEncryptedFileLocation
}

func (o *TLInputEncryptedFileLocation) ReadBareFrom(r *tl.Reader) {
	o.ID = r.ReadUint64()
	o.AccessHash = r.ReadUint64()
}

func (o *TLInputEncryptedFileLocation) WriteBareTo(w *tl.Writer) {
	w.WriteUint64(o.ID)
	w.WriteUint64(o.AccessHash)
}

func (o *TLInputEncryptedFileLocation) String() string {
	return tl.Pretty(o)
}

// TLInputDocumentFileLocation represents ctor inputDocumentFileLocation#430f0724 id:long access_hash:long version:int = InputFileLocation from Telegram
type TLInputDocumentFileLocation struct {
	ID         uint64 // id:long
	AccessHash uint64 // access_hash:long
	Version    int    // version:int
}

func (o *TLInputDocumentFileLocation) IsTLInputFileLocation() {}

func (o *TLInputDocumentFileLocation) Cmd() uint32 {
	return TagInputDocumentFileLocation
}

func (o *TLInputDocumentFileLocation) ReadBareFrom(r *tl.Reader) {
	o.ID = r.ReadUint64()
	o.AccessHash = r.ReadUint64()
	o.Version = r.ReadInt()
}

func (o *TLInputDocumentFileLocation) WriteBareTo(w *tl.Writer) {
	w.WriteUint64(o.ID)
	w.WriteUint64(o.AccessHash)
	w.WriteInt(o.Version)
}

func (o *TLInputDocumentFileLocation) String() string {
	return tl.Pretty(o)
}

// TLPeerUser represents ctor peerUser#9db1bc6d user_id:int = Peer from Telegram
type TLPeerUser struct {
	UserID int // user_id:int
}

func (o *TLPeerUser) IsTLPeer() {}

func (o *TLPeerUser) Cmd() uint32 {
	return TagPeerUser
}

func (o *TLPeerUser) ReadBareFrom(r *tl.Reader) {
	o.UserID = r.ReadInt()
}

func (o *TLPeerUser) WriteBareTo(w *tl.Writer) {
	w.WriteInt(o.UserID)
}

func (o *TLPeerUser) String() string {
	return tl.Pretty(o)
}

// TLPeerChat represents ctor peerChat#bad0e5bb chat_id:int = Peer from Telegram
type TLPeerChat struct {
	ChatID int // chat_id:int
}

func (o *TLPeerChat) IsTLPeer() {}

func (o *TLPeerChat) Cmd() uint32 {
	return TagPeerChat
}

func (o *TLPeerChat) ReadBareFrom(r *tl.Reader) {
	o.ChatID = r.ReadInt()
}

func (o *TLPeerChat) WriteBareTo(w *tl.Writer) {
	w.WriteInt(o.ChatID)
}

func (o *TLPeerChat) String() string {
	return tl.Pretty(o)
}

// TLPeerChannel represents ctor peerChannel#bddde532 channel_id:int = Peer from Telegram
type TLPeerChannel struct {
	ChannelID int // channel_id:int
}

func (o *TLPeerChannel) IsTLPeer() {}

func (o *TLPeerChannel) Cmd() uint32 {
	return TagPeerChannel
}

func (o *TLPeerChannel) ReadBareFrom(r *tl.Reader) {
	o.ChannelID = r.ReadInt()
}

func (o *TLPeerChannel) WriteBareTo(w *tl.Writer) {
	w.WriteInt(o.ChannelID)
}

func (o *TLPeerChannel) String() string {
	return tl.Pretty(o)
}

// TLStorageFileUnknown represents ctor storage.fileUnknown#aa963b05 = storage.FileType from Telegram
type TLStorageFileUnknown struct {
}

func (o *TLStorageFileUnknown) IsTLStorageFileType() {}

func (o *TLStorageFileUnknown) Cmd() uint32 {
	return TagStorageFileUnknown
}

func (o *TLStorageFileUnknown) ReadBareFrom(r *tl.Reader) {
}

func (o *TLStorageFileUnknown) WriteBareTo(w *tl.Writer) {
}

func (o *TLStorageFileUnknown) String() string {
	return tl.Pretty(o)
}

// TLStorageFilePartial represents ctor storage.filePartial#40bc6f52 = storage.FileType from Telegram
type TLStorageFilePartial struct {
}

func (o *TLStorageFilePartial) IsTLStorageFileType() {}

func (o *TLStorageFilePartial) Cmd() uint32 {
	return TagStorageFilePartial
}

func (o *TLStorageFilePartial) ReadBareFrom(r *tl.Reader) {
}

func (o *TLStorageFilePartial) WriteBareTo(w *tl.Writer) {
}

func (o *TLStorageFilePartial) String() string {
	return tl.Pretty(o)
}

// TLStorageFileJpeg represents ctor storage.fileJpeg#007efe0e = storage.FileType from Telegram
type TLStorageFileJpeg struct {
}

func (o *TLStorageFileJpeg) IsTLStorageFileType() {}

func (o *TLStorageFileJpeg) Cmd() uint32 {
	return TagStorageFileJpeg
}

func (o *TLStorageFileJpeg) ReadBareFrom(r *tl.Reader) {
}

func (o *TLStorageFileJpeg) WriteBareTo(w *tl.Writer) {
}

func (o *TLStorageFileJpeg) String() string {
	return tl.Pretty(o)
}

// TLStorageFileGif represents ctor storage.fileGif#cae1aadf = storage.FileType from Telegram
type TLStorageFileGif struct {
}

func (o *TLStorageFileGif) IsTLStorageFileType() {}

func (o *TLStorageFileGif) Cmd() uint32 {
	return TagStorageFileGif
}

func (o *TLStorageFileGif) ReadBareFrom(r *tl.Reader) {
}

func (o *TLStorageFileGif) WriteBareTo(w *tl.Writer) {
}

func (o *TLStorageFileGif) String() string {
	return tl.Pretty(o)
}

// TLStorageFilePng represents ctor storage.filePng#0a4f63c0 = storage.FileType from Telegram
type TLStorageFilePng struct {
}

func (o *TLStorageFilePng) IsTLStorageFileType() {}

func (o *TLStorageFilePng) Cmd() uint32 {
	return TagStorageFilePng
}

func (o *TLStorageFilePng) ReadBareFrom(r *tl.Reader) {
}

func (o *TLStorageFilePng) WriteBareTo(w *tl.Writer) {
}

func (o *TLStorageFilePng) String() string {
	return tl.Pretty(o)
}

// TLStorageFilePdf represents ctor storage.filePdf#ae1e508d = storage.FileType from Telegram
type TLStorageFilePdf struct {
}

func (o *TLStorageFilePdf) IsTLStorageFileType() {}

func (o *TLStorageFilePdf) Cmd() uint32 {
	return TagStorageFilePdf
}

func (o *TLStorageFilePdf) ReadBareFrom(r *tl.Reader) {
}

func (o *TLStorageFilePdf) WriteBareTo(w *tl.Writer) {
}

func (o *TLStorageFilePdf) String() string {
	return tl.Pretty(o)
}

// TLStorageFileMp3 represents ctor storage.fileMp3#528a0677 = storage.FileType from Telegram
type TLStorageFileMp3 struct {
}

func (o *TLStorageFileMp3) IsTLStorageFileType() {}

func (o *TLStorageFileMp3) Cmd() uint32 {
	return TagStorageFileMp3
}

func (o *TLStorageFileMp3) ReadBareFrom(r *tl.Reader) {
}

func (o *TLStorageFileMp3) WriteBareTo(w *tl.Writer) {
}

func (o *TLStorageFileMp3) String() string {
	return tl.Pretty(o)
}

// TLStorageFileMov represents ctor storage.fileMov#4b09ebbc = storage.FileType from Telegram
type TLStorageFileMov struct {
}

func (o *TLStorageFileMov) IsTLStorageFileType() {}

func (o *TLStorageFileMov) Cmd() uint32 {
	return TagStorageFileMov
}

func (o *TLStorageFileMov) ReadBareFrom(r *tl.Reader) {
}

func (o *TLStorageFileMov) WriteBareTo(w *tl.Writer) {
}

func (o *TLStorageFileMov) String() string {
	return tl.Pretty(o)
}

// TLStorageFileMp4 represents ctor storage.fileMp4#b3cea0e4 = storage.FileType from Telegram
type TLStorageFileMp4 struct {
}

func (o *TLStorageFileMp4) IsTLStorageFileType() {}

func (o *TLStorageFileMp4) Cmd() uint32 {
	return TagStorageFileMp4
}

func (o *TLStorageFileMp4) ReadBareFrom(r *tl.Reader) {
}

func (o *TLStorageFileMp4) WriteBareTo(w *tl.Writer) {
}

func (o *TLStorageFileMp4) String() string {
	return tl.Pretty(o)
}

// TLStorageFileWebp represents ctor storage.fileWebp#1081464c = storage.FileType from Telegram
type TLStorageFileWebp struct {
}

func (o *TLStorageFileWebp) IsTLStorageFileType() {}

func (o *TLStorageFileWebp) Cmd() uint32 {
	return TagStorageFileWebp
}

func (o *TLStorageFileWebp) ReadBareFrom(r *tl.Reader) {
}

func (o *TLStorageFileWebp) WriteBareTo(w *tl.Writer) {
}

func (o *TLStorageFileWebp) String() string {
	return tl.Pretty(o)
}

// TLFileLocationUnavailable represents ctor fileLocationUnavailable#7c596b46 volume_id:long local_id:int secret:long = FileLocation from Telegram
type TLFileLocationUnavailable struct {
	VolumeID uint64 // volume_id:long
	LocalID  int    // local_id:int
	Secret   uint64 // secret:long
}

func (o *TLFileLocationUnavailable) IsTLFileLocation() {}

func (o *TLFileLocationUnavailable) Cmd() uint32 {
	return TagFileLocationUnavailable
}

func (o *TLFileLocationUnavailable) ReadBareFrom(r *tl.Reader) {
	o.VolumeID = r.ReadUint64()
	o.LocalID = r.ReadInt()
	o.Secret = r.ReadUint64()
}

func (o *TLFileLocationUnavailable) WriteBareTo(w *tl.Writer) {
	w.WriteUint64(o.VolumeID)
	w.WriteInt(o.LocalID)
	w.WriteUint64(o.Secret)
}

func (o *TLFileLocationUnavailable) String() string {
	return tl.Pretty(o)
}

// TLFileLocation represents ctor fileLocation#53d69076 dc_id:int volume_id:long local_id:int secret:long = FileLocation from Telegram
type TLFileLocation struct {
	DCID     int    // dc_id:int
	VolumeID uint64 // volume_id:long
	LocalID  int    // local_id:int
	Secret   uint64 // secret:long
}

func (o *TLFileLocation) IsTLFileLocation() {}

func (o *TLFileLocation) Cmd() uint32 {
	return TagFileLocation
}

func (o *TLFileLocation) ReadBareFrom(r *tl.Reader) {
	o.DCID = r.ReadInt()
	o.VolumeID = r.ReadUint64()
	o.LocalID = r.ReadInt()
	o.Secret = r.ReadUint64()
}

func (o *TLFileLocation) WriteBareTo(w *tl.Writer) {
	w.WriteInt(o.DCID)
	w.WriteUint64(o.VolumeID)
	w.WriteInt(o.LocalID)
	w.WriteUint64(o.Secret)
}

func (o *TLFileLocation) String() string {
	return tl.Pretty(o)
}

// TLUserEmpty represents ctor userEmpty#200250ba id:int = User from Telegram
type TLUserEmpty struct {
	ID int // id:int
}

func (o *TLUserEmpty) IsTLUser() {}

func (o *TLUserEmpty) Cmd() uint32 {
	return TagUserEmpty
}

func (o *TLUserEmpty) ReadBareFrom(r *tl.Reader) {
	o.ID = r.ReadInt()
}

func (o *TLUserEmpty) WriteBareTo(w *tl.Writer) {
	w.WriteInt(o.ID)
}

func (o *TLUserEmpty) String() string {
	return tl.Pretty(o)
}

// TLUser represents ctor user#d10d979a flags:# flags.10?self:true flags.11?contact:true flags.12?mutual_contact:true flags.13?deleted:true flags.14?bot:true flags.15?bot_chat_history:true flags.16?bot_nochats:true flags.17?verified:true flags.18?restricted:true flags.20?min:true flags.21?bot_inline_geo:true id:int flags.0?access_hash:long flags.1?first_name:string flags.2?last_name:string flags.3?username:string flags.4?phone:string flags.5?photo:UserProfilePhoto flags.6?status:UserStatus flags.14?bot_info_version:int flags.18?restriction_reason:string flags.19?bot_inline_placeholder:string = User from Telegram
type TLUser struct {
	Flags                uint                   // flags:#
	Self                 bool                   // flags.10?self:true
	Contact              bool                   // flags.11?contact:true
	MutualContact        bool                   // flags.12?mutual_contact:true
	Deleted              bool                   // flags.13?deleted:true
	Bot                  bool                   // flags.14?bot:true
	BotChatHistory       bool                   // flags.15?bot_chat_history:true
	BotNochats           bool                   // flags.16?bot_nochats:true
	Verified             bool                   // flags.17?verified:true
	Restricted           bool                   // flags.18?restricted:true
	Min                  bool                   // flags.20?min:true
	BotInlineGeo         bool                   // flags.21?bot_inline_geo:true
	ID                   int                    // id:int
	AccessHash           uint64                 // flags.0?access_hash:long
	FirstName            string                 // flags.1?first_name:string
	LastName             string                 // flags.2?last_name:string
	Username             string                 // flags.3?username:string
	Phone                string                 // flags.4?phone:string
	Photo                TLUserProfilePhotoType // flags.5?photo:UserProfilePhoto
	Status               TLUserStatusType       // flags.6?status:UserStatus
	BotInfoVersion       int                    // flags.14?bot_info_version:int
	RestrictionReason    string                 // flags.18?restriction_reason:string
	BotInlinePlaceholder string                 // flags.19?bot_inline_placeholder:string
}

func (o *TLUser) IsTLUser() {}

func (o *TLUser) Cmd() uint32 {
	return TagUser
}

func (o *TLUser) ReadBareFrom(r *tl.Reader) {
	o.Flags = uint(r.ReadUint32())
	o.Self = true
	o.Contact = true
	o.MutualContact = true
	o.Deleted = true
	o.Bot = true
	o.BotChatHistory = true
	o.BotNochats = true
	o.Verified = true
	o.Restricted = true
	o.Min = true
	o.BotInlineGeo = true
	o.ID = r.ReadInt()
	o.AccessHash = r.ReadUint64()
	o.FirstName = r.ReadString()
	o.LastName = r.ReadString()
	o.Username = r.ReadString()
	o.Phone = r.ReadString()
	o.Photo = Schema.ReadLimitedBoxedObjectFrom(r, TagUserProfilePhotoEmpty, TagUserProfilePhoto).(TLUserProfilePhotoType)
	o.Status = Schema.ReadLimitedBoxedObjectFrom(r, TagUserStatusEmpty, TagUserStatusOnline, TagUserStatusOffline, TagUserStatusRecently, TagUserStatusLastWeek, TagUserStatusLastMonth).(TLUserStatusType)
	o.BotInfoVersion = r.ReadInt()
	o.RestrictionReason = r.ReadString()
	o.BotInlinePlaceholder = r.ReadString()
}

func (o *TLUser) WriteBareTo(w *tl.Writer) {
	w.WriteUint32(uint32(o.Flags))
	w.WriteInt(o.ID)
	w.WriteUint64(o.AccessHash)
	w.WriteString(o.FirstName)
	w.WriteString(o.LastName)
	w.WriteString(o.Username)
	w.WriteString(o.Phone)
	w.WriteCmd(o.Photo.Cmd())
	o.Photo.WriteBareTo(w)
	w.WriteCmd(o.Status.Cmd())
	o.Status.WriteBareTo(w)
	w.WriteInt(o.BotInfoVersion)
	w.WriteString(o.RestrictionReason)
	w.WriteString(o.BotInlinePlaceholder)
}

func (o *TLUser) String() string {
	return tl.Pretty(o)
}

// TLUserProfilePhotoEmpty represents ctor userProfilePhotoEmpty#4f11bae1 = UserProfilePhoto from Telegram
type TLUserProfilePhotoEmpty struct {
}

func (o *TLUserProfilePhotoEmpty) IsTLUserProfilePhoto() {}

func (o *TLUserProfilePhotoEmpty) Cmd() uint32 {
	return TagUserProfilePhotoEmpty
}

func (o *TLUserProfilePhotoEmpty) ReadBareFrom(r *tl.Reader) {
}

func (o *TLUserProfilePhotoEmpty) WriteBareTo(w *tl.Writer) {
}

func (o *TLUserProfilePhotoEmpty) String() string {
	return tl.Pretty(o)
}

// TLUserProfilePhoto represents ctor userProfilePhoto#d559d8c8 photo_id:long photo_small:FileLocation photo_big:FileLocation = UserProfilePhoto from Telegram
type TLUserProfilePhoto struct {
	PhotoID    uint64             // photo_id:long
	PhotoSmall TLFileLocationType // photo_small:FileLocation
	PhotoBig   TLFileLocationType // photo_big:FileLocation
}

func (o *TLUserProfilePhoto) IsTLUserProfilePhoto() {}

func (o *TLUserProfilePhoto) Cmd() uint32 {
	return TagUserProfilePhoto
}

func (o *TLUserProfilePhoto) ReadBareFrom(r *tl.Reader) {
	o.PhotoID = r.ReadUint64()
	o.PhotoSmall = Schema.ReadLimitedBoxedObjectFrom(r, TagFileLocationUnavailable, TagFileLocation).(TLFileLocationType)
	o.PhotoBig = Schema.ReadLimitedBoxedObjectFrom(r, TagFileLocationUnavailable, TagFileLocation).(TLFileLocationType)
}

func (o *TLUserProfilePhoto) WriteBareTo(w *tl.Writer) {
	w.WriteUint64(o.PhotoID)
	w.WriteCmd(o.PhotoSmall.Cmd())
	o.PhotoSmall.WriteBareTo(w)
	w.WriteCmd(o.PhotoBig.Cmd())
	o.PhotoBig.WriteBareTo(w)
}

func (o *TLUserProfilePhoto) String() string {
	return tl.Pretty(o)
}

// TLUserStatusEmpty represents ctor userStatusEmpty#09d05049 = UserStatus from Telegram
type TLUserStatusEmpty struct {
}

func (o *TLUserStatusEmpty) IsTLUserStatus() {}

func (o *TLUserStatusEmpty) Cmd() uint32 {
	return TagUserStatusEmpty
}

func (o *TLUserStatusEmpty) ReadBareFrom(r *tl.Reader) {
}

func (o *TLUserStatusEmpty) WriteBareTo(w *tl.Writer) {
}

func (o *TLUserStatusEmpty) String() string {
	return tl.Pretty(o)
}

// TLUserStatusOnline represents ctor userStatusOnline#edb93949 expires:int = UserStatus from Telegram
type TLUserStatusOnline struct {
	Expires int // expires:int
}

func (o *TLUserStatusOnline) IsTLUserStatus() {}

func (o *TLUserStatusOnline) Cmd() uint32 {
	return TagUserStatusOnline
}

func (o *TLUserStatusOnline) ReadBareFrom(r *tl.Reader) {
	o.Expires = r.ReadInt()
}

func (o *TLUserStatusOnline) WriteBareTo(w *tl.Writer) {
	w.WriteInt(o.Expires)
}

func (o *TLUserStatusOnline) String() string {
	return tl.Pretty(o)
}

// TLUserStatusOffline represents ctor userStatusOffline#008c703f was_online:int = UserStatus from Telegram
type TLUserStatusOffline struct {
	WasOnline int // was_online:int
}

func (o *TLUserStatusOffline) IsTLUserStatus() {}

func (o *TLUserStatusOffline) Cmd() uint32 {
	return TagUserStatusOffline
}

func (o *TLUserStatusOffline) ReadBareFrom(r *tl.Reader) {
	o.WasOnline = r.ReadInt()
}

func (o *TLUserStatusOffline) WriteBareTo(w *tl.Writer) {
	w.WriteInt(o.WasOnline)
}

func (o *TLUserStatusOffline) String() string {
	return tl.Pretty(o)
}

// TLUserStatusRecently represents ctor userStatusRecently#e26f42f1 = UserStatus from Telegram
type TLUserStatusRecently struct {
}

func (o *TLUserStatusRecently) IsTLUserStatus() {}

func (o *TLUserStatusRecently) Cmd() uint32 {
	return TagUserStatusRecently
}

func (o *TLUserStatusRecently) ReadBareFrom(r *tl.Reader) {
}

func (o *TLUserStatusRecently) WriteBareTo(w *tl.Writer) {
}

func (o *TLUserStatusRecently) String() string {
	return tl.Pretty(o)
}

// TLUserStatusLastWeek represents ctor userStatusLastWeek#07bf09fc = UserStatus from Telegram
type TLUserStatusLastWeek struct {
}

func (o *TLUserStatusLastWeek) IsTLUserStatus() {}

func (o *TLUserStatusLastWeek) Cmd() uint32 {
	return TagUserStatusLastWeek
}

func (o *TLUserStatusLastWeek) ReadBareFrom(r *tl.Reader) {
}

func (o *TLUserStatusLastWeek) WriteBareTo(w *tl.Writer) {
}

func (o *TLUserStatusLastWeek) String() string {
	return tl.Pretty(o)
}

// TLUserStatusLastMonth represents ctor userStatusLastMonth#77ebc742 = UserStatus from Telegram
type TLUserStatusLastMonth struct {
}

func (o *TLUserStatusLastMonth) IsTLUserStatus() {}

func (o *TLUserStatusLastMonth) Cmd() uint32 {
	return TagUserStatusLastMonth
}

func (o *TLUserStatusLastMonth) ReadBareFrom(r *tl.Reader) {
}

func (o *TLUserStatusLastMonth) WriteBareTo(w *tl.Writer) {
}

func (o *TLUserStatusLastMonth) String() string {
	return tl.Pretty(o)
}

// TLChatEmpty represents ctor chatEmpty#9ba2d800 id:int = Chat from Telegram
type TLChatEmpty struct {
	ID int // id:int
}

func (o *TLChatEmpty) IsTLChat() {}

func (o *TLChatEmpty) Cmd() uint32 {
	return TagChatEmpty
}

func (o *TLChatEmpty) ReadBareFrom(r *tl.Reader) {
	o.ID = r.ReadInt()
}

func (o *TLChatEmpty) WriteBareTo(w *tl.Writer) {
	w.WriteInt(o.ID)
}

func (o *TLChatEmpty) String() string {
	return tl.Pretty(o)
}

// TLChat represents ctor chat#d91cdd54 flags:# flags.0?creator:true flags.1?kicked:true flags.2?left:true flags.3?admins_enabled:true flags.4?admin:true flags.5?deactivated:true id:int title:string photo:ChatPhoto participants_count:int date:int version:int flags.6?migrated_to:InputChannel = Chat from Telegram
type TLChat struct {
	Flags             uint               // flags:#
	Creator           bool               // flags.0?creator:true
	Kicked            bool               // flags.1?kicked:true
	Left              bool               // flags.2?left:true
	AdminsEnabled     bool               // flags.3?admins_enabled:true
	Admin             bool               // flags.4?admin:true
	Deactivated       bool               // flags.5?deactivated:true
	ID                int                // id:int
	Title             string             // title:string
	Photo             TLChatPhotoType    // photo:ChatPhoto
	ParticipantsCount int                // participants_count:int
	Date              int                // date:int
	Version           int                // version:int
	MigratedTo        TLInputChannelType // flags.6?migrated_to:InputChannel
}

func (o *TLChat) IsTLChat() {}

func (o *TLChat) Cmd() uint32 {
	return TagChat
}

func (o *TLChat) ReadBareFrom(r *tl.Reader) {
	o.Flags = uint(r.ReadUint32())
	o.Creator = true
	o.Kicked = true
	o.Left = true
	o.AdminsEnabled = true
	o.Admin = true
	o.Deactivated = true
	o.ID = r.ReadInt()
	o.Title = r.ReadString()
	o.Photo = Schema.ReadLimitedBoxedObjectFrom(r, TagChatPhotoEmpty, TagChatPhoto).(TLChatPhotoType)
	o.ParticipantsCount = r.ReadInt()
	o.Date = r.ReadInt()
	o.Version = r.ReadInt()
	o.MigratedTo = Schema.ReadLimitedBoxedObjectFrom(r, TagInputChannelEmpty, TagInputChannel).(TLInputChannelType)
}

func (o *TLChat) WriteBareTo(w *tl.Writer) {
	w.WriteUint32(uint32(o.Flags))
	w.WriteInt(o.ID)
	w.WriteString(o.Title)
	w.WriteCmd(o.Photo.Cmd())
	o.Photo.WriteBareTo(w)
	w.WriteInt(o.ParticipantsCount)
	w.WriteInt(o.Date)
	w.WriteInt(o.Version)
	w.WriteCmd(o.MigratedTo.Cmd())
	o.MigratedTo.WriteBareTo(w)
}

func (o *TLChat) String() string {
	return tl.Pretty(o)
}

// TLChatForbidden represents ctor chatForbidden#07328bdb id:int title:string = Chat from Telegram
type TLChatForbidden struct {
	ID    int    // id:int
	Title string // title:string
}

func (o *TLChatForbidden) IsTLChat() {}

func (o *TLChatForbidden) Cmd() uint32 {
	return TagChatForbidden
}

func (o *TLChatForbidden) ReadBareFrom(r *tl.Reader) {
	o.ID = r.ReadInt()
	o.Title = r.ReadString()
}

func (o *TLChatForbidden) WriteBareTo(w *tl.Writer) {
	w.WriteInt(o.ID)
	w.WriteString(o.Title)
}

func (o *TLChatForbidden) String() string {
	return tl.Pretty(o)
}

// TLChannel represents ctor channel#a14dca52 flags:# flags.0?creator:true flags.1?kicked:true flags.2?left:true flags.3?editor:true flags.4?moderator:true flags.5?broadcast:true flags.7?verified:true flags.8?megagroup:true flags.9?restricted:true flags.10?democracy:true flags.11?signatures:true flags.12?min:true id:int flags.13?access_hash:long title:string flags.6?username:string photo:ChatPhoto date:int version:int flags.9?restriction_reason:string = Chat from Telegram
type TLChannel struct {
	Flags             uint            // flags:#
	Creator           bool            // flags.0?creator:true
	Kicked            bool            // flags.1?kicked:true
	Left              bool            // flags.2?left:true
	Editor            bool            // flags.3?editor:true
	Moderator         bool            // flags.4?moderator:true
	Broadcast         bool            // flags.5?broadcast:true
	Verified          bool            // flags.7?verified:true
	Megagroup         bool            // flags.8?megagroup:true
	Restricted        bool            // flags.9?restricted:true
	Democracy         bool            // flags.10?democracy:true
	Signatures        bool            // flags.11?signatures:true
	Min               bool            // flags.12?min:true
	ID                int             // id:int
	AccessHash        uint64          // flags.13?access_hash:long
	Title             string          // title:string
	Username          string          // flags.6?username:string
	Photo             TLChatPhotoType // photo:ChatPhoto
	Date              int             // date:int
	Version           int             // version:int
	RestrictionReason string          // flags.9?restriction_reason:string
}

func (o *TLChannel) IsTLChat() {}

func (o *TLChannel) Cmd() uint32 {
	return TagChannel
}

func (o *TLChannel) ReadBareFrom(r *tl.Reader) {
	o.Flags = uint(r.ReadUint32())
	o.Creator = true
	o.Kicked = true
	o.Left = true
	o.Editor = true
	o.Moderator = true
	o.Broadcast = true
	o.Verified = true
	o.Megagroup = true
	o.Restricted = true
	o.Democracy = true
	o.Signatures = true
	o.Min = true
	o.ID = r.ReadInt()
	o.AccessHash = r.ReadUint64()
	o.Title = r.ReadString()
	o.Username = r.ReadString()
	o.Photo = Schema.ReadLimitedBoxedObjectFrom(r, TagChatPhotoEmpty, TagChatPhoto).(TLChatPhotoType)
	o.Date = r.ReadInt()
	o.Version = r.ReadInt()
	o.RestrictionReason = r.ReadString()
}

func (o *TLChannel) WriteBareTo(w *tl.Writer) {
	w.WriteUint32(uint32(o.Flags))
	w.WriteInt(o.ID)
	w.WriteUint64(o.AccessHash)
	w.WriteString(o.Title)
	w.WriteString(o.Username)
	w.WriteCmd(o.Photo.Cmd())
	o.Photo.WriteBareTo(w)
	w.WriteInt(o.Date)
	w.WriteInt(o.Version)
	w.WriteString(o.RestrictionReason)
}

func (o *TLChannel) String() string {
	return tl.Pretty(o)
}

// TLChannelForbidden represents ctor channelForbidden#8537784f flags:# flags.5?broadcast:true flags.8?megagroup:true id:int access_hash:long title:string = Chat from Telegram
type TLChannelForbidden struct {
	Flags      uint   // flags:#
	Broadcast  bool   // flags.5?broadcast:true
	Megagroup  bool   // flags.8?megagroup:true
	ID         int    // id:int
	AccessHash uint64 // access_hash:long
	Title      string // title:string
}

func (o *TLChannelForbidden) IsTLChat() {}

func (o *TLChannelForbidden) Cmd() uint32 {
	return TagChannelForbidden
}

func (o *TLChannelForbidden) ReadBareFrom(r *tl.Reader) {
	o.Flags = uint(r.ReadUint32())
	o.Broadcast = true
	o.Megagroup = true
	o.ID = r.ReadInt()
	o.AccessHash = r.ReadUint64()
	o.Title = r.ReadString()
}

func (o *TLChannelForbidden) WriteBareTo(w *tl.Writer) {
	w.WriteUint32(uint32(o.Flags))
	w.WriteInt(o.ID)
	w.WriteUint64(o.AccessHash)
	w.WriteString(o.Title)
}

func (o *TLChannelForbidden) String() string {
	return tl.Pretty(o)
}

// TLChatFull represents ctor chatFull#2e02a614 id:int participants:ChatParticipants chat_photo:Photo notify_settings:PeerNotifySettings exported_invite:ExportedChatInvite bot_info:Vector<BotInfo> = ChatFull from Telegram
type TLChatFull struct {
	ID             int                      // id:int
	Participants   TLChatParticipantsType   // participants:ChatParticipants
	ChatPhoto      TLPhotoType              // chat_photo:Photo
	NotifySettings TLPeerNotifySettingsType // notify_settings:PeerNotifySettings
	ExportedInvite TLExportedChatInviteType // exported_invite:ExportedChatInvite
	BotInfo        []*TLBotInfo             // bot_info:Vector<BotInfo>
}

func (o *TLChatFull) IsTLChatFull() {}

func (o *TLChatFull) Cmd() uint32 {
	return TagChatFull
}

func (o *TLChatFull) ReadBareFrom(r *tl.Reader) {
	o.ID = r.ReadInt()
	o.Participants = Schema.ReadLimitedBoxedObjectFrom(r, TagChatParticipantsForbidden, TagChatParticipants).(TLChatParticipantsType)
	o.ChatPhoto = Schema.ReadLimitedBoxedObjectFrom(r, TagPhotoEmpty, TagPhoto).(TLPhotoType)
	o.NotifySettings = Schema.ReadLimitedBoxedObjectFrom(r, TagPeerNotifySettingsEmpty, TagPeerNotifySettings).(TLPeerNotifySettingsType)
	o.ExportedInvite = Schema.ReadLimitedBoxedObjectFrom(r, TagChatInviteEmpty, TagChatInviteExported).(TLExportedChatInviteType)
	if cmd := r.ReadCmd(); cmd != TagVector {
		r.Fail(errors.New("expected: vector"))
	}
	o.BotInfo = make([]*TLBotInfo, r.ReadInt())
	for i := 0; i < len(o.BotInfo); i++ {
		if cmd := r.ReadCmd(); cmd != TagBotInfo {
			r.Fail(errors.New("expected: botInfo"))
		}
		o.BotInfo[i] = new(TLBotInfo)
		o.BotInfo[i].ReadBareFrom(r)
	}
}

func (o *TLChatFull) WriteBareTo(w *tl.Writer) {
	w.WriteInt(o.ID)
	w.WriteCmd(o.Participants.Cmd())
	o.Participants.WriteBareTo(w)
	w.WriteCmd(o.ChatPhoto.Cmd())
	o.ChatPhoto.WriteBareTo(w)
	w.WriteCmd(o.NotifySettings.Cmd())
	o.NotifySettings.WriteBareTo(w)
	w.WriteCmd(o.ExportedInvite.Cmd())
	o.ExportedInvite.WriteBareTo(w)
	w.WriteCmd(TagVector)
	w.WriteInt(len(o.BotInfo))
	for i := 0; i < len(o.BotInfo); i++ {
		w.WriteCmd(TagBotInfo)
		o.BotInfo[i].WriteBareTo(w)
	}
}

func (o *TLChatFull) String() string {
	return tl.Pretty(o)
}

// TLChannelFull represents ctor channelFull#c3d5512f flags:# flags.3?can_view_participants:true flags.6?can_set_username:true id:int about:string flags.0?participants_count:int flags.1?admins_count:int flags.2?kicked_count:int read_inbox_max_id:int read_outbox_max_id:int unread_count:int chat_photo:Photo notify_settings:PeerNotifySettings exported_invite:ExportedChatInvite bot_info:Vector<BotInfo> flags.4?migrated_from_chat_id:int flags.4?migrated_from_max_id:int flags.5?pinned_msg_id:int = ChatFull from Telegram
type TLChannelFull struct {
	Flags               uint                     // flags:#
	CanViewParticipants bool                     // flags.3?can_view_participants:true
	CanSetUsername      bool                     // flags.6?can_set_username:true
	ID                  int                      // id:int
	About               string                   // about:string
	ParticipantsCount   int                      // flags.0?participants_count:int
	AdminsCount         int                      // flags.1?admins_count:int
	KickedCount         int                      // flags.2?kicked_count:int
	ReadInboxMaxID      int                      // read_inbox_max_id:int
	ReadOutboxMaxID     int                      // read_outbox_max_id:int
	UnreadCount         int                      // unread_count:int
	ChatPhoto           TLPhotoType              // chat_photo:Photo
	NotifySettings      TLPeerNotifySettingsType // notify_settings:PeerNotifySettings
	ExportedInvite      TLExportedChatInviteType // exported_invite:ExportedChatInvite
	BotInfo             []*TLBotInfo             // bot_info:Vector<BotInfo>
	MigratedFromChatID  int                      // flags.4?migrated_from_chat_id:int
	MigratedFromMaxID   int                      // flags.4?migrated_from_max_id:int
	PinnedMsgID         int                      // flags.5?pinned_msg_id:int
}

func (o *TLChannelFull) IsTLChatFull() {}

func (o *TLChannelFull) Cmd() uint32 {
	return TagChannelFull
}

func (o *TLChannelFull) ReadBareFrom(r *tl.Reader) {
	o.Flags = uint(r.ReadUint32())
	o.CanViewParticipants = true
	o.CanSetUsername = true
	o.ID = r.ReadInt()
	o.About = r.ReadString()
	o.ParticipantsCount = r.ReadInt()
	o.AdminsCount = r.ReadInt()
	o.KickedCount = r.ReadInt()
	o.ReadInboxMaxID = r.ReadInt()
	o.ReadOutboxMaxID = r.ReadInt()
	o.UnreadCount = r.ReadInt()
	o.ChatPhoto = Schema.ReadLimitedBoxedObjectFrom(r, TagPhotoEmpty, TagPhoto).(TLPhotoType)
	o.NotifySettings = Schema.ReadLimitedBoxedObjectFrom(r, TagPeerNotifySettingsEmpty, TagPeerNotifySettings).(TLPeerNotifySettingsType)
	o.ExportedInvite = Schema.ReadLimitedBoxedObjectFrom(r, TagChatInviteEmpty, TagChatInviteExported).(TLExportedChatInviteType)
	if cmd := r.ReadCmd(); cmd != TagVector {
		r.Fail(errors.New("expected: vector"))
	}
	o.BotInfo = make([]*TLBotInfo, r.ReadInt())
	for i := 0; i < len(o.BotInfo); i++ {
		if cmd := r.ReadCmd(); cmd != TagBotInfo {
			r.Fail(errors.New("expected: botInfo"))
		}
		o.BotInfo[i] = new(TLBotInfo)
		o.BotInfo[i].ReadBareFrom(r)
	}
	o.MigratedFromChatID = r.ReadInt()
	o.MigratedFromMaxID = r.ReadInt()
	o.PinnedMsgID = r.ReadInt()
}

func (o *TLChannelFull) WriteBareTo(w *tl.Writer) {
	w.WriteUint32(uint32(o.Flags))
	w.WriteInt(o.ID)
	w.WriteString(o.About)
	w.WriteInt(o.ParticipantsCount)
	w.WriteInt(o.AdminsCount)
	w.WriteInt(o.KickedCount)
	w.WriteInt(o.ReadInboxMaxID)
	w.WriteInt(o.ReadOutboxMaxID)
	w.WriteInt(o.UnreadCount)
	w.WriteCmd(o.ChatPhoto.Cmd())
	o.ChatPhoto.WriteBareTo(w)
	w.WriteCmd(o.NotifySettings.Cmd())
	o.NotifySettings.WriteBareTo(w)
	w.WriteCmd(o.ExportedInvite.Cmd())
	o.ExportedInvite.WriteBareTo(w)
	w.WriteCmd(TagVector)
	w.WriteInt(len(o.BotInfo))
	for i := 0; i < len(o.BotInfo); i++ {
		w.WriteCmd(TagBotInfo)
		o.BotInfo[i].WriteBareTo(w)
	}
	w.WriteInt(o.MigratedFromChatID)
	w.WriteInt(o.MigratedFromMaxID)
	w.WriteInt(o.PinnedMsgID)
}

func (o *TLChannelFull) String() string {
	return tl.Pretty(o)
}

// TLChatParticipant represents ctor chatParticipant#c8d7493e user_id:int inviter_id:int date:int = ChatParticipant from Telegram
type TLChatParticipant struct {
	UserID    int // user_id:int
	InviterID int // inviter_id:int
	Date      int // date:int
}

func (o *TLChatParticipant) IsTLChatParticipant() {}

func (o *TLChatParticipant) Cmd() uint32 {
	return TagChatParticipant
}

func (o *TLChatParticipant) ReadBareFrom(r *tl.Reader) {
	o.UserID = r.ReadInt()
	o.InviterID = r.ReadInt()
	o.Date = r.ReadInt()
}

func (o *TLChatParticipant) WriteBareTo(w *tl.Writer) {
	w.WriteInt(o.UserID)
	w.WriteInt(o.InviterID)
	w.WriteInt(o.Date)
}

func (o *TLChatParticipant) String() string {
	return tl.Pretty(o)
}

// TLChatParticipantCreator represents ctor chatParticipantCreator#da13538a user_id:int = ChatParticipant from Telegram
type TLChatParticipantCreator struct {
	UserID int // user_id:int
}

func (o *TLChatParticipantCreator) IsTLChatParticipant() {}

func (o *TLChatParticipantCreator) Cmd() uint32 {
	return TagChatParticipantCreator
}

func (o *TLChatParticipantCreator) ReadBareFrom(r *tl.Reader) {
	o.UserID = r.ReadInt()
}

func (o *TLChatParticipantCreator) WriteBareTo(w *tl.Writer) {
	w.WriteInt(o.UserID)
}

func (o *TLChatParticipantCreator) String() string {
	return tl.Pretty(o)
}

// TLChatParticipantAdmin represents ctor chatParticipantAdmin#e2d6e436 user_id:int inviter_id:int date:int = ChatParticipant from Telegram
type TLChatParticipantAdmin struct {
	UserID    int // user_id:int
	InviterID int // inviter_id:int
	Date      int // date:int
}

func (o *TLChatParticipantAdmin) IsTLChatParticipant() {}

func (o *TLChatParticipantAdmin) Cmd() uint32 {
	return TagChatParticipantAdmin
}

func (o *TLChatParticipantAdmin) ReadBareFrom(r *tl.Reader) {
	o.UserID = r.ReadInt()
	o.InviterID = r.ReadInt()
	o.Date = r.ReadInt()
}

func (o *TLChatParticipantAdmin) WriteBareTo(w *tl.Writer) {
	w.WriteInt(o.UserID)
	w.WriteInt(o.InviterID)
	w.WriteInt(o.Date)
}

func (o *TLChatParticipantAdmin) String() string {
	return tl.Pretty(o)
}

// TLChatParticipantsForbidden represents ctor chatParticipantsForbidden#fc900c2b flags:# chat_id:int flags.0?self_participant:ChatParticipant = ChatParticipants from Telegram
type TLChatParticipantsForbidden struct {
	Flags           uint                  // flags:#
	ChatID          int                   // chat_id:int
	SelfParticipant TLChatParticipantType // flags.0?self_participant:ChatParticipant
}

func (o *TLChatParticipantsForbidden) IsTLChatParticipants() {}

func (o *TLChatParticipantsForbidden) Cmd() uint32 {
	return TagChatParticipantsForbidden
}

func (o *TLChatParticipantsForbidden) ReadBareFrom(r *tl.Reader) {
	o.Flags = uint(r.ReadUint32())
	o.ChatID = r.ReadInt()
	o.SelfParticipant = Schema.ReadLimitedBoxedObjectFrom(r, TagChatParticipant, TagChatParticipantCreator, TagChatParticipantAdmin).(TLChatParticipantType)
}

func (o *TLChatParticipantsForbidden) WriteBareTo(w *tl.Writer) {
	w.WriteUint32(uint32(o.Flags))
	w.WriteInt(o.ChatID)
	w.WriteCmd(o.SelfParticipant.Cmd())
	o.SelfParticipant.WriteBareTo(w)
}

func (o *TLChatParticipantsForbidden) String() string {
	return tl.Pretty(o)
}

// TLChatParticipants represents ctor chatParticipants#3f460fed chat_id:int participants:Vector<ChatParticipant> version:int = ChatParticipants from Telegram
type TLChatParticipants struct {
	ChatID       int                     // chat_id:int
	Participants []TLChatParticipantType // participants:Vector<ChatParticipant>
	Version      int                     // version:int
}

func (o *TLChatParticipants) IsTLChatParticipants() {}

func (o *TLChatParticipants) Cmd() uint32 {
	return TagChatParticipants
}

func (o *TLChatParticipants) ReadBareFrom(r *tl.Reader) {
	o.ChatID = r.ReadInt()
	if cmd := r.ReadCmd(); cmd != TagVector {
		r.Fail(errors.New("expected: vector"))
	}
	o.Participants = make([]TLChatParticipantType, r.ReadInt())
	for i := 0; i < len(o.Participants); i++ {
		o.Participants[i] = Schema.ReadLimitedBoxedObjectFrom(r, TagChatParticipant, TagChatParticipantCreator, TagChatParticipantAdmin).(TLChatParticipantType)
	}
	o.Version = r.ReadInt()
}

func (o *TLChatParticipants) WriteBareTo(w *tl.Writer) {
	w.WriteInt(o.ChatID)
	w.WriteCmd(TagVector)
	w.WriteInt(len(o.Participants))
	for i := 0; i < len(o.Participants); i++ {
		w.WriteCmd(o.Participants[i].Cmd())
		o.Participants[i].WriteBareTo(w)
	}
	w.WriteInt(o.Version)
}

func (o *TLChatParticipants) String() string {
	return tl.Pretty(o)
}

// TLChatPhotoEmpty represents ctor chatPhotoEmpty#37c1011c = ChatPhoto from Telegram
type TLChatPhotoEmpty struct {
}

func (o *TLChatPhotoEmpty) IsTLChatPhoto() {}

func (o *TLChatPhotoEmpty) Cmd() uint32 {
	return TagChatPhotoEmpty
}

func (o *TLChatPhotoEmpty) ReadBareFrom(r *tl.Reader) {
}

func (o *TLChatPhotoEmpty) WriteBareTo(w *tl.Writer) {
}

func (o *TLChatPhotoEmpty) String() string {
	return tl.Pretty(o)
}

// TLChatPhoto represents ctor chatPhoto#6153276a photo_small:FileLocation photo_big:FileLocation = ChatPhoto from Telegram
type TLChatPhoto struct {
	PhotoSmall TLFileLocationType // photo_small:FileLocation
	PhotoBig   TLFileLocationType // photo_big:FileLocation
}

func (o *TLChatPhoto) IsTLChatPhoto() {}

func (o *TLChatPhoto) Cmd() uint32 {
	return TagChatPhoto
}

func (o *TLChatPhoto) ReadBareFrom(r *tl.Reader) {
	o.PhotoSmall = Schema.ReadLimitedBoxedObjectFrom(r, TagFileLocationUnavailable, TagFileLocation).(TLFileLocationType)
	o.PhotoBig = Schema.ReadLimitedBoxedObjectFrom(r, TagFileLocationUnavailable, TagFileLocation).(TLFileLocationType)
}

func (o *TLChatPhoto) WriteBareTo(w *tl.Writer) {
	w.WriteCmd(o.PhotoSmall.Cmd())
	o.PhotoSmall.WriteBareTo(w)
	w.WriteCmd(o.PhotoBig.Cmd())
	o.PhotoBig.WriteBareTo(w)
}

func (o *TLChatPhoto) String() string {
	return tl.Pretty(o)
}

// TLMessageMediaEmpty represents ctor messageMediaEmpty#3ded6320 = MessageMedia from Telegram
type TLMessageMediaEmpty struct {
}

func (o *TLMessageMediaEmpty) IsTLMessageMedia() {}

func (o *TLMessageMediaEmpty) Cmd() uint32 {
	return TagMessageMediaEmpty
}

func (o *TLMessageMediaEmpty) ReadBareFrom(r *tl.Reader) {
}

func (o *TLMessageMediaEmpty) WriteBareTo(w *tl.Writer) {
}

func (o *TLMessageMediaEmpty) String() string {
	return tl.Pretty(o)
}

// TLMessageMediaPhoto represents ctor messageMediaPhoto#3d8ce53d photo:Photo caption:string = MessageMedia from Telegram
type TLMessageMediaPhoto struct {
	Photo   TLPhotoType // photo:Photo
	Caption string      // caption:string
}

func (o *TLMessageMediaPhoto) IsTLMessageMedia() {}

func (o *TLMessageMediaPhoto) Cmd() uint32 {
	return TagMessageMediaPhoto
}

func (o *TLMessageMediaPhoto) ReadBareFrom(r *tl.Reader) {
	o.Photo = Schema.ReadLimitedBoxedObjectFrom(r, TagPhotoEmpty, TagPhoto).(TLPhotoType)
	o.Caption = r.ReadString()
}

func (o *TLMessageMediaPhoto) WriteBareTo(w *tl.Writer) {
	w.WriteCmd(o.Photo.Cmd())
	o.Photo.WriteBareTo(w)
	w.WriteString(o.Caption)
}

func (o *TLMessageMediaPhoto) String() string {
	return tl.Pretty(o)
}

// TLMessageMediaGeo represents ctor messageMediaGeo#56e0d474 geo:GeoPoint = MessageMedia from Telegram
type TLMessageMediaGeo struct {
	Geo TLGeoPointType // geo:GeoPoint
}

func (o *TLMessageMediaGeo) IsTLMessageMedia() {}

func (o *TLMessageMediaGeo) Cmd() uint32 {
	return TagMessageMediaGeo
}

func (o *TLMessageMediaGeo) ReadBareFrom(r *tl.Reader) {
	o.Geo = Schema.ReadLimitedBoxedObjectFrom(r, TagGeoPointEmpty, TagGeoPoint).(TLGeoPointType)
}

func (o *TLMessageMediaGeo) WriteBareTo(w *tl.Writer) {
	w.WriteCmd(o.Geo.Cmd())
	o.Geo.WriteBareTo(w)
}

func (o *TLMessageMediaGeo) String() string {
	return tl.Pretty(o)
}

// TLMessageMediaContact represents ctor messageMediaContact#5e7d2f39 phone_number:string first_name:string last_name:string user_id:int = MessageMedia from Telegram
type TLMessageMediaContact struct {
	PhoneNumber string // phone_number:string
	FirstName   string // first_name:string
	LastName    string // last_name:string
	UserID      int    // user_id:int
}

func (o *TLMessageMediaContact) IsTLMessageMedia() {}

func (o *TLMessageMediaContact) Cmd() uint32 {
	return TagMessageMediaContact
}

func (o *TLMessageMediaContact) ReadBareFrom(r *tl.Reader) {
	o.PhoneNumber = r.ReadString()
	o.FirstName = r.ReadString()
	o.LastName = r.ReadString()
	o.UserID = r.ReadInt()
}

func (o *TLMessageMediaContact) WriteBareTo(w *tl.Writer) {
	w.WriteString(o.PhoneNumber)
	w.WriteString(o.FirstName)
	w.WriteString(o.LastName)
	w.WriteInt(o.UserID)
}

func (o *TLMessageMediaContact) String() string {
	return tl.Pretty(o)
}

// TLMessageMediaUnsupported represents ctor messageMediaUnsupported#9f84f49e = MessageMedia from Telegram
type TLMessageMediaUnsupported struct {
}

func (o *TLMessageMediaUnsupported) IsTLMessageMedia() {}

func (o *TLMessageMediaUnsupported) Cmd() uint32 {
	return TagMessageMediaUnsupported
}

func (o *TLMessageMediaUnsupported) ReadBareFrom(r *tl.Reader) {
}

func (o *TLMessageMediaUnsupported) WriteBareTo(w *tl.Writer) {
}

func (o *TLMessageMediaUnsupported) String() string {
	return tl.Pretty(o)
}

// TLMessageMediaDocument represents ctor messageMediaDocument#f3e02ea8 document:Document caption:string = MessageMedia from Telegram
type TLMessageMediaDocument struct {
	Document TLDocumentType // document:Document
	Caption  string         // caption:string
}

func (o *TLMessageMediaDocument) IsTLMessageMedia() {}

func (o *TLMessageMediaDocument) Cmd() uint32 {
	return TagMessageMediaDocument
}

func (o *TLMessageMediaDocument) ReadBareFrom(r *tl.Reader) {
	o.Document = Schema.ReadLimitedBoxedObjectFrom(r, TagDocumentEmpty, TagDocument).(TLDocumentType)
	o.Caption = r.ReadString()
}

func (o *TLMessageMediaDocument) WriteBareTo(w *tl.Writer) {
	w.WriteCmd(o.Document.Cmd())
	o.Document.WriteBareTo(w)
	w.WriteString(o.Caption)
}

func (o *TLMessageMediaDocument) String() string {
	return tl.Pretty(o)
}

// TLMessageMediaWebPage represents ctor messageMediaWebPage#a32dd600 webpage:WebPage = MessageMedia from Telegram
type TLMessageMediaWebPage struct {
	Webpage TLWebPageType // webpage:WebPage
}

func (o *TLMessageMediaWebPage) IsTLMessageMedia() {}

func (o *TLMessageMediaWebPage) Cmd() uint32 {
	return TagMessageMediaWebPage
}

func (o *TLMessageMediaWebPage) ReadBareFrom(r *tl.Reader) {
	o.Webpage = Schema.ReadLimitedBoxedObjectFrom(r, TagWebPageEmpty, TagWebPagePending, TagWebPage, TagWebPageNotModified).(TLWebPageType)
}

func (o *TLMessageMediaWebPage) WriteBareTo(w *tl.Writer) {
	w.WriteCmd(o.Webpage.Cmd())
	o.Webpage.WriteBareTo(w)
}

func (o *TLMessageMediaWebPage) String() string {
	return tl.Pretty(o)
}

// TLMessageMediaVenue represents ctor messageMediaVenue#7912b71f geo:GeoPoint title:string address:string provider:string venue_id:string = MessageMedia from Telegram
type TLMessageMediaVenue struct {
	Geo      TLGeoPointType // geo:GeoPoint
	Title    string         // title:string
	Address  string         // address:string
	Provider string         // provider:string
	VenueID  string         // venue_id:string
}

func (o *TLMessageMediaVenue) IsTLMessageMedia() {}

func (o *TLMessageMediaVenue) Cmd() uint32 {
	return TagMessageMediaVenue
}

func (o *TLMessageMediaVenue) ReadBareFrom(r *tl.Reader) {
	o.Geo = Schema.ReadLimitedBoxedObjectFrom(r, TagGeoPointEmpty, TagGeoPoint).(TLGeoPointType)
	o.Title = r.ReadString()
	o.Address = r.ReadString()
	o.Provider = r.ReadString()
	o.VenueID = r.ReadString()
}

func (o *TLMessageMediaVenue) WriteBareTo(w *tl.Writer) {
	w.WriteCmd(o.Geo.Cmd())
	o.Geo.WriteBareTo(w)
	w.WriteString(o.Title)
	w.WriteString(o.Address)
	w.WriteString(o.Provider)
	w.WriteString(o.VenueID)
}

func (o *TLMessageMediaVenue) String() string {
	return tl.Pretty(o)
}

// TLMessageMediaGame represents ctor messageMediaGame#fdb19008 game:Game = MessageMedia from Telegram
type TLMessageMediaGame struct {
	Game *TLGame // game:Game
}

func (o *TLMessageMediaGame) IsTLMessageMedia() {}

func (o *TLMessageMediaGame) Cmd() uint32 {
	return TagMessageMediaGame
}

func (o *TLMessageMediaGame) ReadBareFrom(r *tl.Reader) {
	if cmd := r.ReadCmd(); cmd != TagGame {
		r.Fail(errors.New("expected: game"))
	}
	o.Game = new(TLGame)
	o.Game.ReadBareFrom(r)
}

func (o *TLMessageMediaGame) WriteBareTo(w *tl.Writer) {
	w.WriteCmd(TagGame)
	o.Game.WriteBareTo(w)
}

func (o *TLMessageMediaGame) String() string {
	return tl.Pretty(o)
}

// TLMessageMediaInvoice represents ctor messageMediaInvoice#84551347 flags:# flags.1?shipping_address_requested:true flags.3?test:true title:string description:string flags.0?photo:WebDocument flags.2?receipt_msg_id:int currency:string total_amount:long start_param:string = MessageMedia from Telegram
type TLMessageMediaInvoice struct {
	Flags                    uint           // flags:#
	ShippingAddressRequested bool           // flags.1?shipping_address_requested:true
	Test                     bool           // flags.3?test:true
	Title                    string         // title:string
	Description              string         // description:string
	Photo                    *TLWebDocument // flags.0?photo:WebDocument
	ReceiptMsgID             int            // flags.2?receipt_msg_id:int
	Currency                 string         // currency:string
	TotalAmount              uint64         // total_amount:long
	StartParam               string         // start_param:string
}

func (o *TLMessageMediaInvoice) IsTLMessageMedia() {}

func (o *TLMessageMediaInvoice) Cmd() uint32 {
	return TagMessageMediaInvoice
}

func (o *TLMessageMediaInvoice) ReadBareFrom(r *tl.Reader) {
	o.Flags = uint(r.ReadUint32())
	o.ShippingAddressRequested = true
	o.Test = true
	o.Title = r.ReadString()
	o.Description = r.ReadString()
	if cmd := r.ReadCmd(); cmd != TagWebDocument {
		r.Fail(errors.New("expected: webDocument"))
	}
	o.Photo = new(TLWebDocument)
	o.Photo.ReadBareFrom(r)
	o.ReceiptMsgID = r.ReadInt()
	o.Currency = r.ReadString()
	o.TotalAmount = r.ReadUint64()
	o.StartParam = r.ReadString()
}

func (o *TLMessageMediaInvoice) WriteBareTo(w *tl.Writer) {
	w.WriteUint32(uint32(o.Flags))
	w.WriteString(o.Title)
	w.WriteString(o.Description)
	w.WriteCmd(TagWebDocument)
	o.Photo.WriteBareTo(w)
	w.WriteInt(o.ReceiptMsgID)
	w.WriteString(o.Currency)
	w.WriteUint64(o.TotalAmount)
	w.WriteString(o.StartParam)
}

func (o *TLMessageMediaInvoice) String() string {
	return tl.Pretty(o)
}

// TLMessageActionEmpty represents ctor messageActionEmpty#b6aef7b0 = MessageAction from Telegram
type TLMessageActionEmpty struct {
}

func (o *TLMessageActionEmpty) IsTLMessageAction() {}

func (o *TLMessageActionEmpty) Cmd() uint32 {
	return TagMessageActionEmpty
}

func (o *TLMessageActionEmpty) ReadBareFrom(r *tl.Reader) {
}

func (o *TLMessageActionEmpty) WriteBareTo(w *tl.Writer) {
}

func (o *TLMessageActionEmpty) String() string {
	return tl.Pretty(o)
}

// TLMessageActionChatCreate represents ctor messageActionChatCreate#a6638b9a title:string users:Vector<int> = MessageAction from Telegram
type TLMessageActionChatCreate struct {
	Title string // title:string
	Users []int  // users:Vector<int>
}

func (o *TLMessageActionChatCreate) IsTLMessageAction() {}

func (o *TLMessageActionChatCreate) Cmd() uint32 {
	return TagMessageActionChatCreate
}

func (o *TLMessageActionChatCreate) ReadBareFrom(r *tl.Reader) {
	o.Title = r.ReadString()
	if cmd := r.ReadCmd(); cmd != TagVector {
		r.Fail(errors.New("expected: vector"))
	}
	o.Users = make([]int, r.ReadInt())
	for i := 0; i < len(o.Users); i++ {
		o.Users[i] = r.ReadInt()
	}
}

func (o *TLMessageActionChatCreate) WriteBareTo(w *tl.Writer) {
	w.WriteString(o.Title)
	w.WriteCmd(TagVector)
	w.WriteInt(len(o.Users))
	for i := 0; i < len(o.Users); i++ {
		w.WriteInt(o.Users[i])
	}
}

func (o *TLMessageActionChatCreate) String() string {
	return tl.Pretty(o)
}

// TLMessageActionChatEditTitle represents ctor messageActionChatEditTitle#b5a1ce5a title:string = MessageAction from Telegram
type TLMessageActionChatEditTitle struct {
	Title string // title:string
}

func (o *TLMessageActionChatEditTitle) IsTLMessageAction() {}

func (o *TLMessageActionChatEditTitle) Cmd() uint32 {
	return TagMessageActionChatEditTitle
}

func (o *TLMessageActionChatEditTitle) ReadBareFrom(r *tl.Reader) {
	o.Title = r.ReadString()
}

func (o *TLMessageActionChatEditTitle) WriteBareTo(w *tl.Writer) {
	w.WriteString(o.Title)
}

func (o *TLMessageActionChatEditTitle) String() string {
	return tl.Pretty(o)
}

// TLMessageActionChatEditPhoto represents ctor messageActionChatEditPhoto#7fcb13a8 photo:Photo = MessageAction from Telegram
type TLMessageActionChatEditPhoto struct {
	Photo TLPhotoType // photo:Photo
}

func (o *TLMessageActionChatEditPhoto) IsTLMessageAction() {}

func (o *TLMessageActionChatEditPhoto) Cmd() uint32 {
	return TagMessageActionChatEditPhoto
}

func (o *TLMessageActionChatEditPhoto) ReadBareFrom(r *tl.Reader) {
	o.Photo = Schema.ReadLimitedBoxedObjectFrom(r, TagPhotoEmpty, TagPhoto).(TLPhotoType)
}

func (o *TLMessageActionChatEditPhoto) WriteBareTo(w *tl.Writer) {
	w.WriteCmd(o.Photo.Cmd())
	o.Photo.WriteBareTo(w)
}

func (o *TLMessageActionChatEditPhoto) String() string {
	return tl.Pretty(o)
}

// TLMessageActionChatDeletePhoto represents ctor messageActionChatDeletePhoto#95e3fbef = MessageAction from Telegram
type TLMessageActionChatDeletePhoto struct {
}

func (o *TLMessageActionChatDeletePhoto) IsTLMessageAction() {}

func (o *TLMessageActionChatDeletePhoto) Cmd() uint32 {
	return TagMessageActionChatDeletePhoto
}

func (o *TLMessageActionChatDeletePhoto) ReadBareFrom(r *tl.Reader) {
}

func (o *TLMessageActionChatDeletePhoto) WriteBareTo(w *tl.Writer) {
}

func (o *TLMessageActionChatDeletePhoto) String() string {
	return tl.Pretty(o)
}

// TLMessageActionChatAddUser represents ctor messageActionChatAddUser#488a7337 users:Vector<int> = MessageAction from Telegram
type TLMessageActionChatAddUser struct {
	Users []int // users:Vector<int>
}

func (o *TLMessageActionChatAddUser) IsTLMessageAction() {}

func (o *TLMessageActionChatAddUser) Cmd() uint32 {
	return TagMessageActionChatAddUser
}

func (o *TLMessageActionChatAddUser) ReadBareFrom(r *tl.Reader) {
	if cmd := r.ReadCmd(); cmd != TagVector {
		r.Fail(errors.New("expected: vector"))
	}
	o.Users = make([]int, r.ReadInt())
	for i := 0; i < len(o.Users); i++ {
		o.Users[i] = r.ReadInt()
	}
}

func (o *TLMessageActionChatAddUser) WriteBareTo(w *tl.Writer) {
	w.WriteCmd(TagVector)
	w.WriteInt(len(o.Users))
	for i := 0; i < len(o.Users); i++ {
		w.WriteInt(o.Users[i])
	}
}

func (o *TLMessageActionChatAddUser) String() string {
	return tl.Pretty(o)
}

// TLMessageActionChatDeleteUser represents ctor messageActionChatDeleteUser#b2ae9b0c user_id:int = MessageAction from Telegram
type TLMessageActionChatDeleteUser struct {
	UserID int // user_id:int
}

func (o *TLMessageActionChatDeleteUser) IsTLMessageAction() {}

func (o *TLMessageActionChatDeleteUser) Cmd() uint32 {
	return TagMessageActionChatDeleteUser
}

func (o *TLMessageActionChatDeleteUser) ReadBareFrom(r *tl.Reader) {
	o.UserID = r.ReadInt()
}

func (o *TLMessageActionChatDeleteUser) WriteBareTo(w *tl.Writer) {
	w.WriteInt(o.UserID)
}

func (o *TLMessageActionChatDeleteUser) String() string {
	return tl.Pretty(o)
}

// TLMessageActionChatJoinedByLink represents ctor messageActionChatJoinedByLink#f89cf5e8 inviter_id:int = MessageAction from Telegram
type TLMessageActionChatJoinedByLink struct {
	InviterID int // inviter_id:int
}

func (o *TLMessageActionChatJoinedByLink) IsTLMessageAction() {}

func (o *TLMessageActionChatJoinedByLink) Cmd() uint32 {
	return TagMessageActionChatJoinedByLink
}

func (o *TLMessageActionChatJoinedByLink) ReadBareFrom(r *tl.Reader) {
	o.InviterID = r.ReadInt()
}

func (o *TLMessageActionChatJoinedByLink) WriteBareTo(w *tl.Writer) {
	w.WriteInt(o.InviterID)
}

func (o *TLMessageActionChatJoinedByLink) String() string {
	return tl.Pretty(o)
}

// TLMessageActionChannelCreate represents ctor messageActionChannelCreate#95d2ac92 title:string = MessageAction from Telegram
type TLMessageActionChannelCreate struct {
	Title string // title:string
}

func (o *TLMessageActionChannelCreate) IsTLMessageAction() {}

func (o *TLMessageActionChannelCreate) Cmd() uint32 {
	return TagMessageActionChannelCreate
}

func (o *TLMessageActionChannelCreate) ReadBareFrom(r *tl.Reader) {
	o.Title = r.ReadString()
}

func (o *TLMessageActionChannelCreate) WriteBareTo(w *tl.Writer) {
	w.WriteString(o.Title)
}

func (o *TLMessageActionChannelCreate) String() string {
	return tl.Pretty(o)
}

// TLMessageActionChatMigrateTo represents ctor messageActionChatMigrateTo#51bdb021 channel_id:int = MessageAction from Telegram
type TLMessageActionChatMigrateTo struct {
	ChannelID int // channel_id:int
}

func (o *TLMessageActionChatMigrateTo) IsTLMessageAction() {}

func (o *TLMessageActionChatMigrateTo) Cmd() uint32 {
	return TagMessageActionChatMigrateTo
}

func (o *TLMessageActionChatMigrateTo) ReadBareFrom(r *tl.Reader) {
	o.ChannelID = r.ReadInt()
}

func (o *TLMessageActionChatMigrateTo) WriteBareTo(w *tl.Writer) {
	w.WriteInt(o.ChannelID)
}

func (o *TLMessageActionChatMigrateTo) String() string {
	return tl.Pretty(o)
}

// TLMessageActionChannelMigrateFrom represents ctor messageActionChannelMigrateFrom#b055eaee title:string chat_id:int = MessageAction from Telegram
type TLMessageActionChannelMigrateFrom struct {
	Title  string // title:string
	ChatID int    // chat_id:int
}

func (o *TLMessageActionChannelMigrateFrom) IsTLMessageAction() {}

func (o *TLMessageActionChannelMigrateFrom) Cmd() uint32 {
	return TagMessageActionChannelMigrateFrom
}

func (o *TLMessageActionChannelMigrateFrom) ReadBareFrom(r *tl.Reader) {
	o.Title = r.ReadString()
	o.ChatID = r.ReadInt()
}

func (o *TLMessageActionChannelMigrateFrom) WriteBareTo(w *tl.Writer) {
	w.WriteString(o.Title)
	w.WriteInt(o.ChatID)
}

func (o *TLMessageActionChannelMigrateFrom) String() string {
	return tl.Pretty(o)
}

// TLMessageActionPinMessage represents ctor messageActionPinMessage#94bd38ed = MessageAction from Telegram
type TLMessageActionPinMessage struct {
}

func (o *TLMessageActionPinMessage) IsTLMessageAction() {}

func (o *TLMessageActionPinMessage) Cmd() uint32 {
	return TagMessageActionPinMessage
}

func (o *TLMessageActionPinMessage) ReadBareFrom(r *tl.Reader) {
}

func (o *TLMessageActionPinMessage) WriteBareTo(w *tl.Writer) {
}

func (o *TLMessageActionPinMessage) String() string {
	return tl.Pretty(o)
}

// TLMessageActionHistoryClear represents ctor messageActionHistoryClear#9fbab604 = MessageAction from Telegram
type TLMessageActionHistoryClear struct {
}

func (o *TLMessageActionHistoryClear) IsTLMessageAction() {}

func (o *TLMessageActionHistoryClear) Cmd() uint32 {
	return TagMessageActionHistoryClear
}

func (o *TLMessageActionHistoryClear) ReadBareFrom(r *tl.Reader) {
}

func (o *TLMessageActionHistoryClear) WriteBareTo(w *tl.Writer) {
}

func (o *TLMessageActionHistoryClear) String() string {
	return tl.Pretty(o)
}

// TLMessageActionGameScore represents ctor messageActionGameScore#92a72876 game_id:long score:int = MessageAction from Telegram
type TLMessageActionGameScore struct {
	GameID uint64 // game_id:long
	Score  int    // score:int
}

func (o *TLMessageActionGameScore) IsTLMessageAction() {}

func (o *TLMessageActionGameScore) Cmd() uint32 {
	return TagMessageActionGameScore
}

func (o *TLMessageActionGameScore) ReadBareFrom(r *tl.Reader) {
	o.GameID = r.ReadUint64()
	o.Score = r.ReadInt()
}

func (o *TLMessageActionGameScore) WriteBareTo(w *tl.Writer) {
	w.WriteUint64(o.GameID)
	w.WriteInt(o.Score)
}

func (o *TLMessageActionGameScore) String() string {
	return tl.Pretty(o)
}

// TLMessageActionPaymentSentMe represents ctor messageActionPaymentSentMe#8f31b327 flags:# currency:string total_amount:long payload:bytes flags.0?info:PaymentRequestedInfo flags.1?shipping_option_id:string charge:PaymentCharge = MessageAction from Telegram
type TLMessageActionPaymentSentMe struct {
	Flags            uint                    // flags:#
	Currency         string                  // currency:string
	TotalAmount      uint64                  // total_amount:long
	Payload          []byte                  // payload:bytes
	Info             *TLPaymentRequestedInfo // flags.0?info:PaymentRequestedInfo
	ShippingOptionID string                  // flags.1?shipping_option_id:string
	Charge           *TLPaymentCharge        // charge:PaymentCharge
}

func (o *TLMessageActionPaymentSentMe) IsTLMessageAction() {}

func (o *TLMessageActionPaymentSentMe) Cmd() uint32 {
	return TagMessageActionPaymentSentMe
}

func (o *TLMessageActionPaymentSentMe) ReadBareFrom(r *tl.Reader) {
	o.Flags = uint(r.ReadUint32())
	o.Currency = r.ReadString()
	o.TotalAmount = r.ReadUint64()
	o.Payload = r.ReadBlob()
	if cmd := r.ReadCmd(); cmd != TagPaymentRequestedInfo {
		r.Fail(errors.New("expected: paymentRequestedInfo"))
	}
	o.Info = new(TLPaymentRequestedInfo)
	o.Info.ReadBareFrom(r)
	o.ShippingOptionID = r.ReadString()
	if cmd := r.ReadCmd(); cmd != TagPaymentCharge {
		r.Fail(errors.New("expected: paymentCharge"))
	}
	o.Charge = new(TLPaymentCharge)
	o.Charge.ReadBareFrom(r)
}

func (o *TLMessageActionPaymentSentMe) WriteBareTo(w *tl.Writer) {
	w.WriteUint32(uint32(o.Flags))
	w.WriteString(o.Currency)
	w.WriteUint64(o.TotalAmount)
	w.WriteBlob(o.Payload)
	w.WriteCmd(TagPaymentRequestedInfo)
	o.Info.WriteBareTo(w)
	w.WriteString(o.ShippingOptionID)
	w.WriteCmd(TagPaymentCharge)
	o.Charge.WriteBareTo(w)
}

func (o *TLMessageActionPaymentSentMe) String() string {
	return tl.Pretty(o)
}

// TLMessageActionPaymentSent represents ctor messageActionPaymentSent#40699cd0 currency:string total_amount:long = MessageAction from Telegram
type TLMessageActionPaymentSent struct {
	Currency    string // currency:string
	TotalAmount uint64 // total_amount:long
}

func (o *TLMessageActionPaymentSent) IsTLMessageAction() {}

func (o *TLMessageActionPaymentSent) Cmd() uint32 {
	return TagMessageActionPaymentSent
}

func (o *TLMessageActionPaymentSent) ReadBareFrom(r *tl.Reader) {
	o.Currency = r.ReadString()
	o.TotalAmount = r.ReadUint64()
}

func (o *TLMessageActionPaymentSent) WriteBareTo(w *tl.Writer) {
	w.WriteString(o.Currency)
	w.WriteUint64(o.TotalAmount)
}

func (o *TLMessageActionPaymentSent) String() string {
	return tl.Pretty(o)
}

// TLMessageActionPhoneCall represents ctor messageActionPhoneCall#80e11a7f flags:# call_id:long flags.0?reason:PhoneCallDiscardReason flags.1?duration:int = MessageAction from Telegram
type TLMessageActionPhoneCall struct {
	Flags    uint                         // flags:#
	CallID   uint64                       // call_id:long
	Reason   TLPhoneCallDiscardReasonType // flags.0?reason:PhoneCallDiscardReason
	Duration int                          // flags.1?duration:int
}

func (o *TLMessageActionPhoneCall) IsTLMessageAction() {}

func (o *TLMessageActionPhoneCall) Cmd() uint32 {
	return TagMessageActionPhoneCall
}

func (o *TLMessageActionPhoneCall) ReadBareFrom(r *tl.Reader) {
	o.Flags = uint(r.ReadUint32())
	o.CallID = r.ReadUint64()
	o.Reason = Schema.ReadLimitedBoxedObjectFrom(r, TagPhoneCallDiscardReasonMissed, TagPhoneCallDiscardReasonDisconnect, TagPhoneCallDiscardReasonHangup, TagPhoneCallDiscardReasonBusy).(TLPhoneCallDiscardReasonType)
	o.Duration = r.ReadInt()
}

func (o *TLMessageActionPhoneCall) WriteBareTo(w *tl.Writer) {
	w.WriteUint32(uint32(o.Flags))
	w.WriteUint64(o.CallID)
	w.WriteCmd(o.Reason.Cmd())
	o.Reason.WriteBareTo(w)
	w.WriteInt(o.Duration)
}

func (o *TLMessageActionPhoneCall) String() string {
	return tl.Pretty(o)
}

// TLPeerNotifySettingsEmpty represents ctor peerNotifySettingsEmpty#70a68512 = PeerNotifySettings from Telegram
type TLPeerNotifySettingsEmpty struct {
}

func (o *TLPeerNotifySettingsEmpty) IsTLPeerNotifySettings() {}

func (o *TLPeerNotifySettingsEmpty) Cmd() uint32 {
	return TagPeerNotifySettingsEmpty
}

func (o *TLPeerNotifySettingsEmpty) ReadBareFrom(r *tl.Reader) {
}

func (o *TLPeerNotifySettingsEmpty) WriteBareTo(w *tl.Writer) {
}

func (o *TLPeerNotifySettingsEmpty) String() string {
	return tl.Pretty(o)
}

// TLPeerNotifySettings represents ctor peerNotifySettings#9acda4c0 flags:# flags.0?show_previews:true flags.1?silent:true mute_until:int sound:string = PeerNotifySettings from Telegram
type TLPeerNotifySettings struct {
	Flags        uint   // flags:#
	ShowPreviews bool   // flags.0?show_previews:true
	Silent       bool   // flags.1?silent:true
	MuteUntil    int    // mute_until:int
	Sound        string // sound:string
}

func (o *TLPeerNotifySettings) IsTLPeerNotifySettings() {}

func (o *TLPeerNotifySettings) Cmd() uint32 {
	return TagPeerNotifySettings
}

func (o *TLPeerNotifySettings) ReadBareFrom(r *tl.Reader) {
	o.Flags = uint(r.ReadUint32())
	o.ShowPreviews = true
	o.Silent = true
	o.MuteUntil = r.ReadInt()
	o.Sound = r.ReadString()
}

func (o *TLPeerNotifySettings) WriteBareTo(w *tl.Writer) {
	w.WriteUint32(uint32(o.Flags))
	w.WriteInt(o.MuteUntil)
	w.WriteString(o.Sound)
}

func (o *TLPeerNotifySettings) String() string {
	return tl.Pretty(o)
}

// TLDraftMessageEmpty represents ctor draftMessageEmpty#ba4baec5 = DraftMessage from Telegram
type TLDraftMessageEmpty struct {
}

func (o *TLDraftMessageEmpty) IsTLDraftMessage() {}

func (o *TLDraftMessageEmpty) Cmd() uint32 {
	return TagDraftMessageEmpty
}

func (o *TLDraftMessageEmpty) ReadBareFrom(r *tl.Reader) {
}

func (o *TLDraftMessageEmpty) WriteBareTo(w *tl.Writer) {
}

func (o *TLDraftMessageEmpty) String() string {
	return tl.Pretty(o)
}

// TLDraftMessage represents ctor draftMessage#fd8e711f flags:# flags.1?no_webpage:true flags.0?reply_to_msg_id:int message:string flags.3?entities:Vector<MessageEntity> date:int = DraftMessage from Telegram
type TLDraftMessage struct {
	Flags        uint                  // flags:#
	NoWebpage    bool                  // flags.1?no_webpage:true
	ReplyToMsgID int                   // flags.0?reply_to_msg_id:int
	Message      string                // message:string
	Entities     []TLMessageEntityType // flags.3?entities:Vector<MessageEntity>
	Date         int                   // date:int
}

func (o *TLDraftMessage) IsTLDraftMessage() {}

func (o *TLDraftMessage) Cmd() uint32 {
	return TagDraftMessage
}

func (o *TLDraftMessage) ReadBareFrom(r *tl.Reader) {
	o.Flags = uint(r.ReadUint32())
	o.NoWebpage = true
	o.ReplyToMsgID = r.ReadInt()
	o.Message = r.ReadString()
	if cmd := r.ReadCmd(); cmd != TagVector {
		r.Fail(errors.New("expected: vector"))
	}
	o.Entities = make([]TLMessageEntityType, r.ReadInt())
	for i := 0; i < len(o.Entities); i++ {
		o.Entities[i] = Schema.ReadLimitedBoxedObjectFrom(r, TagMessageEntityUnknown, TagMessageEntityMention, TagMessageEntityHashtag, TagMessageEntityBotCommand, TagMessageEntityUrl, TagMessageEntityEmail, TagMessageEntityBold, TagMessageEntityItalic, TagMessageEntityCode, TagMessageEntityPre, TagMessageEntityTextUrl, TagMessageEntityMentionName, TagInputMessageEntityMentionName).(TLMessageEntityType)
	}
	o.Date = r.ReadInt()
}

func (o *TLDraftMessage) WriteBareTo(w *tl.Writer) {
	w.WriteUint32(uint32(o.Flags))
	w.WriteInt(o.ReplyToMsgID)
	w.WriteString(o.Message)
	w.WriteCmd(TagVector)
	w.WriteInt(len(o.Entities))
	for i := 0; i < len(o.Entities); i++ {
		w.WriteCmd(o.Entities[i].Cmd())
		o.Entities[i].WriteBareTo(w)
	}
	w.WriteInt(o.Date)
}

func (o *TLDraftMessage) String() string {
	return tl.Pretty(o)
}

// TLPhotoEmpty represents ctor photoEmpty#2331b22d id:long = Photo from Telegram
type TLPhotoEmpty struct {
	ID uint64 // id:long
}

func (o *TLPhotoEmpty) IsTLPhoto() {}

func (o *TLPhotoEmpty) Cmd() uint32 {
	return TagPhotoEmpty
}

func (o *TLPhotoEmpty) ReadBareFrom(r *tl.Reader) {
	o.ID = r.ReadUint64()
}

func (o *TLPhotoEmpty) WriteBareTo(w *tl.Writer) {
	w.WriteUint64(o.ID)
}

func (o *TLPhotoEmpty) String() string {
	return tl.Pretty(o)
}

// TLPhoto represents ctor photo#9288dd29 flags:# flags.0?has_stickers:true id:long access_hash:long date:int sizes:Vector<PhotoSize> = Photo from Telegram
type TLPhoto struct {
	Flags       uint              // flags:#
	HasStickers bool              // flags.0?has_stickers:true
	ID          uint64            // id:long
	AccessHash  uint64            // access_hash:long
	Date        int               // date:int
	Sizes       []TLPhotoSizeType // sizes:Vector<PhotoSize>
}

func (o *TLPhoto) IsTLPhoto() {}

func (o *TLPhoto) Cmd() uint32 {
	return TagPhoto
}

func (o *TLPhoto) ReadBareFrom(r *tl.Reader) {
	o.Flags = uint(r.ReadUint32())
	o.HasStickers = true
	o.ID = r.ReadUint64()
	o.AccessHash = r.ReadUint64()
	o.Date = r.ReadInt()
	if cmd := r.ReadCmd(); cmd != TagVector {
		r.Fail(errors.New("expected: vector"))
	}
	o.Sizes = make([]TLPhotoSizeType, r.ReadInt())
	for i := 0; i < len(o.Sizes); i++ {
		o.Sizes[i] = Schema.ReadLimitedBoxedObjectFrom(r, TagPhotoSizeEmpty, TagPhotoSize, TagPhotoCachedSize).(TLPhotoSizeType)
	}
}

func (o *TLPhoto) WriteBareTo(w *tl.Writer) {
	w.WriteUint32(uint32(o.Flags))
	w.WriteUint64(o.ID)
	w.WriteUint64(o.AccessHash)
	w.WriteInt(o.Date)
	w.WriteCmd(TagVector)
	w.WriteInt(len(o.Sizes))
	for i := 0; i < len(o.Sizes); i++ {
		w.WriteCmd(o.Sizes[i].Cmd())
		o.Sizes[i].WriteBareTo(w)
	}
}

func (o *TLPhoto) String() string {
	return tl.Pretty(o)
}

// TLPhotoSizeEmpty represents ctor photoSizeEmpty#0e17e23c type:string = PhotoSize from Telegram
type TLPhotoSizeEmpty struct {
	Type string // type:string
}

func (o *TLPhotoSizeEmpty) IsTLPhotoSize() {}

func (o *TLPhotoSizeEmpty) Cmd() uint32 {
	return TagPhotoSizeEmpty
}

func (o *TLPhotoSizeEmpty) ReadBareFrom(r *tl.Reader) {
	o.Type = r.ReadString()
}

func (o *TLPhotoSizeEmpty) WriteBareTo(w *tl.Writer) {
	w.WriteString(o.Type)
}

func (o *TLPhotoSizeEmpty) String() string {
	return tl.Pretty(o)
}

// TLPhotoSize represents ctor photoSize#77bfb61b type:string location:FileLocation w:int h:int size:int = PhotoSize from Telegram
type TLPhotoSize struct {
	Type     string             // type:string
	Location TLFileLocationType // location:FileLocation
	W        int                // w:int
	H        int                // h:int
	Size     int                // size:int
}

func (o *TLPhotoSize) IsTLPhotoSize() {}

func (o *TLPhotoSize) Cmd() uint32 {
	return TagPhotoSize
}

func (o *TLPhotoSize) ReadBareFrom(r *tl.Reader) {
	o.Type = r.ReadString()
	o.Location = Schema.ReadLimitedBoxedObjectFrom(r, TagFileLocationUnavailable, TagFileLocation).(TLFileLocationType)
	o.W = r.ReadInt()
	o.H = r.ReadInt()
	o.Size = r.ReadInt()
}

func (o *TLPhotoSize) WriteBareTo(w *tl.Writer) {
	w.WriteString(o.Type)
	w.WriteCmd(o.Location.Cmd())
	o.Location.WriteBareTo(w)
	w.WriteInt(o.W)
	w.WriteInt(o.H)
	w.WriteInt(o.Size)
}

func (o *TLPhotoSize) String() string {
	return tl.Pretty(o)
}

// TLPhotoCachedSize represents ctor photoCachedSize#e9a734fa type:string location:FileLocation w:int h:int bytes:bytes = PhotoSize from Telegram
type TLPhotoCachedSize struct {
	Type     string             // type:string
	Location TLFileLocationType // location:FileLocation
	W        int                // w:int
	H        int                // h:int
	Bytes    []byte             // bytes:bytes
}

func (o *TLPhotoCachedSize) IsTLPhotoSize() {}

func (o *TLPhotoCachedSize) Cmd() uint32 {
	return TagPhotoCachedSize
}

func (o *TLPhotoCachedSize) ReadBareFrom(r *tl.Reader) {
	o.Type = r.ReadString()
	o.Location = Schema.ReadLimitedBoxedObjectFrom(r, TagFileLocationUnavailable, TagFileLocation).(TLFileLocationType)
	o.W = r.ReadInt()
	o.H = r.ReadInt()
	o.Bytes = r.ReadBlob()
}

func (o *TLPhotoCachedSize) WriteBareTo(w *tl.Writer) {
	w.WriteString(o.Type)
	w.WriteCmd(o.Location.Cmd())
	o.Location.WriteBareTo(w)
	w.WriteInt(o.W)
	w.WriteInt(o.H)
	w.WriteBlob(o.Bytes)
}

func (o *TLPhotoCachedSize) String() string {
	return tl.Pretty(o)
}

// TLGeoPointEmpty represents ctor geoPointEmpty#1117dd5f = GeoPoint from Telegram
type TLGeoPointEmpty struct {
}

func (o *TLGeoPointEmpty) IsTLGeoPoint() {}

func (o *TLGeoPointEmpty) Cmd() uint32 {
	return TagGeoPointEmpty
}

func (o *TLGeoPointEmpty) ReadBareFrom(r *tl.Reader) {
}

func (o *TLGeoPointEmpty) WriteBareTo(w *tl.Writer) {
}

func (o *TLGeoPointEmpty) String() string {
	return tl.Pretty(o)
}

// TLGeoPoint represents ctor geoPoint#2049d70c long:double lat:double = GeoPoint from Telegram
type TLGeoPoint struct {
	Long float64 // long:double
	Lat  float64 // lat:double
}

func (o *TLGeoPoint) IsTLGeoPoint() {}

func (o *TLGeoPoint) Cmd() uint32 {
	return TagGeoPoint
}

func (o *TLGeoPoint) ReadBareFrom(r *tl.Reader) {
	o.Long = r.ReadFloat64()
	o.Lat = r.ReadFloat64()
}

func (o *TLGeoPoint) WriteBareTo(w *tl.Writer) {
	w.WriteFloat64(o.Long)
	w.WriteFloat64(o.Lat)
}

func (o *TLGeoPoint) String() string {
	return tl.Pretty(o)
}

// TLAuthSentCodeTypeApp represents ctor auth.sentCodeTypeApp#3dbb5986 length:int = auth.SentCodeType from Telegram
type TLAuthSentCodeTypeApp struct {
	Length int // length:int
}

func (o *TLAuthSentCodeTypeApp) IsTLAuthSentCodeType() {}

func (o *TLAuthSentCodeTypeApp) Cmd() uint32 {
	return TagAuthSentCodeTypeApp
}

func (o *TLAuthSentCodeTypeApp) ReadBareFrom(r *tl.Reader) {
	o.Length = r.ReadInt()
}

func (o *TLAuthSentCodeTypeApp) WriteBareTo(w *tl.Writer) {
	w.WriteInt(o.Length)
}

func (o *TLAuthSentCodeTypeApp) String() string {
	return tl.Pretty(o)
}

// TLAuthSentCodeTypeSms represents ctor auth.sentCodeTypeSms#c000bba2 length:int = auth.SentCodeType from Telegram
type TLAuthSentCodeTypeSms struct {
	Length int // length:int
}

func (o *TLAuthSentCodeTypeSms) IsTLAuthSentCodeType() {}

func (o *TLAuthSentCodeTypeSms) Cmd() uint32 {
	return TagAuthSentCodeTypeSms
}

func (o *TLAuthSentCodeTypeSms) ReadBareFrom(r *tl.Reader) {
	o.Length = r.ReadInt()
}

func (o *TLAuthSentCodeTypeSms) WriteBareTo(w *tl.Writer) {
	w.WriteInt(o.Length)
}

func (o *TLAuthSentCodeTypeSms) String() string {
	return tl.Pretty(o)
}

// TLAuthSentCodeTypeCall represents ctor auth.sentCodeTypeCall#5353e5a7 length:int = auth.SentCodeType from Telegram
type TLAuthSentCodeTypeCall struct {
	Length int // length:int
}

func (o *TLAuthSentCodeTypeCall) IsTLAuthSentCodeType() {}

func (o *TLAuthSentCodeTypeCall) Cmd() uint32 {
	return TagAuthSentCodeTypeCall
}

func (o *TLAuthSentCodeTypeCall) ReadBareFrom(r *tl.Reader) {
	o.Length = r.ReadInt()
}

func (o *TLAuthSentCodeTypeCall) WriteBareTo(w *tl.Writer) {
	w.WriteInt(o.Length)
}

func (o *TLAuthSentCodeTypeCall) String() string {
	return tl.Pretty(o)
}

// TLAuthSentCodeTypeFlashCall represents ctor auth.sentCodeTypeFlashCall#ab03c6d9 pattern:string = auth.SentCodeType from Telegram
type TLAuthSentCodeTypeFlashCall struct {
	Pattern string // pattern:string
}

func (o *TLAuthSentCodeTypeFlashCall) IsTLAuthSentCodeType() {}

func (o *TLAuthSentCodeTypeFlashCall) Cmd() uint32 {
	return TagAuthSentCodeTypeFlashCall
}

func (o *TLAuthSentCodeTypeFlashCall) ReadBareFrom(r *tl.Reader) {
	o.Pattern = r.ReadString()
}

func (o *TLAuthSentCodeTypeFlashCall) WriteBareTo(w *tl.Writer) {
	w.WriteString(o.Pattern)
}

func (o *TLAuthSentCodeTypeFlashCall) String() string {
	return tl.Pretty(o)
}

// TLAuthCodeTypeSms represents ctor auth.codeTypeSms#72a3158c = auth.CodeType from Telegram
type TLAuthCodeTypeSms struct {
}

func (o *TLAuthCodeTypeSms) IsTLAuthCodeType() {}

func (o *TLAuthCodeTypeSms) Cmd() uint32 {
	return TagAuthCodeTypeSms
}

func (o *TLAuthCodeTypeSms) ReadBareFrom(r *tl.Reader) {
}

func (o *TLAuthCodeTypeSms) WriteBareTo(w *tl.Writer) {
}

func (o *TLAuthCodeTypeSms) String() string {
	return tl.Pretty(o)
}

// TLAuthCodeTypeCall represents ctor auth.codeTypeCall#741cd3e3 = auth.CodeType from Telegram
type TLAuthCodeTypeCall struct {
}

func (o *TLAuthCodeTypeCall) IsTLAuthCodeType() {}

func (o *TLAuthCodeTypeCall) Cmd() uint32 {
	return TagAuthCodeTypeCall
}

func (o *TLAuthCodeTypeCall) ReadBareFrom(r *tl.Reader) {
}

func (o *TLAuthCodeTypeCall) WriteBareTo(w *tl.Writer) {
}

func (o *TLAuthCodeTypeCall) String() string {
	return tl.Pretty(o)
}

// TLAuthCodeTypeFlashCall represents ctor auth.codeTypeFlashCall#226ccefb = auth.CodeType from Telegram
type TLAuthCodeTypeFlashCall struct {
}

func (o *TLAuthCodeTypeFlashCall) IsTLAuthCodeType() {}

func (o *TLAuthCodeTypeFlashCall) Cmd() uint32 {
	return TagAuthCodeTypeFlashCall
}

func (o *TLAuthCodeTypeFlashCall) ReadBareFrom(r *tl.Reader) {
}

func (o *TLAuthCodeTypeFlashCall) WriteBareTo(w *tl.Writer) {
}

func (o *TLAuthCodeTypeFlashCall) String() string {
	return tl.Pretty(o)
}

// TLInputNotifyPeer represents ctor inputNotifyPeer#b8bc5b0c peer:InputPeer = InputNotifyPeer from Telegram
type TLInputNotifyPeer struct {
	Peer TLInputPeerType // peer:InputPeer
}

func (o *TLInputNotifyPeer) IsTLInputNotifyPeer() {}

func (o *TLInputNotifyPeer) Cmd() uint32 {
	return TagInputNotifyPeer
}

func (o *TLInputNotifyPeer) ReadBareFrom(r *tl.Reader) {
	o.Peer = Schema.ReadLimitedBoxedObjectFrom(r, TagInputPeerEmpty, TagInputPeerSelf, TagInputPeerChat, TagInputPeerUser, TagInputPeerChannel).(TLInputPeerType)
}

func (o *TLInputNotifyPeer) WriteBareTo(w *tl.Writer) {
	w.WriteCmd(o.Peer.Cmd())
	o.Peer.WriteBareTo(w)
}

func (o *TLInputNotifyPeer) String() string {
	return tl.Pretty(o)
}

// TLInputNotifyUsers represents ctor inputNotifyUsers#193b4417 = InputNotifyPeer from Telegram
type TLInputNotifyUsers struct {
}

func (o *TLInputNotifyUsers) IsTLInputNotifyPeer() {}

func (o *TLInputNotifyUsers) Cmd() uint32 {
	return TagInputNotifyUsers
}

func (o *TLInputNotifyUsers) ReadBareFrom(r *tl.Reader) {
}

func (o *TLInputNotifyUsers) WriteBareTo(w *tl.Writer) {
}

func (o *TLInputNotifyUsers) String() string {
	return tl.Pretty(o)
}

// TLInputNotifyChats represents ctor inputNotifyChats#4a95e84e = InputNotifyPeer from Telegram
type TLInputNotifyChats struct {
}

func (o *TLInputNotifyChats) IsTLInputNotifyPeer() {}

func (o *TLInputNotifyChats) Cmd() uint32 {
	return TagInputNotifyChats
}

func (o *TLInputNotifyChats) ReadBareFrom(r *tl.Reader) {
}

func (o *TLInputNotifyChats) WriteBareTo(w *tl.Writer) {
}

func (o *TLInputNotifyChats) String() string {
	return tl.Pretty(o)
}

// TLInputNotifyAll represents ctor inputNotifyAll#a429b886 = InputNotifyPeer from Telegram
type TLInputNotifyAll struct {
}

func (o *TLInputNotifyAll) IsTLInputNotifyPeer() {}

func (o *TLInputNotifyAll) Cmd() uint32 {
	return TagInputNotifyAll
}

func (o *TLInputNotifyAll) ReadBareFrom(r *tl.Reader) {
}

func (o *TLInputNotifyAll) WriteBareTo(w *tl.Writer) {
}

func (o *TLInputNotifyAll) String() string {
	return tl.Pretty(o)
}

// TLInputPeerNotifyEventsEmpty represents ctor inputPeerNotifyEventsEmpty#f03064d8 = InputPeerNotifyEvents from Telegram
type TLInputPeerNotifyEventsEmpty struct {
}

func (o *TLInputPeerNotifyEventsEmpty) IsTLInputPeerNotifyEvents() {}

func (o *TLInputPeerNotifyEventsEmpty) Cmd() uint32 {
	return TagInputPeerNotifyEventsEmpty
}

func (o *TLInputPeerNotifyEventsEmpty) ReadBareFrom(r *tl.Reader) {
}

func (o *TLInputPeerNotifyEventsEmpty) WriteBareTo(w *tl.Writer) {
}

func (o *TLInputPeerNotifyEventsEmpty) String() string {
	return tl.Pretty(o)
}

// TLInputPeerNotifyEventsAll represents ctor inputPeerNotifyEventsAll#e86a2c74 = InputPeerNotifyEvents from Telegram
type TLInputPeerNotifyEventsAll struct {
}

func (o *TLInputPeerNotifyEventsAll) IsTLInputPeerNotifyEvents() {}

func (o *TLInputPeerNotifyEventsAll) Cmd() uint32 {
	return TagInputPeerNotifyEventsAll
}

func (o *TLInputPeerNotifyEventsAll) ReadBareFrom(r *tl.Reader) {
}

func (o *TLInputPeerNotifyEventsAll) WriteBareTo(w *tl.Writer) {
}

func (o *TLInputPeerNotifyEventsAll) String() string {
	return tl.Pretty(o)
}

// TLPeerNotifyEventsEmpty represents ctor peerNotifyEventsEmpty#add53cb3 = PeerNotifyEvents from Telegram
type TLPeerNotifyEventsEmpty struct {
}

func (o *TLPeerNotifyEventsEmpty) IsTLPeerNotifyEvents() {}

func (o *TLPeerNotifyEventsEmpty) Cmd() uint32 {
	return TagPeerNotifyEventsEmpty
}

func (o *TLPeerNotifyEventsEmpty) ReadBareFrom(r *tl.Reader) {
}

func (o *TLPeerNotifyEventsEmpty) WriteBareTo(w *tl.Writer) {
}

func (o *TLPeerNotifyEventsEmpty) String() string {
	return tl.Pretty(o)
}

// TLPeerNotifyEventsAll represents ctor peerNotifyEventsAll#6d1ded88 = PeerNotifyEvents from Telegram
type TLPeerNotifyEventsAll struct {
}

func (o *TLPeerNotifyEventsAll) IsTLPeerNotifyEvents() {}

func (o *TLPeerNotifyEventsAll) Cmd() uint32 {
	return TagPeerNotifyEventsAll
}

func (o *TLPeerNotifyEventsAll) ReadBareFrom(r *tl.Reader) {
}

func (o *TLPeerNotifyEventsAll) WriteBareTo(w *tl.Writer) {
}

func (o *TLPeerNotifyEventsAll) String() string {
	return tl.Pretty(o)
}

// TLWallPaper represents ctor wallPaper#ccb03657 id:int title:string sizes:Vector<PhotoSize> color:int = WallPaper from Telegram
type TLWallPaper struct {
	ID    int               // id:int
	Title string            // title:string
	Sizes []TLPhotoSizeType // sizes:Vector<PhotoSize>
	Color int               // color:int
}

func (o *TLWallPaper) IsTLWallPaper() {}

func (o *TLWallPaper) Cmd() uint32 {
	return TagWallPaper
}

func (o *TLWallPaper) ReadBareFrom(r *tl.Reader) {
	o.ID = r.ReadInt()
	o.Title = r.ReadString()
	if cmd := r.ReadCmd(); cmd != TagVector {
		r.Fail(errors.New("expected: vector"))
	}
	o.Sizes = make([]TLPhotoSizeType, r.ReadInt())
	for i := 0; i < len(o.Sizes); i++ {
		o.Sizes[i] = Schema.ReadLimitedBoxedObjectFrom(r, TagPhotoSizeEmpty, TagPhotoSize, TagPhotoCachedSize).(TLPhotoSizeType)
	}
	o.Color = r.ReadInt()
}

func (o *TLWallPaper) WriteBareTo(w *tl.Writer) {
	w.WriteInt(o.ID)
	w.WriteString(o.Title)
	w.WriteCmd(TagVector)
	w.WriteInt(len(o.Sizes))
	for i := 0; i < len(o.Sizes); i++ {
		w.WriteCmd(o.Sizes[i].Cmd())
		o.Sizes[i].WriteBareTo(w)
	}
	w.WriteInt(o.Color)
}

func (o *TLWallPaper) String() string {
	return tl.Pretty(o)
}

// TLWallPaperSolid represents ctor wallPaperSolid#63117f24 id:int title:string bg_color:int color:int = WallPaper from Telegram
type TLWallPaperSolid struct {
	ID      int    // id:int
	Title   string // title:string
	BgColor int    // bg_color:int
	Color   int    // color:int
}

func (o *TLWallPaperSolid) IsTLWallPaper() {}

func (o *TLWallPaperSolid) Cmd() uint32 {
	return TagWallPaperSolid
}

func (o *TLWallPaperSolid) ReadBareFrom(r *tl.Reader) {
	o.ID = r.ReadInt()
	o.Title = r.ReadString()
	o.BgColor = r.ReadInt()
	o.Color = r.ReadInt()
}

func (o *TLWallPaperSolid) WriteBareTo(w *tl.Writer) {
	w.WriteInt(o.ID)
	w.WriteString(o.Title)
	w.WriteInt(o.BgColor)
	w.WriteInt(o.Color)
}

func (o *TLWallPaperSolid) String() string {
	return tl.Pretty(o)
}

// TLInputReportReasonSpam represents ctor inputReportReasonSpam#58dbcab8 = ReportReason from Telegram
type TLInputReportReasonSpam struct {
}

func (o *TLInputReportReasonSpam) IsTLReportReason() {}

func (o *TLInputReportReasonSpam) Cmd() uint32 {
	return TagInputReportReasonSpam
}

func (o *TLInputReportReasonSpam) ReadBareFrom(r *tl.Reader) {
}

func (o *TLInputReportReasonSpam) WriteBareTo(w *tl.Writer) {
}

func (o *TLInputReportReasonSpam) String() string {
	return tl.Pretty(o)
}

// TLInputReportReasonViolence represents ctor inputReportReasonViolence#1e22c78d = ReportReason from Telegram
type TLInputReportReasonViolence struct {
}

func (o *TLInputReportReasonViolence) IsTLReportReason() {}

func (o *TLInputReportReasonViolence) Cmd() uint32 {
	return TagInputReportReasonViolence
}

func (o *TLInputReportReasonViolence) ReadBareFrom(r *tl.Reader) {
}

func (o *TLInputReportReasonViolence) WriteBareTo(w *tl.Writer) {
}

func (o *TLInputReportReasonViolence) String() string {
	return tl.Pretty(o)
}

// TLInputReportReasonPornography represents ctor inputReportReasonPornography#2e59d922 = ReportReason from Telegram
type TLInputReportReasonPornography struct {
}

func (o *TLInputReportReasonPornography) IsTLReportReason() {}

func (o *TLInputReportReasonPornography) Cmd() uint32 {
	return TagInputReportReasonPornography
}

func (o *TLInputReportReasonPornography) ReadBareFrom(r *tl.Reader) {
}

func (o *TLInputReportReasonPornography) WriteBareTo(w *tl.Writer) {
}

func (o *TLInputReportReasonPornography) String() string {
	return tl.Pretty(o)
}

// TLInputReportReasonOther represents ctor inputReportReasonOther#e1746d0a text:string = ReportReason from Telegram
type TLInputReportReasonOther struct {
	Text string // text:string
}

func (o *TLInputReportReasonOther) IsTLReportReason() {}

func (o *TLInputReportReasonOther) Cmd() uint32 {
	return TagInputReportReasonOther
}

func (o *TLInputReportReasonOther) ReadBareFrom(r *tl.Reader) {
	o.Text = r.ReadString()
}

func (o *TLInputReportReasonOther) WriteBareTo(w *tl.Writer) {
	w.WriteString(o.Text)
}

func (o *TLInputReportReasonOther) String() string {
	return tl.Pretty(o)
}

// TLContactLinkUnknown represents ctor contactLinkUnknown#5f4f9247 = ContactLink from Telegram
type TLContactLinkUnknown struct {
}

func (o *TLContactLinkUnknown) IsTLContactLink() {}

func (o *TLContactLinkUnknown) Cmd() uint32 {
	return TagContactLinkUnknown
}

func (o *TLContactLinkUnknown) ReadBareFrom(r *tl.Reader) {
}

func (o *TLContactLinkUnknown) WriteBareTo(w *tl.Writer) {
}

func (o *TLContactLinkUnknown) String() string {
	return tl.Pretty(o)
}

// TLContactLinkNone represents ctor contactLinkNone#feedd3ad = ContactLink from Telegram
type TLContactLinkNone struct {
}

func (o *TLContactLinkNone) IsTLContactLink() {}

func (o *TLContactLinkNone) Cmd() uint32 {
	return TagContactLinkNone
}

func (o *TLContactLinkNone) ReadBareFrom(r *tl.Reader) {
}

func (o *TLContactLinkNone) WriteBareTo(w *tl.Writer) {
}

func (o *TLContactLinkNone) String() string {
	return tl.Pretty(o)
}

// TLContactLinkHasPhone represents ctor contactLinkHasPhone#268f3f59 = ContactLink from Telegram
type TLContactLinkHasPhone struct {
}

func (o *TLContactLinkHasPhone) IsTLContactLink() {}

func (o *TLContactLinkHasPhone) Cmd() uint32 {
	return TagContactLinkHasPhone
}

func (o *TLContactLinkHasPhone) ReadBareFrom(r *tl.Reader) {
}

func (o *TLContactLinkHasPhone) WriteBareTo(w *tl.Writer) {
}

func (o *TLContactLinkHasPhone) String() string {
	return tl.Pretty(o)
}

// TLContactLinkContact represents ctor contactLinkContact#d502c2d0 = ContactLink from Telegram
type TLContactLinkContact struct {
}

func (o *TLContactLinkContact) IsTLContactLink() {}

func (o *TLContactLinkContact) Cmd() uint32 {
	return TagContactLinkContact
}

func (o *TLContactLinkContact) ReadBareFrom(r *tl.Reader) {
}

func (o *TLContactLinkContact) WriteBareTo(w *tl.Writer) {
}

func (o *TLContactLinkContact) String() string {
	return tl.Pretty(o)
}

// TLContactsContactsNotModified represents ctor contacts.contactsNotModified#b74ba9d2 = contacts.Contacts from Telegram
type TLContactsContactsNotModified struct {
}

func (o *TLContactsContactsNotModified) IsTLContactsContacts() {}

func (o *TLContactsContactsNotModified) Cmd() uint32 {
	return TagContactsContactsNotModified
}

func (o *TLContactsContactsNotModified) ReadBareFrom(r *tl.Reader) {
}

func (o *TLContactsContactsNotModified) WriteBareTo(w *tl.Writer) {
}

func (o *TLContactsContactsNotModified) String() string {
	return tl.Pretty(o)
}

// TLContactsContacts represents ctor contacts.contacts#6f8b8cb2 contacts:Vector<Contact> users:Vector<User> = contacts.Contacts from Telegram
type TLContactsContacts struct {
	Contacts []*TLContact // contacts:Vector<Contact>
	Users    []TLUserType // users:Vector<User>
}

func (o *TLContactsContacts) IsTLContactsContacts() {}

func (o *TLContactsContacts) Cmd() uint32 {
	return TagContactsContacts
}

func (o *TLContactsContacts) ReadBareFrom(r *tl.Reader) {
	if cmd := r.ReadCmd(); cmd != TagVector {
		r.Fail(errors.New("expected: vector"))
	}
	o.Contacts = make([]*TLContact, r.ReadInt())
	for i := 0; i < len(o.Contacts); i++ {
		if cmd := r.ReadCmd(); cmd != TagContact {
			r.Fail(errors.New("expected: contact"))
		}
		o.Contacts[i] = new(TLContact)
		o.Contacts[i].ReadBareFrom(r)
	}
	if cmd := r.ReadCmd(); cmd != TagVector {
		r.Fail(errors.New("expected: vector"))
	}
	o.Users = make([]TLUserType, r.ReadInt())
	for i := 0; i < len(o.Users); i++ {
		o.Users[i] = Schema.ReadLimitedBoxedObjectFrom(r, TagUserEmpty, TagUser).(TLUserType)
	}
}

func (o *TLContactsContacts) WriteBareTo(w *tl.Writer) {
	w.WriteCmd(TagVector)
	w.WriteInt(len(o.Contacts))
	for i := 0; i < len(o.Contacts); i++ {
		w.WriteCmd(TagContact)
		o.Contacts[i].WriteBareTo(w)
	}
	w.WriteCmd(TagVector)
	w.WriteInt(len(o.Users))
	for i := 0; i < len(o.Users); i++ {
		w.WriteCmd(o.Users[i].Cmd())
		o.Users[i].WriteBareTo(w)
	}
}

func (o *TLContactsContacts) String() string {
	return tl.Pretty(o)
}

// TLContactsBlocked represents ctor contacts.blocked#1c138d15 blocked:Vector<ContactBlocked> users:Vector<User> = contacts.Blocked from Telegram
type TLContactsBlocked struct {
	Blocked []*TLContactBlocked // blocked:Vector<ContactBlocked>
	Users   []TLUserType        // users:Vector<User>
}

func (o *TLContactsBlocked) IsTLContactsBlocked() {}

func (o *TLContactsBlocked) Cmd() uint32 {
	return TagContactsBlocked
}

func (o *TLContactsBlocked) ReadBareFrom(r *tl.Reader) {
	if cmd := r.ReadCmd(); cmd != TagVector {
		r.Fail(errors.New("expected: vector"))
	}
	o.Blocked = make([]*TLContactBlocked, r.ReadInt())
	for i := 0; i < len(o.Blocked); i++ {
		if cmd := r.ReadCmd(); cmd != TagContactBlocked {
			r.Fail(errors.New("expected: contactBlocked"))
		}
		o.Blocked[i] = new(TLContactBlocked)
		o.Blocked[i].ReadBareFrom(r)
	}
	if cmd := r.ReadCmd(); cmd != TagVector {
		r.Fail(errors.New("expected: vector"))
	}
	o.Users = make([]TLUserType, r.ReadInt())
	for i := 0; i < len(o.Users); i++ {
		o.Users[i] = Schema.ReadLimitedBoxedObjectFrom(r, TagUserEmpty, TagUser).(TLUserType)
	}
}

func (o *TLContactsBlocked) WriteBareTo(w *tl.Writer) {
	w.WriteCmd(TagVector)
	w.WriteInt(len(o.Blocked))
	for i := 0; i < len(o.Blocked); i++ {
		w.WriteCmd(TagContactBlocked)
		o.Blocked[i].WriteBareTo(w)
	}
	w.WriteCmd(TagVector)
	w.WriteInt(len(o.Users))
	for i := 0; i < len(o.Users); i++ {
		w.WriteCmd(o.Users[i].Cmd())
		o.Users[i].WriteBareTo(w)
	}
}

func (o *TLContactsBlocked) String() string {
	return tl.Pretty(o)
}

// TLContactsBlockedSlice represents ctor contacts.blockedSlice#900802a1 count:int blocked:Vector<ContactBlocked> users:Vector<User> = contacts.Blocked from Telegram
type TLContactsBlockedSlice struct {
	Count   int                 // count:int
	Blocked []*TLContactBlocked // blocked:Vector<ContactBlocked>
	Users   []TLUserType        // users:Vector<User>
}

func (o *TLContactsBlockedSlice) IsTLContactsBlocked() {}

func (o *TLContactsBlockedSlice) Cmd() uint32 {
	return TagContactsBlockedSlice
}

func (o *TLContactsBlockedSlice) ReadBareFrom(r *tl.Reader) {
	o.Count = r.ReadInt()
	if cmd := r.ReadCmd(); cmd != TagVector {
		r.Fail(errors.New("expected: vector"))
	}
	o.Blocked = make([]*TLContactBlocked, r.ReadInt())
	for i := 0; i < len(o.Blocked); i++ {
		if cmd := r.ReadCmd(); cmd != TagContactBlocked {
			r.Fail(errors.New("expected: contactBlocked"))
		}
		o.Blocked[i] = new(TLContactBlocked)
		o.Blocked[i].ReadBareFrom(r)
	}
	if cmd := r.ReadCmd(); cmd != TagVector {
		r.Fail(errors.New("expected: vector"))
	}
	o.Users = make([]TLUserType, r.ReadInt())
	for i := 0; i < len(o.Users); i++ {
		o.Users[i] = Schema.ReadLimitedBoxedObjectFrom(r, TagUserEmpty, TagUser).(TLUserType)
	}
}

func (o *TLContactsBlockedSlice) WriteBareTo(w *tl.Writer) {
	w.WriteInt(o.Count)
	w.WriteCmd(TagVector)
	w.WriteInt(len(o.Blocked))
	for i := 0; i < len(o.Blocked); i++ {
		w.WriteCmd(TagContactBlocked)
		o.Blocked[i].WriteBareTo(w)
	}
	w.WriteCmd(TagVector)
	w.WriteInt(len(o.Users))
	for i := 0; i < len(o.Users); i++ {
		w.WriteCmd(o.Users[i].Cmd())
		o.Users[i].WriteBareTo(w)
	}
}

func (o *TLContactsBlockedSlice) String() string {
	return tl.Pretty(o)
}

// TLMessagesDialogs represents ctor messages.dialogs#15ba6c40 dialogs:Vector<Dialog> messages:Vector<Message> chats:Vector<Chat> users:Vector<User> = messages.Dialogs from Telegram
type TLMessagesDialogs struct {
	Dialogs  []*TLDialog     // dialogs:Vector<Dialog>
	Messages []TLMessageType // messages:Vector<Message>
	Chats    []TLChatType    // chats:Vector<Chat>
	Users    []TLUserType    // users:Vector<User>
}

func (o *TLMessagesDialogs) IsTLMessagesDialogs() {}

func (o *TLMessagesDialogs) Cmd() uint32 {
	return TagMessagesDialogs
}

func (o *TLMessagesDialogs) ReadBareFrom(r *tl.Reader) {
	if cmd := r.ReadCmd(); cmd != TagVector {
		r.Fail(errors.New("expected: vector"))
	}
	o.Dialogs = make([]*TLDialog, r.ReadInt())
	for i := 0; i < len(o.Dialogs); i++ {
		if cmd := r.ReadCmd(); cmd != TagDialog {
			r.Fail(errors.New("expected: dialog"))
		}
		o.Dialogs[i] = new(TLDialog)
		o.Dialogs[i].ReadBareFrom(r)
	}
	if cmd := r.ReadCmd(); cmd != TagVector {
		r.Fail(errors.New("expected: vector"))
	}
	o.Messages = make([]TLMessageType, r.ReadInt())
	for i := 0; i < len(o.Messages); i++ {
		o.Messages[i] = Schema.ReadLimitedBoxedObjectFrom(r, TagMessageEmpty, TagMessage, TagMessageService).(TLMessageType)
	}
	if cmd := r.ReadCmd(); cmd != TagVector {
		r.Fail(errors.New("expected: vector"))
	}
	o.Chats = make([]TLChatType, r.ReadInt())
	for i := 0; i < len(o.Chats); i++ {
		o.Chats[i] = Schema.ReadLimitedBoxedObjectFrom(r, TagChatEmpty, TagChat, TagChatForbidden, TagChannel, TagChannelForbidden).(TLChatType)
	}
	if cmd := r.ReadCmd(); cmd != TagVector {
		r.Fail(errors.New("expected: vector"))
	}
	o.Users = make([]TLUserType, r.ReadInt())
	for i := 0; i < len(o.Users); i++ {
		o.Users[i] = Schema.ReadLimitedBoxedObjectFrom(r, TagUserEmpty, TagUser).(TLUserType)
	}
}

func (o *TLMessagesDialogs) WriteBareTo(w *tl.Writer) {
	w.WriteCmd(TagVector)
	w.WriteInt(len(o.Dialogs))
	for i := 0; i < len(o.Dialogs); i++ {
		w.WriteCmd(TagDialog)
		o.Dialogs[i].WriteBareTo(w)
	}
	w.WriteCmd(TagVector)
	w.WriteInt(len(o.Messages))
	for i := 0; i < len(o.Messages); i++ {
		w.WriteCmd(o.Messages[i].Cmd())
		o.Messages[i].WriteBareTo(w)
	}
	w.WriteCmd(TagVector)
	w.WriteInt(len(o.Chats))
	for i := 0; i < len(o.Chats); i++ {
		w.WriteCmd(o.Chats[i].Cmd())
		o.Chats[i].WriteBareTo(w)
	}
	w.WriteCmd(TagVector)
	w.WriteInt(len(o.Users))
	for i := 0; i < len(o.Users); i++ {
		w.WriteCmd(o.Users[i].Cmd())
		o.Users[i].WriteBareTo(w)
	}
}

func (o *TLMessagesDialogs) String() string {
	return tl.Pretty(o)
}

// TLMessagesDialogsSlice represents ctor messages.dialogsSlice#71e094f3 count:int dialogs:Vector<Dialog> messages:Vector<Message> chats:Vector<Chat> users:Vector<User> = messages.Dialogs from Telegram
type TLMessagesDialogsSlice struct {
	Count    int             // count:int
	Dialogs  []*TLDialog     // dialogs:Vector<Dialog>
	Messages []TLMessageType // messages:Vector<Message>
	Chats    []TLChatType    // chats:Vector<Chat>
	Users    []TLUserType    // users:Vector<User>
}

func (o *TLMessagesDialogsSlice) IsTLMessagesDialogs() {}

func (o *TLMessagesDialogsSlice) Cmd() uint32 {
	return TagMessagesDialogsSlice
}

func (o *TLMessagesDialogsSlice) ReadBareFrom(r *tl.Reader) {
	o.Count = r.ReadInt()
	if cmd := r.ReadCmd(); cmd != TagVector {
		r.Fail(errors.New("expected: vector"))
	}
	o.Dialogs = make([]*TLDialog, r.ReadInt())
	for i := 0; i < len(o.Dialogs); i++ {
		if cmd := r.ReadCmd(); cmd != TagDialog {
			r.Fail(errors.New("expected: dialog"))
		}
		o.Dialogs[i] = new(TLDialog)
		o.Dialogs[i].ReadBareFrom(r)
	}
	if cmd := r.ReadCmd(); cmd != TagVector {
		r.Fail(errors.New("expected: vector"))
	}
	o.Messages = make([]TLMessageType, r.ReadInt())
	for i := 0; i < len(o.Messages); i++ {
		o.Messages[i] = Schema.ReadLimitedBoxedObjectFrom(r, TagMessageEmpty, TagMessage, TagMessageService).(TLMessageType)
	}
	if cmd := r.ReadCmd(); cmd != TagVector {
		r.Fail(errors.New("expected: vector"))
	}
	o.Chats = make([]TLChatType, r.ReadInt())
	for i := 0; i < len(o.Chats); i++ {
		o.Chats[i] = Schema.ReadLimitedBoxedObjectFrom(r, TagChatEmpty, TagChat, TagChatForbidden, TagChannel, TagChannelForbidden).(TLChatType)
	}
	if cmd := r.ReadCmd(); cmd != TagVector {
		r.Fail(errors.New("expected: vector"))
	}
	o.Users = make([]TLUserType, r.ReadInt())
	for i := 0; i < len(o.Users); i++ {
		o.Users[i] = Schema.ReadLimitedBoxedObjectFrom(r, TagUserEmpty, TagUser).(TLUserType)
	}
}

func (o *TLMessagesDialogsSlice) WriteBareTo(w *tl.Writer) {
	w.WriteInt(o.Count)
	w.WriteCmd(TagVector)
	w.WriteInt(len(o.Dialogs))
	for i := 0; i < len(o.Dialogs); i++ {
		w.WriteCmd(TagDialog)
		o.Dialogs[i].WriteBareTo(w)
	}
	w.WriteCmd(TagVector)
	w.WriteInt(len(o.Messages))
	for i := 0; i < len(o.Messages); i++ {
		w.WriteCmd(o.Messages[i].Cmd())
		o.Messages[i].WriteBareTo(w)
	}
	w.WriteCmd(TagVector)
	w.WriteInt(len(o.Chats))
	for i := 0; i < len(o.Chats); i++ {
		w.WriteCmd(o.Chats[i].Cmd())
		o.Chats[i].WriteBareTo(w)
	}
	w.WriteCmd(TagVector)
	w.WriteInt(len(o.Users))
	for i := 0; i < len(o.Users); i++ {
		w.WriteCmd(o.Users[i].Cmd())
		o.Users[i].WriteBareTo(w)
	}
}

func (o *TLMessagesDialogsSlice) String() string {
	return tl.Pretty(o)
}

// TLMessagesMessages represents ctor messages.messages#8c718e87 messages:Vector<Message> chats:Vector<Chat> users:Vector<User> = messages.Messages from Telegram
type TLMessagesMessages struct {
	Messages []TLMessageType // messages:Vector<Message>
	Chats    []TLChatType    // chats:Vector<Chat>
	Users    []TLUserType    // users:Vector<User>
}

func (o *TLMessagesMessages) IsTLMessagesMessages() {}

func (o *TLMessagesMessages) Cmd() uint32 {
	return TagMessagesMessages
}

func (o *TLMessagesMessages) ReadBareFrom(r *tl.Reader) {
	if cmd := r.ReadCmd(); cmd != TagVector {
		r.Fail(errors.New("expected: vector"))
	}
	o.Messages = make([]TLMessageType, r.ReadInt())
	for i := 0; i < len(o.Messages); i++ {
		o.Messages[i] = Schema.ReadLimitedBoxedObjectFrom(r, TagMessageEmpty, TagMessage, TagMessageService).(TLMessageType)
	}
	if cmd := r.ReadCmd(); cmd != TagVector {
		r.Fail(errors.New("expected: vector"))
	}
	o.Chats = make([]TLChatType, r.ReadInt())
	for i := 0; i < len(o.Chats); i++ {
		o.Chats[i] = Schema.ReadLimitedBoxedObjectFrom(r, TagChatEmpty, TagChat, TagChatForbidden, TagChannel, TagChannelForbidden).(TLChatType)
	}
	if cmd := r.ReadCmd(); cmd != TagVector {
		r.Fail(errors.New("expected: vector"))
	}
	o.Users = make([]TLUserType, r.ReadInt())
	for i := 0; i < len(o.Users); i++ {
		o.Users[i] = Schema.ReadLimitedBoxedObjectFrom(r, TagUserEmpty, TagUser).(TLUserType)
	}
}

func (o *TLMessagesMessages) WriteBareTo(w *tl.Writer) {
	w.WriteCmd(TagVector)
	w.WriteInt(len(o.Messages))
	for i := 0; i < len(o.Messages); i++ {
		w.WriteCmd(o.Messages[i].Cmd())
		o.Messages[i].WriteBareTo(w)
	}
	w.WriteCmd(TagVector)
	w.WriteInt(len(o.Chats))
	for i := 0; i < len(o.Chats); i++ {
		w.WriteCmd(o.Chats[i].Cmd())
		o.Chats[i].WriteBareTo(w)
	}
	w.WriteCmd(TagVector)
	w.WriteInt(len(o.Users))
	for i := 0; i < len(o.Users); i++ {
		w.WriteCmd(o.Users[i].Cmd())
		o.Users[i].WriteBareTo(w)
	}
}

func (o *TLMessagesMessages) String() string {
	return tl.Pretty(o)
}

// TLMessagesMessagesSlice represents ctor messages.messagesSlice#0b446ae3 count:int messages:Vector<Message> chats:Vector<Chat> users:Vector<User> = messages.Messages from Telegram
type TLMessagesMessagesSlice struct {
	Count    int             // count:int
	Messages []TLMessageType // messages:Vector<Message>
	Chats    []TLChatType    // chats:Vector<Chat>
	Users    []TLUserType    // users:Vector<User>
}

func (o *TLMessagesMessagesSlice) IsTLMessagesMessages() {}

func (o *TLMessagesMessagesSlice) Cmd() uint32 {
	return TagMessagesMessagesSlice
}

func (o *TLMessagesMessagesSlice) ReadBareFrom(r *tl.Reader) {
	o.Count = r.ReadInt()
	if cmd := r.ReadCmd(); cmd != TagVector {
		r.Fail(errors.New("expected: vector"))
	}
	o.Messages = make([]TLMessageType, r.ReadInt())
	for i := 0; i < len(o.Messages); i++ {
		o.Messages[i] = Schema.ReadLimitedBoxedObjectFrom(r, TagMessageEmpty, TagMessage, TagMessageService).(TLMessageType)
	}
	if cmd := r.ReadCmd(); cmd != TagVector {
		r.Fail(errors.New("expected: vector"))
	}
	o.Chats = make([]TLChatType, r.ReadInt())
	for i := 0; i < len(o.Chats); i++ {
		o.Chats[i] = Schema.ReadLimitedBoxedObjectFrom(r, TagChatEmpty, TagChat, TagChatForbidden, TagChannel, TagChannelForbidden).(TLChatType)
	}
	if cmd := r.ReadCmd(); cmd != TagVector {
		r.Fail(errors.New("expected: vector"))
	}
	o.Users = make([]TLUserType, r.ReadInt())
	for i := 0; i < len(o.Users); i++ {
		o.Users[i] = Schema.ReadLimitedBoxedObjectFrom(r, TagUserEmpty, TagUser).(TLUserType)
	}
}

func (o *TLMessagesMessagesSlice) WriteBareTo(w *tl.Writer) {
	w.WriteInt(o.Count)
	w.WriteCmd(TagVector)
	w.WriteInt(len(o.Messages))
	for i := 0; i < len(o.Messages); i++ {
		w.WriteCmd(o.Messages[i].Cmd())
		o.Messages[i].WriteBareTo(w)
	}
	w.WriteCmd(TagVector)
	w.WriteInt(len(o.Chats))
	for i := 0; i < len(o.Chats); i++ {
		w.WriteCmd(o.Chats[i].Cmd())
		o.Chats[i].WriteBareTo(w)
	}
	w.WriteCmd(TagVector)
	w.WriteInt(len(o.Users))
	for i := 0; i < len(o.Users); i++ {
		w.WriteCmd(o.Users[i].Cmd())
		o.Users[i].WriteBareTo(w)
	}
}

func (o *TLMessagesMessagesSlice) String() string {
	return tl.Pretty(o)
}

// TLMessagesChannelMessages represents ctor messages.channelMessages#99262e37 flags:# pts:int count:int messages:Vector<Message> chats:Vector<Chat> users:Vector<User> = messages.Messages from Telegram
type TLMessagesChannelMessages struct {
	Flags    uint            // flags:#
	Pts      int             // pts:int
	Count    int             // count:int
	Messages []TLMessageType // messages:Vector<Message>
	Chats    []TLChatType    // chats:Vector<Chat>
	Users    []TLUserType    // users:Vector<User>
}

func (o *TLMessagesChannelMessages) IsTLMessagesMessages() {}

func (o *TLMessagesChannelMessages) Cmd() uint32 {
	return TagMessagesChannelMessages
}

func (o *TLMessagesChannelMessages) ReadBareFrom(r *tl.Reader) {
	o.Flags = uint(r.ReadUint32())
	o.Pts = r.ReadInt()
	o.Count = r.ReadInt()
	if cmd := r.ReadCmd(); cmd != TagVector {
		r.Fail(errors.New("expected: vector"))
	}
	o.Messages = make([]TLMessageType, r.ReadInt())
	for i := 0; i < len(o.Messages); i++ {
		o.Messages[i] = Schema.ReadLimitedBoxedObjectFrom(r, TagMessageEmpty, TagMessage, TagMessageService).(TLMessageType)
	}
	if cmd := r.ReadCmd(); cmd != TagVector {
		r.Fail(errors.New("expected: vector"))
	}
	o.Chats = make([]TLChatType, r.ReadInt())
	for i := 0; i < len(o.Chats); i++ {
		o.Chats[i] = Schema.ReadLimitedBoxedObjectFrom(r, TagChatEmpty, TagChat, TagChatForbidden, TagChannel, TagChannelForbidden).(TLChatType)
	}
	if cmd := r.ReadCmd(); cmd != TagVector {
		r.Fail(errors.New("expected: vector"))
	}
	o.Users = make([]TLUserType, r.ReadInt())
	for i := 0; i < len(o.Users); i++ {
		o.Users[i] = Schema.ReadLimitedBoxedObjectFrom(r, TagUserEmpty, TagUser).(TLUserType)
	}
}

func (o *TLMessagesChannelMessages) WriteBareTo(w *tl.Writer) {
	w.WriteUint32(uint32(o.Flags))
	w.WriteInt(o.Pts)
	w.WriteInt(o.Count)
	w.WriteCmd(TagVector)
	w.WriteInt(len(o.Messages))
	for i := 0; i < len(o.Messages); i++ {
		w.WriteCmd(o.Messages[i].Cmd())
		o.Messages[i].WriteBareTo(w)
	}
	w.WriteCmd(TagVector)
	w.WriteInt(len(o.Chats))
	for i := 0; i < len(o.Chats); i++ {
		w.WriteCmd(o.Chats[i].Cmd())
		o.Chats[i].WriteBareTo(w)
	}
	w.WriteCmd(TagVector)
	w.WriteInt(len(o.Users))
	for i := 0; i < len(o.Users); i++ {
		w.WriteCmd(o.Users[i].Cmd())
		o.Users[i].WriteBareTo(w)
	}
}

func (o *TLMessagesChannelMessages) String() string {
	return tl.Pretty(o)
}

// TLMessagesChats represents ctor messages.chats#64ff9fd5 chats:Vector<Chat> = messages.Chats from Telegram
type TLMessagesChats struct {
	Chats []TLChatType // chats:Vector<Chat>
}

func (o *TLMessagesChats) IsTLMessagesChats() {}

func (o *TLMessagesChats) Cmd() uint32 {
	return TagMessagesChats
}

func (o *TLMessagesChats) ReadBareFrom(r *tl.Reader) {
	if cmd := r.ReadCmd(); cmd != TagVector {
		r.Fail(errors.New("expected: vector"))
	}
	o.Chats = make([]TLChatType, r.ReadInt())
	for i := 0; i < len(o.Chats); i++ {
		o.Chats[i] = Schema.ReadLimitedBoxedObjectFrom(r, TagChatEmpty, TagChat, TagChatForbidden, TagChannel, TagChannelForbidden).(TLChatType)
	}
}

func (o *TLMessagesChats) WriteBareTo(w *tl.Writer) {
	w.WriteCmd(TagVector)
	w.WriteInt(len(o.Chats))
	for i := 0; i < len(o.Chats); i++ {
		w.WriteCmd(o.Chats[i].Cmd())
		o.Chats[i].WriteBareTo(w)
	}
}

func (o *TLMessagesChats) String() string {
	return tl.Pretty(o)
}

// TLMessagesChatsSlice represents ctor messages.chatsSlice#9cd81144 count:int chats:Vector<Chat> = messages.Chats from Telegram
type TLMessagesChatsSlice struct {
	Count int          // count:int
	Chats []TLChatType // chats:Vector<Chat>
}

func (o *TLMessagesChatsSlice) IsTLMessagesChats() {}

func (o *TLMessagesChatsSlice) Cmd() uint32 {
	return TagMessagesChatsSlice
}

func (o *TLMessagesChatsSlice) ReadBareFrom(r *tl.Reader) {
	o.Count = r.ReadInt()
	if cmd := r.ReadCmd(); cmd != TagVector {
		r.Fail(errors.New("expected: vector"))
	}
	o.Chats = make([]TLChatType, r.ReadInt())
	for i := 0; i < len(o.Chats); i++ {
		o.Chats[i] = Schema.ReadLimitedBoxedObjectFrom(r, TagChatEmpty, TagChat, TagChatForbidden, TagChannel, TagChannelForbidden).(TLChatType)
	}
}

func (o *TLMessagesChatsSlice) WriteBareTo(w *tl.Writer) {
	w.WriteInt(o.Count)
	w.WriteCmd(TagVector)
	w.WriteInt(len(o.Chats))
	for i := 0; i < len(o.Chats); i++ {
		w.WriteCmd(o.Chats[i].Cmd())
		o.Chats[i].WriteBareTo(w)
	}
}

func (o *TLMessagesChatsSlice) String() string {
	return tl.Pretty(o)
}

// TLInputMessagesFilterEmpty represents ctor inputMessagesFilterEmpty#57e2f66c = MessagesFilter from Telegram
type TLInputMessagesFilterEmpty struct {
}

func (o *TLInputMessagesFilterEmpty) IsTLMessagesFilter() {}

func (o *TLInputMessagesFilterEmpty) Cmd() uint32 {
	return TagInputMessagesFilterEmpty
}

func (o *TLInputMessagesFilterEmpty) ReadBareFrom(r *tl.Reader) {
}

func (o *TLInputMessagesFilterEmpty) WriteBareTo(w *tl.Writer) {
}

func (o *TLInputMessagesFilterEmpty) String() string {
	return tl.Pretty(o)
}

// TLInputMessagesFilterPhotos represents ctor inputMessagesFilterPhotos#9609a51c = MessagesFilter from Telegram
type TLInputMessagesFilterPhotos struct {
}

func (o *TLInputMessagesFilterPhotos) IsTLMessagesFilter() {}

func (o *TLInputMessagesFilterPhotos) Cmd() uint32 {
	return TagInputMessagesFilterPhotos
}

func (o *TLInputMessagesFilterPhotos) ReadBareFrom(r *tl.Reader) {
}

func (o *TLInputMessagesFilterPhotos) WriteBareTo(w *tl.Writer) {
}

func (o *TLInputMessagesFilterPhotos) String() string {
	return tl.Pretty(o)
}

// TLInputMessagesFilterVideo represents ctor inputMessagesFilterVideo#9fc00e65 = MessagesFilter from Telegram
type TLInputMessagesFilterVideo struct {
}

func (o *TLInputMessagesFilterVideo) IsTLMessagesFilter() {}

func (o *TLInputMessagesFilterVideo) Cmd() uint32 {
	return TagInputMessagesFilterVideo
}

func (o *TLInputMessagesFilterVideo) ReadBareFrom(r *tl.Reader) {
}

func (o *TLInputMessagesFilterVideo) WriteBareTo(w *tl.Writer) {
}

func (o *TLInputMessagesFilterVideo) String() string {
	return tl.Pretty(o)
}

// TLInputMessagesFilterPhotoVideo represents ctor inputMessagesFilterPhotoVideo#56e9f0e4 = MessagesFilter from Telegram
type TLInputMessagesFilterPhotoVideo struct {
}

func (o *TLInputMessagesFilterPhotoVideo) IsTLMessagesFilter() {}

func (o *TLInputMessagesFilterPhotoVideo) Cmd() uint32 {
	return TagInputMessagesFilterPhotoVideo
}

func (o *TLInputMessagesFilterPhotoVideo) ReadBareFrom(r *tl.Reader) {
}

func (o *TLInputMessagesFilterPhotoVideo) WriteBareTo(w *tl.Writer) {
}

func (o *TLInputMessagesFilterPhotoVideo) String() string {
	return tl.Pretty(o)
}

// TLInputMessagesFilterPhotoVideoDocuments represents ctor inputMessagesFilterPhotoVideoDocuments#d95e73bb = MessagesFilter from Telegram
type TLInputMessagesFilterPhotoVideoDocuments struct {
}

func (o *TLInputMessagesFilterPhotoVideoDocuments) IsTLMessagesFilter() {}

func (o *TLInputMessagesFilterPhotoVideoDocuments) Cmd() uint32 {
	return TagInputMessagesFilterPhotoVideoDocuments
}

func (o *TLInputMessagesFilterPhotoVideoDocuments) ReadBareFrom(r *tl.Reader) {
}

func (o *TLInputMessagesFilterPhotoVideoDocuments) WriteBareTo(w *tl.Writer) {
}

func (o *TLInputMessagesFilterPhotoVideoDocuments) String() string {
	return tl.Pretty(o)
}

// TLInputMessagesFilterDocument represents ctor inputMessagesFilterDocument#9eddf188 = MessagesFilter from Telegram
type TLInputMessagesFilterDocument struct {
}

func (o *TLInputMessagesFilterDocument) IsTLMessagesFilter() {}

func (o *TLInputMessagesFilterDocument) Cmd() uint32 {
	return TagInputMessagesFilterDocument
}

func (o *TLInputMessagesFilterDocument) ReadBareFrom(r *tl.Reader) {
}

func (o *TLInputMessagesFilterDocument) WriteBareTo(w *tl.Writer) {
}

func (o *TLInputMessagesFilterDocument) String() string {
	return tl.Pretty(o)
}

// TLInputMessagesFilterUrl represents ctor inputMessagesFilterUrl#7ef0dd87 = MessagesFilter from Telegram
type TLInputMessagesFilterUrl struct {
}

func (o *TLInputMessagesFilterUrl) IsTLMessagesFilter() {}

func (o *TLInputMessagesFilterUrl) Cmd() uint32 {
	return TagInputMessagesFilterUrl
}

func (o *TLInputMessagesFilterUrl) ReadBareFrom(r *tl.Reader) {
}

func (o *TLInputMessagesFilterUrl) WriteBareTo(w *tl.Writer) {
}

func (o *TLInputMessagesFilterUrl) String() string {
	return tl.Pretty(o)
}

// TLInputMessagesFilterGif represents ctor inputMessagesFilterGif#ffc86587 = MessagesFilter from Telegram
type TLInputMessagesFilterGif struct {
}

func (o *TLInputMessagesFilterGif) IsTLMessagesFilter() {}

func (o *TLInputMessagesFilterGif) Cmd() uint32 {
	return TagInputMessagesFilterGif
}

func (o *TLInputMessagesFilterGif) ReadBareFrom(r *tl.Reader) {
}

func (o *TLInputMessagesFilterGif) WriteBareTo(w *tl.Writer) {
}

func (o *TLInputMessagesFilterGif) String() string {
	return tl.Pretty(o)
}

// TLInputMessagesFilterVoice represents ctor inputMessagesFilterVoice#50f5c392 = MessagesFilter from Telegram
type TLInputMessagesFilterVoice struct {
}

func (o *TLInputMessagesFilterVoice) IsTLMessagesFilter() {}

func (o *TLInputMessagesFilterVoice) Cmd() uint32 {
	return TagInputMessagesFilterVoice
}

func (o *TLInputMessagesFilterVoice) ReadBareFrom(r *tl.Reader) {
}

func (o *TLInputMessagesFilterVoice) WriteBareTo(w *tl.Writer) {
}

func (o *TLInputMessagesFilterVoice) String() string {
	return tl.Pretty(o)
}

// TLInputMessagesFilterMusic represents ctor inputMessagesFilterMusic#3751b49e = MessagesFilter from Telegram
type TLInputMessagesFilterMusic struct {
}

func (o *TLInputMessagesFilterMusic) IsTLMessagesFilter() {}

func (o *TLInputMessagesFilterMusic) Cmd() uint32 {
	return TagInputMessagesFilterMusic
}

func (o *TLInputMessagesFilterMusic) ReadBareFrom(r *tl.Reader) {
}

func (o *TLInputMessagesFilterMusic) WriteBareTo(w *tl.Writer) {
}

func (o *TLInputMessagesFilterMusic) String() string {
	return tl.Pretty(o)
}

// TLInputMessagesFilterChatPhotos represents ctor inputMessagesFilterChatPhotos#3a20ecb8 = MessagesFilter from Telegram
type TLInputMessagesFilterChatPhotos struct {
}

func (o *TLInputMessagesFilterChatPhotos) IsTLMessagesFilter() {}

func (o *TLInputMessagesFilterChatPhotos) Cmd() uint32 {
	return TagInputMessagesFilterChatPhotos
}

func (o *TLInputMessagesFilterChatPhotos) ReadBareFrom(r *tl.Reader) {
}

func (o *TLInputMessagesFilterChatPhotos) WriteBareTo(w *tl.Writer) {
}

func (o *TLInputMessagesFilterChatPhotos) String() string {
	return tl.Pretty(o)
}

// TLInputMessagesFilterPhoneCalls represents ctor inputMessagesFilterPhoneCalls#80c99768 flags:# flags.0?missed:true = MessagesFilter from Telegram
type TLInputMessagesFilterPhoneCalls struct {
	Flags  uint // flags:#
	Missed bool // flags.0?missed:true
}

func (o *TLInputMessagesFilterPhoneCalls) IsTLMessagesFilter() {}

func (o *TLInputMessagesFilterPhoneCalls) Cmd() uint32 {
	return TagInputMessagesFilterPhoneCalls
}

func (o *TLInputMessagesFilterPhoneCalls) ReadBareFrom(r *tl.Reader) {
	o.Flags = uint(r.ReadUint32())
	o.Missed = true
}

func (o *TLInputMessagesFilterPhoneCalls) WriteBareTo(w *tl.Writer) {
	w.WriteUint32(uint32(o.Flags))
}

func (o *TLInputMessagesFilterPhoneCalls) String() string {
	return tl.Pretty(o)
}

// TLUpdateNewMessage represents ctor updateNewMessage#1f2b0afd message:Message pts:int pts_count:int = Update from Telegram
type TLUpdateNewMessage struct {
	Message  TLMessageType // message:Message
	Pts      int           // pts:int
	PtsCount int           // pts_count:int
}

func (o *TLUpdateNewMessage) IsTLUpdate() {}

func (o *TLUpdateNewMessage) Cmd() uint32 {
	return TagUpdateNewMessage
}

func (o *TLUpdateNewMessage) ReadBareFrom(r *tl.Reader) {
	o.Message = Schema.ReadLimitedBoxedObjectFrom(r, TagMessageEmpty, TagMessage, TagMessageService).(TLMessageType)
	o.Pts = r.ReadInt()
	o.PtsCount = r.ReadInt()
}

func (o *TLUpdateNewMessage) WriteBareTo(w *tl.Writer) {
	w.WriteCmd(o.Message.Cmd())
	o.Message.WriteBareTo(w)
	w.WriteInt(o.Pts)
	w.WriteInt(o.PtsCount)
}

func (o *TLUpdateNewMessage) String() string {
	return tl.Pretty(o)
}

// TLUpdateMessageID represents ctor updateMessageID#4e90bfd6 id:int random_id:long = Update from Telegram
type TLUpdateMessageID struct {
	ID       int    // id:int
	RandomID uint64 // random_id:long
}

func (o *TLUpdateMessageID) IsTLUpdate() {}

func (o *TLUpdateMessageID) Cmd() uint32 {
	return TagUpdateMessageID
}

func (o *TLUpdateMessageID) ReadBareFrom(r *tl.Reader) {
	o.ID = r.ReadInt()
	o.RandomID = r.ReadUint64()
}

func (o *TLUpdateMessageID) WriteBareTo(w *tl.Writer) {
	w.WriteInt(o.ID)
	w.WriteUint64(o.RandomID)
}

func (o *TLUpdateMessageID) String() string {
	return tl.Pretty(o)
}

// TLUpdateDeleteMessages represents ctor updateDeleteMessages#a20db0e5 messages:Vector<int> pts:int pts_count:int = Update from Telegram
type TLUpdateDeleteMessages struct {
	Messages []int // messages:Vector<int>
	Pts      int   // pts:int
	PtsCount int   // pts_count:int
}

func (o *TLUpdateDeleteMessages) IsTLUpdate() {}

func (o *TLUpdateDeleteMessages) Cmd() uint32 {
	return TagUpdateDeleteMessages
}

func (o *TLUpdateDeleteMessages) ReadBareFrom(r *tl.Reader) {
	if cmd := r.ReadCmd(); cmd != TagVector {
		r.Fail(errors.New("expected: vector"))
	}
	o.Messages = make([]int, r.ReadInt())
	for i := 0; i < len(o.Messages); i++ {
		o.Messages[i] = r.ReadInt()
	}
	o.Pts = r.ReadInt()
	o.PtsCount = r.ReadInt()
}

func (o *TLUpdateDeleteMessages) WriteBareTo(w *tl.Writer) {
	w.WriteCmd(TagVector)
	w.WriteInt(len(o.Messages))
	for i := 0; i < len(o.Messages); i++ {
		w.WriteInt(o.Messages[i])
	}
	w.WriteInt(o.Pts)
	w.WriteInt(o.PtsCount)
}

func (o *TLUpdateDeleteMessages) String() string {
	return tl.Pretty(o)
}

// TLUpdateUserTyping represents ctor updateUserTyping#5c486927 user_id:int action:SendMessageAction = Update from Telegram
type TLUpdateUserTyping struct {
	UserID int                     // user_id:int
	Action TLSendMessageActionType // action:SendMessageAction
}

func (o *TLUpdateUserTyping) IsTLUpdate() {}

func (o *TLUpdateUserTyping) Cmd() uint32 {
	return TagUpdateUserTyping
}

func (o *TLUpdateUserTyping) ReadBareFrom(r *tl.Reader) {
	o.UserID = r.ReadInt()
	o.Action = Schema.ReadLimitedBoxedObjectFrom(r, TagSendMessageTypingAction, TagSendMessageCancelAction, TagSendMessageRecordVideoAction, TagSendMessageUploadVideoAction, TagSendMessageRecordAudioAction, TagSendMessageUploadAudioAction, TagSendMessageUploadPhotoAction, TagSendMessageUploadDocumentAction, TagSendMessageGeoLocationAction, TagSendMessageChooseContactAction, TagSendMessageGamePlayAction).(TLSendMessageActionType)
}

func (o *TLUpdateUserTyping) WriteBareTo(w *tl.Writer) {
	w.WriteInt(o.UserID)
	w.WriteCmd(o.Action.Cmd())
	o.Action.WriteBareTo(w)
}

func (o *TLUpdateUserTyping) String() string {
	return tl.Pretty(o)
}

// TLUpdateChatUserTyping represents ctor updateChatUserTyping#9a65ea1f chat_id:int user_id:int action:SendMessageAction = Update from Telegram
type TLUpdateChatUserTyping struct {
	ChatID int                     // chat_id:int
	UserID int                     // user_id:int
	Action TLSendMessageActionType // action:SendMessageAction
}

func (o *TLUpdateChatUserTyping) IsTLUpdate() {}

func (o *TLUpdateChatUserTyping) Cmd() uint32 {
	return TagUpdateChatUserTyping
}

func (o *TLUpdateChatUserTyping) ReadBareFrom(r *tl.Reader) {
	o.ChatID = r.ReadInt()
	o.UserID = r.ReadInt()
	o.Action = Schema.ReadLimitedBoxedObjectFrom(r, TagSendMessageTypingAction, TagSendMessageCancelAction, TagSendMessageRecordVideoAction, TagSendMessageUploadVideoAction, TagSendMessageRecordAudioAction, TagSendMessageUploadAudioAction, TagSendMessageUploadPhotoAction, TagSendMessageUploadDocumentAction, TagSendMessageGeoLocationAction, TagSendMessageChooseContactAction, TagSendMessageGamePlayAction).(TLSendMessageActionType)
}

func (o *TLUpdateChatUserTyping) WriteBareTo(w *tl.Writer) {
	w.WriteInt(o.ChatID)
	w.WriteInt(o.UserID)
	w.WriteCmd(o.Action.Cmd())
	o.Action.WriteBareTo(w)
}

func (o *TLUpdateChatUserTyping) String() string {
	return tl.Pretty(o)
}

// TLUpdateChatParticipants represents ctor updateChatParticipants#07761198 participants:ChatParticipants = Update from Telegram
type TLUpdateChatParticipants struct {
	Participants TLChatParticipantsType // participants:ChatParticipants
}

func (o *TLUpdateChatParticipants) IsTLUpdate() {}

func (o *TLUpdateChatParticipants) Cmd() uint32 {
	return TagUpdateChatParticipants
}

func (o *TLUpdateChatParticipants) ReadBareFrom(r *tl.Reader) {
	o.Participants = Schema.ReadLimitedBoxedObjectFrom(r, TagChatParticipantsForbidden, TagChatParticipants).(TLChatParticipantsType)
}

func (o *TLUpdateChatParticipants) WriteBareTo(w *tl.Writer) {
	w.WriteCmd(o.Participants.Cmd())
	o.Participants.WriteBareTo(w)
}

func (o *TLUpdateChatParticipants) String() string {
	return tl.Pretty(o)
}

// TLUpdateUserStatus represents ctor updateUserStatus#1bfbd823 user_id:int status:UserStatus = Update from Telegram
type TLUpdateUserStatus struct {
	UserID int              // user_id:int
	Status TLUserStatusType // status:UserStatus
}

func (o *TLUpdateUserStatus) IsTLUpdate() {}

func (o *TLUpdateUserStatus) Cmd() uint32 {
	return TagUpdateUserStatus
}

func (o *TLUpdateUserStatus) ReadBareFrom(r *tl.Reader) {
	o.UserID = r.ReadInt()
	o.Status = Schema.ReadLimitedBoxedObjectFrom(r, TagUserStatusEmpty, TagUserStatusOnline, TagUserStatusOffline, TagUserStatusRecently, TagUserStatusLastWeek, TagUserStatusLastMonth).(TLUserStatusType)
}

func (o *TLUpdateUserStatus) WriteBareTo(w *tl.Writer) {
	w.WriteInt(o.UserID)
	w.WriteCmd(o.Status.Cmd())
	o.Status.WriteBareTo(w)
}

func (o *TLUpdateUserStatus) String() string {
	return tl.Pretty(o)
}

// TLUpdateUserName represents ctor updateUserName#a7332b73 user_id:int first_name:string last_name:string username:string = Update from Telegram
type TLUpdateUserName struct {
	UserID    int    // user_id:int
	FirstName string // first_name:string
	LastName  string // last_name:string
	Username  string // username:string
}

func (o *TLUpdateUserName) IsTLUpdate() {}

func (o *TLUpdateUserName) Cmd() uint32 {
	return TagUpdateUserName
}

func (o *TLUpdateUserName) ReadBareFrom(r *tl.Reader) {
	o.UserID = r.ReadInt()
	o.FirstName = r.ReadString()
	o.LastName = r.ReadString()
	o.Username = r.ReadString()
}

func (o *TLUpdateUserName) WriteBareTo(w *tl.Writer) {
	w.WriteInt(o.UserID)
	w.WriteString(o.FirstName)
	w.WriteString(o.LastName)
	w.WriteString(o.Username)
}

func (o *TLUpdateUserName) String() string {
	return tl.Pretty(o)
}

// TLUpdateUserPhoto represents ctor updateUserPhoto#95313b0c user_id:int date:int photo:UserProfilePhoto previous:Bool = Update from Telegram
type TLUpdateUserPhoto struct {
	UserID   int                    // user_id:int
	Date     int                    // date:int
	Photo    TLUserProfilePhotoType // photo:UserProfilePhoto
	Previous bool                   // previous:Bool
}

func (o *TLUpdateUserPhoto) IsTLUpdate() {}

func (o *TLUpdateUserPhoto) Cmd() uint32 {
	return TagUpdateUserPhoto
}

func (o *TLUpdateUserPhoto) ReadBareFrom(r *tl.Reader) {
	o.UserID = r.ReadInt()
	o.Date = r.ReadInt()
	o.Photo = Schema.ReadLimitedBoxedObjectFrom(r, TagUserProfilePhotoEmpty, TagUserProfilePhoto).(TLUserProfilePhotoType)
	r.ExpectCmd(TagBoolTrue, TagBoolFalse)
	o.Previous = (r.ReadCmd() == TagBoolTrue)
}

func (o *TLUpdateUserPhoto) WriteBareTo(w *tl.Writer) {
	w.WriteInt(o.UserID)
	w.WriteInt(o.Date)
	w.WriteCmd(o.Photo.Cmd())
	o.Photo.WriteBareTo(w)
	if o.Previous {
		w.WriteCmd(TagBoolTrue)
	} else {
		w.WriteCmd(TagBoolFalse)
	}
}

func (o *TLUpdateUserPhoto) String() string {
	return tl.Pretty(o)
}

// TLUpdateContactRegistered represents ctor updateContactRegistered#2575bbb9 user_id:int date:int = Update from Telegram
type TLUpdateContactRegistered struct {
	UserID int // user_id:int
	Date   int // date:int
}

func (o *TLUpdateContactRegistered) IsTLUpdate() {}

func (o *TLUpdateContactRegistered) Cmd() uint32 {
	return TagUpdateContactRegistered
}

func (o *TLUpdateContactRegistered) ReadBareFrom(r *tl.Reader) {
	o.UserID = r.ReadInt()
	o.Date = r.ReadInt()
}

func (o *TLUpdateContactRegistered) WriteBareTo(w *tl.Writer) {
	w.WriteInt(o.UserID)
	w.WriteInt(o.Date)
}

func (o *TLUpdateContactRegistered) String() string {
	return tl.Pretty(o)
}

// TLUpdateContactLink represents ctor updateContactLink#9d2e67c5 user_id:int my_link:ContactLink foreign_link:ContactLink = Update from Telegram
type TLUpdateContactLink struct {
	UserID      int               // user_id:int
	MyLink      TLContactLinkType // my_link:ContactLink
	ForeignLink TLContactLinkType // foreign_link:ContactLink
}

func (o *TLUpdateContactLink) IsTLUpdate() {}

func (o *TLUpdateContactLink) Cmd() uint32 {
	return TagUpdateContactLink
}

func (o *TLUpdateContactLink) ReadBareFrom(r *tl.Reader) {
	o.UserID = r.ReadInt()
	o.MyLink = Schema.ReadLimitedBoxedObjectFrom(r, TagContactLinkUnknown, TagContactLinkNone, TagContactLinkHasPhone, TagContactLinkContact).(TLContactLinkType)
	o.ForeignLink = Schema.ReadLimitedBoxedObjectFrom(r, TagContactLinkUnknown, TagContactLinkNone, TagContactLinkHasPhone, TagContactLinkContact).(TLContactLinkType)
}

func (o *TLUpdateContactLink) WriteBareTo(w *tl.Writer) {
	w.WriteInt(o.UserID)
	w.WriteCmd(o.MyLink.Cmd())
	o.MyLink.WriteBareTo(w)
	w.WriteCmd(o.ForeignLink.Cmd())
	o.ForeignLink.WriteBareTo(w)
}

func (o *TLUpdateContactLink) String() string {
	return tl.Pretty(o)
}

// TLUpdateNewEncryptedMessage represents ctor updateNewEncryptedMessage#12bcbd9a message:EncryptedMessage qts:int = Update from Telegram
type TLUpdateNewEncryptedMessage struct {
	Message TLEncryptedMessageType // message:EncryptedMessage
	Qts     int                    // qts:int
}

func (o *TLUpdateNewEncryptedMessage) IsTLUpdate() {}

func (o *TLUpdateNewEncryptedMessage) Cmd() uint32 {
	return TagUpdateNewEncryptedMessage
}

func (o *TLUpdateNewEncryptedMessage) ReadBareFrom(r *tl.Reader) {
	o.Message = Schema.ReadLimitedBoxedObjectFrom(r, TagEncryptedMessage, TagEncryptedMessageService).(TLEncryptedMessageType)
	o.Qts = r.ReadInt()
}

func (o *TLUpdateNewEncryptedMessage) WriteBareTo(w *tl.Writer) {
	w.WriteCmd(o.Message.Cmd())
	o.Message.WriteBareTo(w)
	w.WriteInt(o.Qts)
}

func (o *TLUpdateNewEncryptedMessage) String() string {
	return tl.Pretty(o)
}

// TLUpdateEncryptedChatTyping represents ctor updateEncryptedChatTyping#1710f156 chat_id:int = Update from Telegram
type TLUpdateEncryptedChatTyping struct {
	ChatID int // chat_id:int
}

func (o *TLUpdateEncryptedChatTyping) IsTLUpdate() {}

func (o *TLUpdateEncryptedChatTyping) Cmd() uint32 {
	return TagUpdateEncryptedChatTyping
}

func (o *TLUpdateEncryptedChatTyping) ReadBareFrom(r *tl.Reader) {
	o.ChatID = r.ReadInt()
}

func (o *TLUpdateEncryptedChatTyping) WriteBareTo(w *tl.Writer) {
	w.WriteInt(o.ChatID)
}

func (o *TLUpdateEncryptedChatTyping) String() string {
	return tl.Pretty(o)
}

// TLUpdateEncryption represents ctor updateEncryption#b4a2e88d chat:EncryptedChat date:int = Update from Telegram
type TLUpdateEncryption struct {
	Chat TLEncryptedChatType // chat:EncryptedChat
	Date int                 // date:int
}

func (o *TLUpdateEncryption) IsTLUpdate() {}

func (o *TLUpdateEncryption) Cmd() uint32 {
	return TagUpdateEncryption
}

func (o *TLUpdateEncryption) ReadBareFrom(r *tl.Reader) {
	o.Chat = Schema.ReadLimitedBoxedObjectFrom(r, TagEncryptedChatEmpty, TagEncryptedChatWaiting, TagEncryptedChatRequested, TagEncryptedChat, TagEncryptedChatDiscarded).(TLEncryptedChatType)
	o.Date = r.ReadInt()
}

func (o *TLUpdateEncryption) WriteBareTo(w *tl.Writer) {
	w.WriteCmd(o.Chat.Cmd())
	o.Chat.WriteBareTo(w)
	w.WriteInt(o.Date)
}

func (o *TLUpdateEncryption) String() string {
	return tl.Pretty(o)
}

// TLUpdateEncryptedMessagesRead represents ctor updateEncryptedMessagesRead#38fe25b7 chat_id:int max_date:int date:int = Update from Telegram
type TLUpdateEncryptedMessagesRead struct {
	ChatID  int // chat_id:int
	MaxDate int // max_date:int
	Date    int // date:int
}

func (o *TLUpdateEncryptedMessagesRead) IsTLUpdate() {}

func (o *TLUpdateEncryptedMessagesRead) Cmd() uint32 {
	return TagUpdateEncryptedMessagesRead
}

func (o *TLUpdateEncryptedMessagesRead) ReadBareFrom(r *tl.Reader) {
	o.ChatID = r.ReadInt()
	o.MaxDate = r.ReadInt()
	o.Date = r.ReadInt()
}

func (o *TLUpdateEncryptedMessagesRead) WriteBareTo(w *tl.Writer) {
	w.WriteInt(o.ChatID)
	w.WriteInt(o.MaxDate)
	w.WriteInt(o.Date)
}

func (o *TLUpdateEncryptedMessagesRead) String() string {
	return tl.Pretty(o)
}

// TLUpdateChatParticipantAdd represents ctor updateChatParticipantAdd#ea4b0e5c chat_id:int user_id:int inviter_id:int date:int version:int = Update from Telegram
type TLUpdateChatParticipantAdd struct {
	ChatID    int // chat_id:int
	UserID    int // user_id:int
	InviterID int // inviter_id:int
	Date      int // date:int
	Version   int // version:int
}

func (o *TLUpdateChatParticipantAdd) IsTLUpdate() {}

func (o *TLUpdateChatParticipantAdd) Cmd() uint32 {
	return TagUpdateChatParticipantAdd
}

func (o *TLUpdateChatParticipantAdd) ReadBareFrom(r *tl.Reader) {
	o.ChatID = r.ReadInt()
	o.UserID = r.ReadInt()
	o.InviterID = r.ReadInt()
	o.Date = r.ReadInt()
	o.Version = r.ReadInt()
}

func (o *TLUpdateChatParticipantAdd) WriteBareTo(w *tl.Writer) {
	w.WriteInt(o.ChatID)
	w.WriteInt(o.UserID)
	w.WriteInt(o.InviterID)
	w.WriteInt(o.Date)
	w.WriteInt(o.Version)
}

func (o *TLUpdateChatParticipantAdd) String() string {
	return tl.Pretty(o)
}

// TLUpdateChatParticipantDelete represents ctor updateChatParticipantDelete#6e5f8c22 chat_id:int user_id:int version:int = Update from Telegram
type TLUpdateChatParticipantDelete struct {
	ChatID  int // chat_id:int
	UserID  int // user_id:int
	Version int // version:int
}

func (o *TLUpdateChatParticipantDelete) IsTLUpdate() {}

func (o *TLUpdateChatParticipantDelete) Cmd() uint32 {
	return TagUpdateChatParticipantDelete
}

func (o *TLUpdateChatParticipantDelete) ReadBareFrom(r *tl.Reader) {
	o.ChatID = r.ReadInt()
	o.UserID = r.ReadInt()
	o.Version = r.ReadInt()
}

func (o *TLUpdateChatParticipantDelete) WriteBareTo(w *tl.Writer) {
	w.WriteInt(o.ChatID)
	w.WriteInt(o.UserID)
	w.WriteInt(o.Version)
}

func (o *TLUpdateChatParticipantDelete) String() string {
	return tl.Pretty(o)
}

// TLUpdateDCOptions represents ctor updateDcOptions#8e5e9873 dc_options:Vector<DcOption> = Update from Telegram
type TLUpdateDCOptions struct {
	DCOptions []*TLDCOption // dc_options:Vector<DcOption>
}

func (o *TLUpdateDCOptions) IsTLUpdate() {}

func (o *TLUpdateDCOptions) Cmd() uint32 {
	return TagUpdateDCOptions
}

func (o *TLUpdateDCOptions) ReadBareFrom(r *tl.Reader) {
	if cmd := r.ReadCmd(); cmd != TagVector {
		r.Fail(errors.New("expected: vector"))
	}
	o.DCOptions = make([]*TLDCOption, r.ReadInt())
	for i := 0; i < len(o.DCOptions); i++ {
		if cmd := r.ReadCmd(); cmd != TagDCOption {
			r.Fail(errors.New("expected: dcOption"))
		}
		o.DCOptions[i] = new(TLDCOption)
		o.DCOptions[i].ReadBareFrom(r)
	}
}

func (o *TLUpdateDCOptions) WriteBareTo(w *tl.Writer) {
	w.WriteCmd(TagVector)
	w.WriteInt(len(o.DCOptions))
	for i := 0; i < len(o.DCOptions); i++ {
		w.WriteCmd(TagDCOption)
		o.DCOptions[i].WriteBareTo(w)
	}
}

func (o *TLUpdateDCOptions) String() string {
	return tl.Pretty(o)
}

// TLUpdateUserBlocked represents ctor updateUserBlocked#80ece81a user_id:int blocked:Bool = Update from Telegram
type TLUpdateUserBlocked struct {
	UserID  int  // user_id:int
	Blocked bool // blocked:Bool
}

func (o *TLUpdateUserBlocked) IsTLUpdate() {}

func (o *TLUpdateUserBlocked) Cmd() uint32 {
	return TagUpdateUserBlocked
}

func (o *TLUpdateUserBlocked) ReadBareFrom(r *tl.Reader) {
	o.UserID = r.ReadInt()
	r.ExpectCmd(TagBoolTrue, TagBoolFalse)
	o.Blocked = (r.ReadCmd() == TagBoolTrue)
}

func (o *TLUpdateUserBlocked) WriteBareTo(w *tl.Writer) {
	w.WriteInt(o.UserID)
	if o.Blocked {
		w.WriteCmd(TagBoolTrue)
	} else {
		w.WriteCmd(TagBoolFalse)
	}
}

func (o *TLUpdateUserBlocked) String() string {
	return tl.Pretty(o)
}

// TLUpdateNotifySettings represents ctor updateNotifySettings#bec268ef peer:NotifyPeer notify_settings:PeerNotifySettings = Update from Telegram
type TLUpdateNotifySettings struct {
	Peer           TLNotifyPeerType         // peer:NotifyPeer
	NotifySettings TLPeerNotifySettingsType // notify_settings:PeerNotifySettings
}

func (o *TLUpdateNotifySettings) IsTLUpdate() {}

func (o *TLUpdateNotifySettings) Cmd() uint32 {
	return TagUpdateNotifySettings
}

func (o *TLUpdateNotifySettings) ReadBareFrom(r *tl.Reader) {
	o.Peer = Schema.ReadLimitedBoxedObjectFrom(r, TagNotifyPeer, TagNotifyUsers, TagNotifyChats, TagNotifyAll).(TLNotifyPeerType)
	o.NotifySettings = Schema.ReadLimitedBoxedObjectFrom(r, TagPeerNotifySettingsEmpty, TagPeerNotifySettings).(TLPeerNotifySettingsType)
}

func (o *TLUpdateNotifySettings) WriteBareTo(w *tl.Writer) {
	w.WriteCmd(o.Peer.Cmd())
	o.Peer.WriteBareTo(w)
	w.WriteCmd(o.NotifySettings.Cmd())
	o.NotifySettings.WriteBareTo(w)
}

func (o *TLUpdateNotifySettings) String() string {
	return tl.Pretty(o)
}

// TLUpdateServiceNotification represents ctor updateServiceNotification#ebe46819 flags:# flags.0?popup:true flags.1?inbox_date:int type:string message:string media:MessageMedia entities:Vector<MessageEntity> = Update from Telegram
type TLUpdateServiceNotification struct {
	Flags     uint                  // flags:#
	Popup     bool                  // flags.0?popup:true
	InboxDate int                   // flags.1?inbox_date:int
	Type      string                // type:string
	Message   string                // message:string
	Media     TLMessageMediaType    // media:MessageMedia
	Entities  []TLMessageEntityType // entities:Vector<MessageEntity>
}

func (o *TLUpdateServiceNotification) IsTLUpdate() {}

func (o *TLUpdateServiceNotification) Cmd() uint32 {
	return TagUpdateServiceNotification
}

func (o *TLUpdateServiceNotification) ReadBareFrom(r *tl.Reader) {
	o.Flags = uint(r.ReadUint32())
	o.Popup = true
	o.InboxDate = r.ReadInt()
	o.Type = r.ReadString()
	o.Message = r.ReadString()
	o.Media = Schema.ReadLimitedBoxedObjectFrom(r, TagMessageMediaEmpty, TagMessageMediaPhoto, TagMessageMediaGeo, TagMessageMediaContact, TagMessageMediaUnsupported, TagMessageMediaDocument, TagMessageMediaWebPage, TagMessageMediaVenue, TagMessageMediaGame, TagMessageMediaInvoice).(TLMessageMediaType)
	if cmd := r.ReadCmd(); cmd != TagVector {
		r.Fail(errors.New("expected: vector"))
	}
	o.Entities = make([]TLMessageEntityType, r.ReadInt())
	for i := 0; i < len(o.Entities); i++ {
		o.Entities[i] = Schema.ReadLimitedBoxedObjectFrom(r, TagMessageEntityUnknown, TagMessageEntityMention, TagMessageEntityHashtag, TagMessageEntityBotCommand, TagMessageEntityUrl, TagMessageEntityEmail, TagMessageEntityBold, TagMessageEntityItalic, TagMessageEntityCode, TagMessageEntityPre, TagMessageEntityTextUrl, TagMessageEntityMentionName, TagInputMessageEntityMentionName).(TLMessageEntityType)
	}
}

func (o *TLUpdateServiceNotification) WriteBareTo(w *tl.Writer) {
	w.WriteUint32(uint32(o.Flags))
	w.WriteInt(o.InboxDate)
	w.WriteString(o.Type)
	w.WriteString(o.Message)
	w.WriteCmd(o.Media.Cmd())
	o.Media.WriteBareTo(w)
	w.WriteCmd(TagVector)
	w.WriteInt(len(o.Entities))
	for i := 0; i < len(o.Entities); i++ {
		w.WriteCmd(o.Entities[i].Cmd())
		o.Entities[i].WriteBareTo(w)
	}
}

func (o *TLUpdateServiceNotification) String() string {
	return tl.Pretty(o)
}

// TLUpdatePrivacy represents ctor updatePrivacy#ee3b272a key:PrivacyKey rules:Vector<PrivacyRule> = Update from Telegram
type TLUpdatePrivacy struct {
	Key   TLPrivacyKeyType    // key:PrivacyKey
	Rules []TLPrivacyRuleType // rules:Vector<PrivacyRule>
}

func (o *TLUpdatePrivacy) IsTLUpdate() {}

func (o *TLUpdatePrivacy) Cmd() uint32 {
	return TagUpdatePrivacy
}

func (o *TLUpdatePrivacy) ReadBareFrom(r *tl.Reader) {
	o.Key = Schema.ReadLimitedBoxedObjectFrom(r, TagPrivacyKeyStatusTimestamp, TagPrivacyKeyChatInvite, TagPrivacyKeyPhoneCall).(TLPrivacyKeyType)
	if cmd := r.ReadCmd(); cmd != TagVector {
		r.Fail(errors.New("expected: vector"))
	}
	o.Rules = make([]TLPrivacyRuleType, r.ReadInt())
	for i := 0; i < len(o.Rules); i++ {
		o.Rules[i] = Schema.ReadLimitedBoxedObjectFrom(r, TagPrivacyValueAllowContacts, TagPrivacyValueAllowAll, TagPrivacyValueAllowUsers, TagPrivacyValueDisallowContacts, TagPrivacyValueDisallowAll, TagPrivacyValueDisallowUsers).(TLPrivacyRuleType)
	}
}

func (o *TLUpdatePrivacy) WriteBareTo(w *tl.Writer) {
	w.WriteCmd(o.Key.Cmd())
	o.Key.WriteBareTo(w)
	w.WriteCmd(TagVector)
	w.WriteInt(len(o.Rules))
	for i := 0; i < len(o.Rules); i++ {
		w.WriteCmd(o.Rules[i].Cmd())
		o.Rules[i].WriteBareTo(w)
	}
}

func (o *TLUpdatePrivacy) String() string {
	return tl.Pretty(o)
}

// TLUpdateUserPhone represents ctor updateUserPhone#12b9417b user_id:int phone:string = Update from Telegram
type TLUpdateUserPhone struct {
	UserID int    // user_id:int
	Phone  string // phone:string
}

func (o *TLUpdateUserPhone) IsTLUpdate() {}

func (o *TLUpdateUserPhone) Cmd() uint32 {
	return TagUpdateUserPhone
}

func (o *TLUpdateUserPhone) ReadBareFrom(r *tl.Reader) {
	o.UserID = r.ReadInt()
	o.Phone = r.ReadString()
}

func (o *TLUpdateUserPhone) WriteBareTo(w *tl.Writer) {
	w.WriteInt(o.UserID)
	w.WriteString(o.Phone)
}

func (o *TLUpdateUserPhone) String() string {
	return tl.Pretty(o)
}

// TLUpdateReadHistoryInbox represents ctor updateReadHistoryInbox#9961fd5c peer:Peer max_id:int pts:int pts_count:int = Update from Telegram
type TLUpdateReadHistoryInbox struct {
	Peer     TLPeerType // peer:Peer
	MaxID    int        // max_id:int
	Pts      int        // pts:int
	PtsCount int        // pts_count:int
}

func (o *TLUpdateReadHistoryInbox) IsTLUpdate() {}

func (o *TLUpdateReadHistoryInbox) Cmd() uint32 {
	return TagUpdateReadHistoryInbox
}

func (o *TLUpdateReadHistoryInbox) ReadBareFrom(r *tl.Reader) {
	o.Peer = Schema.ReadLimitedBoxedObjectFrom(r, TagPeerUser, TagPeerChat, TagPeerChannel).(TLPeerType)
	o.MaxID = r.ReadInt()
	o.Pts = r.ReadInt()
	o.PtsCount = r.ReadInt()
}

func (o *TLUpdateReadHistoryInbox) WriteBareTo(w *tl.Writer) {
	w.WriteCmd(o.Peer.Cmd())
	o.Peer.WriteBareTo(w)
	w.WriteInt(o.MaxID)
	w.WriteInt(o.Pts)
	w.WriteInt(o.PtsCount)
}

func (o *TLUpdateReadHistoryInbox) String() string {
	return tl.Pretty(o)
}

// TLUpdateReadHistoryOutbox represents ctor updateReadHistoryOutbox#2f2f21bf peer:Peer max_id:int pts:int pts_count:int = Update from Telegram
type TLUpdateReadHistoryOutbox struct {
	Peer     TLPeerType // peer:Peer
	MaxID    int        // max_id:int
	Pts      int        // pts:int
	PtsCount int        // pts_count:int
}

func (o *TLUpdateReadHistoryOutbox) IsTLUpdate() {}

func (o *TLUpdateReadHistoryOutbox) Cmd() uint32 {
	return TagUpdateReadHistoryOutbox
}

func (o *TLUpdateReadHistoryOutbox) ReadBareFrom(r *tl.Reader) {
	o.Peer = Schema.ReadLimitedBoxedObjectFrom(r, TagPeerUser, TagPeerChat, TagPeerChannel).(TLPeerType)
	o.MaxID = r.ReadInt()
	o.Pts = r.ReadInt()
	o.PtsCount = r.ReadInt()
}

func (o *TLUpdateReadHistoryOutbox) WriteBareTo(w *tl.Writer) {
	w.WriteCmd(o.Peer.Cmd())
	o.Peer.WriteBareTo(w)
	w.WriteInt(o.MaxID)
	w.WriteInt(o.Pts)
	w.WriteInt(o.PtsCount)
}

func (o *TLUpdateReadHistoryOutbox) String() string {
	return tl.Pretty(o)
}

// TLUpdateWebPage represents ctor updateWebPage#7f891213 webpage:WebPage pts:int pts_count:int = Update from Telegram
type TLUpdateWebPage struct {
	Webpage  TLWebPageType // webpage:WebPage
	Pts      int           // pts:int
	PtsCount int           // pts_count:int
}

func (o *TLUpdateWebPage) IsTLUpdate() {}

func (o *TLUpdateWebPage) Cmd() uint32 {
	return TagUpdateWebPage
}

func (o *TLUpdateWebPage) ReadBareFrom(r *tl.Reader) {
	o.Webpage = Schema.ReadLimitedBoxedObjectFrom(r, TagWebPageEmpty, TagWebPagePending, TagWebPage, TagWebPageNotModified).(TLWebPageType)
	o.Pts = r.ReadInt()
	o.PtsCount = r.ReadInt()
}

func (o *TLUpdateWebPage) WriteBareTo(w *tl.Writer) {
	w.WriteCmd(o.Webpage.Cmd())
	o.Webpage.WriteBareTo(w)
	w.WriteInt(o.Pts)
	w.WriteInt(o.PtsCount)
}

func (o *TLUpdateWebPage) String() string {
	return tl.Pretty(o)
}

// TLUpdateReadMessagesContents represents ctor updateReadMessagesContents#68c13933 messages:Vector<int> pts:int pts_count:int = Update from Telegram
type TLUpdateReadMessagesContents struct {
	Messages []int // messages:Vector<int>
	Pts      int   // pts:int
	PtsCount int   // pts_count:int
}

func (o *TLUpdateReadMessagesContents) IsTLUpdate() {}

func (o *TLUpdateReadMessagesContents) Cmd() uint32 {
	return TagUpdateReadMessagesContents
}

func (o *TLUpdateReadMessagesContents) ReadBareFrom(r *tl.Reader) {
	if cmd := r.ReadCmd(); cmd != TagVector {
		r.Fail(errors.New("expected: vector"))
	}
	o.Messages = make([]int, r.ReadInt())
	for i := 0; i < len(o.Messages); i++ {
		o.Messages[i] = r.ReadInt()
	}
	o.Pts = r.ReadInt()
	o.PtsCount = r.ReadInt()
}

func (o *TLUpdateReadMessagesContents) WriteBareTo(w *tl.Writer) {
	w.WriteCmd(TagVector)
	w.WriteInt(len(o.Messages))
	for i := 0; i < len(o.Messages); i++ {
		w.WriteInt(o.Messages[i])
	}
	w.WriteInt(o.Pts)
	w.WriteInt(o.PtsCount)
}

func (o *TLUpdateReadMessagesContents) String() string {
	return tl.Pretty(o)
}

// TLUpdateChannelTooLong represents ctor updateChannelTooLong#eb0467fb flags:# channel_id:int flags.0?pts:int = Update from Telegram
type TLUpdateChannelTooLong struct {
	Flags     uint // flags:#
	ChannelID int  // channel_id:int
	Pts       int  // flags.0?pts:int
}

func (o *TLUpdateChannelTooLong) IsTLUpdate() {}

func (o *TLUpdateChannelTooLong) Cmd() uint32 {
	return TagUpdateChannelTooLong
}

func (o *TLUpdateChannelTooLong) ReadBareFrom(r *tl.Reader) {
	o.Flags = uint(r.ReadUint32())
	o.ChannelID = r.ReadInt()
	o.Pts = r.ReadInt()
}

func (o *TLUpdateChannelTooLong) WriteBareTo(w *tl.Writer) {
	w.WriteUint32(uint32(o.Flags))
	w.WriteInt(o.ChannelID)
	w.WriteInt(o.Pts)
}

func (o *TLUpdateChannelTooLong) String() string {
	return tl.Pretty(o)
}

// TLUpdateChannel represents ctor updateChannel#b6d45656 channel_id:int = Update from Telegram
type TLUpdateChannel struct {
	ChannelID int // channel_id:int
}

func (o *TLUpdateChannel) IsTLUpdate() {}

func (o *TLUpdateChannel) Cmd() uint32 {
	return TagUpdateChannel
}

func (o *TLUpdateChannel) ReadBareFrom(r *tl.Reader) {
	o.ChannelID = r.ReadInt()
}

func (o *TLUpdateChannel) WriteBareTo(w *tl.Writer) {
	w.WriteInt(o.ChannelID)
}

func (o *TLUpdateChannel) String() string {
	return tl.Pretty(o)
}

// TLUpdateNewChannelMessage represents ctor updateNewChannelMessage#62ba04d9 message:Message pts:int pts_count:int = Update from Telegram
type TLUpdateNewChannelMessage struct {
	Message  TLMessageType // message:Message
	Pts      int           // pts:int
	PtsCount int           // pts_count:int
}

func (o *TLUpdateNewChannelMessage) IsTLUpdate() {}

func (o *TLUpdateNewChannelMessage) Cmd() uint32 {
	return TagUpdateNewChannelMessage
}

func (o *TLUpdateNewChannelMessage) ReadBareFrom(r *tl.Reader) {
	o.Message = Schema.ReadLimitedBoxedObjectFrom(r, TagMessageEmpty, TagMessage, TagMessageService).(TLMessageType)
	o.Pts = r.ReadInt()
	o.PtsCount = r.ReadInt()
}

func (o *TLUpdateNewChannelMessage) WriteBareTo(w *tl.Writer) {
	w.WriteCmd(o.Message.Cmd())
	o.Message.WriteBareTo(w)
	w.WriteInt(o.Pts)
	w.WriteInt(o.PtsCount)
}

func (o *TLUpdateNewChannelMessage) String() string {
	return tl.Pretty(o)
}

// TLUpdateReadChannelInbox represents ctor updateReadChannelInbox#4214f37f channel_id:int max_id:int = Update from Telegram
type TLUpdateReadChannelInbox struct {
	ChannelID int // channel_id:int
	MaxID     int // max_id:int
}

func (o *TLUpdateReadChannelInbox) IsTLUpdate() {}

func (o *TLUpdateReadChannelInbox) Cmd() uint32 {
	return TagUpdateReadChannelInbox
}

func (o *TLUpdateReadChannelInbox) ReadBareFrom(r *tl.Reader) {
	o.ChannelID = r.ReadInt()
	o.MaxID = r.ReadInt()
}

func (o *TLUpdateReadChannelInbox) WriteBareTo(w *tl.Writer) {
	w.WriteInt(o.ChannelID)
	w.WriteInt(o.MaxID)
}

func (o *TLUpdateReadChannelInbox) String() string {
	return tl.Pretty(o)
}

// TLUpdateDeleteChannelMessages represents ctor updateDeleteChannelMessages#c37521c9 channel_id:int messages:Vector<int> pts:int pts_count:int = Update from Telegram
type TLUpdateDeleteChannelMessages struct {
	ChannelID int   // channel_id:int
	Messages  []int // messages:Vector<int>
	Pts       int   // pts:int
	PtsCount  int   // pts_count:int
}

func (o *TLUpdateDeleteChannelMessages) IsTLUpdate() {}

func (o *TLUpdateDeleteChannelMessages) Cmd() uint32 {
	return TagUpdateDeleteChannelMessages
}

func (o *TLUpdateDeleteChannelMessages) ReadBareFrom(r *tl.Reader) {
	o.ChannelID = r.ReadInt()
	if cmd := r.ReadCmd(); cmd != TagVector {
		r.Fail(errors.New("expected: vector"))
	}
	o.Messages = make([]int, r.ReadInt())
	for i := 0; i < len(o.Messages); i++ {
		o.Messages[i] = r.ReadInt()
	}
	o.Pts = r.ReadInt()
	o.PtsCount = r.ReadInt()
}

func (o *TLUpdateDeleteChannelMessages) WriteBareTo(w *tl.Writer) {
	w.WriteInt(o.ChannelID)
	w.WriteCmd(TagVector)
	w.WriteInt(len(o.Messages))
	for i := 0; i < len(o.Messages); i++ {
		w.WriteInt(o.Messages[i])
	}
	w.WriteInt(o.Pts)
	w.WriteInt(o.PtsCount)
}

func (o *TLUpdateDeleteChannelMessages) String() string {
	return tl.Pretty(o)
}

// TLUpdateChannelMessageViews represents ctor updateChannelMessageViews#98a12b4b channel_id:int id:int views:int = Update from Telegram
type TLUpdateChannelMessageViews struct {
	ChannelID int // channel_id:int
	ID        int // id:int
	Views     int // views:int
}

func (o *TLUpdateChannelMessageViews) IsTLUpdate() {}

func (o *TLUpdateChannelMessageViews) Cmd() uint32 {
	return TagUpdateChannelMessageViews
}

func (o *TLUpdateChannelMessageViews) ReadBareFrom(r *tl.Reader) {
	o.ChannelID = r.ReadInt()
	o.ID = r.ReadInt()
	o.Views = r.ReadInt()
}

func (o *TLUpdateChannelMessageViews) WriteBareTo(w *tl.Writer) {
	w.WriteInt(o.ChannelID)
	w.WriteInt(o.ID)
	w.WriteInt(o.Views)
}

func (o *TLUpdateChannelMessageViews) String() string {
	return tl.Pretty(o)
}

// TLUpdateChatAdmins represents ctor updateChatAdmins#6e947941 chat_id:int enabled:Bool version:int = Update from Telegram
type TLUpdateChatAdmins struct {
	ChatID  int  // chat_id:int
	Enabled bool // enabled:Bool
	Version int  // version:int
}

func (o *TLUpdateChatAdmins) IsTLUpdate() {}

func (o *TLUpdateChatAdmins) Cmd() uint32 {
	return TagUpdateChatAdmins
}

func (o *TLUpdateChatAdmins) ReadBareFrom(r *tl.Reader) {
	o.ChatID = r.ReadInt()
	r.ExpectCmd(TagBoolTrue, TagBoolFalse)
	o.Enabled = (r.ReadCmd() == TagBoolTrue)
	o.Version = r.ReadInt()
}

func (o *TLUpdateChatAdmins) WriteBareTo(w *tl.Writer) {
	w.WriteInt(o.ChatID)
	if o.Enabled {
		w.WriteCmd(TagBoolTrue)
	} else {
		w.WriteCmd(TagBoolFalse)
	}
	w.WriteInt(o.Version)
}

func (o *TLUpdateChatAdmins) String() string {
	return tl.Pretty(o)
}

// TLUpdateChatParticipantAdmin represents ctor updateChatParticipantAdmin#b6901959 chat_id:int user_id:int is_admin:Bool version:int = Update from Telegram
type TLUpdateChatParticipantAdmin struct {
	ChatID  int  // chat_id:int
	UserID  int  // user_id:int
	IsAdmin bool // is_admin:Bool
	Version int  // version:int
}

func (o *TLUpdateChatParticipantAdmin) IsTLUpdate() {}

func (o *TLUpdateChatParticipantAdmin) Cmd() uint32 {
	return TagUpdateChatParticipantAdmin
}

func (o *TLUpdateChatParticipantAdmin) ReadBareFrom(r *tl.Reader) {
	o.ChatID = r.ReadInt()
	o.UserID = r.ReadInt()
	r.ExpectCmd(TagBoolTrue, TagBoolFalse)
	o.IsAdmin = (r.ReadCmd() == TagBoolTrue)
	o.Version = r.ReadInt()
}

func (o *TLUpdateChatParticipantAdmin) WriteBareTo(w *tl.Writer) {
	w.WriteInt(o.ChatID)
	w.WriteInt(o.UserID)
	if o.IsAdmin {
		w.WriteCmd(TagBoolTrue)
	} else {
		w.WriteCmd(TagBoolFalse)
	}
	w.WriteInt(o.Version)
}

func (o *TLUpdateChatParticipantAdmin) String() string {
	return tl.Pretty(o)
}

// TLUpdateNewStickerSet represents ctor updateNewStickerSet#688a30aa stickerset:messages.StickerSet = Update from Telegram
type TLUpdateNewStickerSet struct {
	Stickerset *TLMessagesStickerSet // stickerset:messages.StickerSet
}

func (o *TLUpdateNewStickerSet) IsTLUpdate() {}

func (o *TLUpdateNewStickerSet) Cmd() uint32 {
	return TagUpdateNewStickerSet
}

func (o *TLUpdateNewStickerSet) ReadBareFrom(r *tl.Reader) {
	if cmd := r.ReadCmd(); cmd != TagMessagesStickerSet {
		r.Fail(errors.New("expected: messages.stickerSet"))
	}
	o.Stickerset = new(TLMessagesStickerSet)
	o.Stickerset.ReadBareFrom(r)
}

func (o *TLUpdateNewStickerSet) WriteBareTo(w *tl.Writer) {
	w.WriteCmd(TagMessagesStickerSet)
	o.Stickerset.WriteBareTo(w)
}

func (o *TLUpdateNewStickerSet) String() string {
	return tl.Pretty(o)
}

// TLUpdateStickerSetsOrder represents ctor updateStickerSetsOrder#0bb2d201 flags:# flags.0?masks:true order:Vector<long> = Update from Telegram
type TLUpdateStickerSetsOrder struct {
	Flags uint     // flags:#
	Masks bool     // flags.0?masks:true
	Order []uint64 // order:Vector<long>
}

func (o *TLUpdateStickerSetsOrder) IsTLUpdate() {}

func (o *TLUpdateStickerSetsOrder) Cmd() uint32 {
	return TagUpdateStickerSetsOrder
}

func (o *TLUpdateStickerSetsOrder) ReadBareFrom(r *tl.Reader) {
	o.Flags = uint(r.ReadUint32())
	o.Masks = true
	if cmd := r.ReadCmd(); cmd != TagVector {
		r.Fail(errors.New("expected: vector"))
	}
	o.Order = make([]uint64, r.ReadInt())
	for i := 0; i < len(o.Order); i++ {
		o.Order[i] = r.ReadUint64()
	}
}

func (o *TLUpdateStickerSetsOrder) WriteBareTo(w *tl.Writer) {
	w.WriteUint32(uint32(o.Flags))
	w.WriteCmd(TagVector)
	w.WriteInt(len(o.Order))
	for i := 0; i < len(o.Order); i++ {
		w.WriteUint64(o.Order[i])
	}
}

func (o *TLUpdateStickerSetsOrder) String() string {
	return tl.Pretty(o)
}

// TLUpdateStickerSets represents ctor updateStickerSets#43ae3dec = Update from Telegram
type TLUpdateStickerSets struct {
}

func (o *TLUpdateStickerSets) IsTLUpdate() {}

func (o *TLUpdateStickerSets) Cmd() uint32 {
	return TagUpdateStickerSets
}

func (o *TLUpdateStickerSets) ReadBareFrom(r *tl.Reader) {
}

func (o *TLUpdateStickerSets) WriteBareTo(w *tl.Writer) {
}

func (o *TLUpdateStickerSets) String() string {
	return tl.Pretty(o)
}

// TLUpdateSavedGifs represents ctor updateSavedGifs#9375341e = Update from Telegram
type TLUpdateSavedGifs struct {
}

func (o *TLUpdateSavedGifs) IsTLUpdate() {}

func (o *TLUpdateSavedGifs) Cmd() uint32 {
	return TagUpdateSavedGifs
}

func (o *TLUpdateSavedGifs) ReadBareFrom(r *tl.Reader) {
}

func (o *TLUpdateSavedGifs) WriteBareTo(w *tl.Writer) {
}

func (o *TLUpdateSavedGifs) String() string {
	return tl.Pretty(o)
}

// TLUpdateBotInlineQuery represents ctor updateBotInlineQuery#54826690 flags:# query_id:long user_id:int query:string flags.0?geo:GeoPoint offset:string = Update from Telegram
type TLUpdateBotInlineQuery struct {
	Flags   uint           // flags:#
	QueryID uint64         // query_id:long
	UserID  int            // user_id:int
	Query   string         // query:string
	Geo     TLGeoPointType // flags.0?geo:GeoPoint
	Offset  string         // offset:string
}

func (o *TLUpdateBotInlineQuery) IsTLUpdate() {}

func (o *TLUpdateBotInlineQuery) Cmd() uint32 {
	return TagUpdateBotInlineQuery
}

func (o *TLUpdateBotInlineQuery) ReadBareFrom(r *tl.Reader) {
	o.Flags = uint(r.ReadUint32())
	o.QueryID = r.ReadUint64()
	o.UserID = r.ReadInt()
	o.Query = r.ReadString()
	o.Geo = Schema.ReadLimitedBoxedObjectFrom(r, TagGeoPointEmpty, TagGeoPoint).(TLGeoPointType)
	o.Offset = r.ReadString()
}

func (o *TLUpdateBotInlineQuery) WriteBareTo(w *tl.Writer) {
	w.WriteUint32(uint32(o.Flags))
	w.WriteUint64(o.QueryID)
	w.WriteInt(o.UserID)
	w.WriteString(o.Query)
	w.WriteCmd(o.Geo.Cmd())
	o.Geo.WriteBareTo(w)
	w.WriteString(o.Offset)
}

func (o *TLUpdateBotInlineQuery) String() string {
	return tl.Pretty(o)
}

// TLUpdateBotInlineSend represents ctor updateBotInlineSend#0e48f964 flags:# user_id:int query:string flags.0?geo:GeoPoint id:string flags.1?msg_id:InputBotInlineMessageID = Update from Telegram
type TLUpdateBotInlineSend struct {
	Flags  uint                       // flags:#
	UserID int                        // user_id:int
	Query  string                     // query:string
	Geo    TLGeoPointType             // flags.0?geo:GeoPoint
	ID     string                     // id:string
	MsgID  *TLInputBotInlineMessageID // flags.1?msg_id:InputBotInlineMessageID
}

func (o *TLUpdateBotInlineSend) IsTLUpdate() {}

func (o *TLUpdateBotInlineSend) Cmd() uint32 {
	return TagUpdateBotInlineSend
}

func (o *TLUpdateBotInlineSend) ReadBareFrom(r *tl.Reader) {
	o.Flags = uint(r.ReadUint32())
	o.UserID = r.ReadInt()
	o.Query = r.ReadString()
	o.Geo = Schema.ReadLimitedBoxedObjectFrom(r, TagGeoPointEmpty, TagGeoPoint).(TLGeoPointType)
	o.ID = r.ReadString()
	if cmd := r.ReadCmd(); cmd != TagInputBotInlineMessageID {
		r.Fail(errors.New("expected: inputBotInlineMessageID"))
	}
	o.MsgID = new(TLInputBotInlineMessageID)
	o.MsgID.ReadBareFrom(r)
}

func (o *TLUpdateBotInlineSend) WriteBareTo(w *tl.Writer) {
	w.WriteUint32(uint32(o.Flags))
	w.WriteInt(o.UserID)
	w.WriteString(o.Query)
	w.WriteCmd(o.Geo.Cmd())
	o.Geo.WriteBareTo(w)
	w.WriteString(o.ID)
	w.WriteCmd(TagInputBotInlineMessageID)
	o.MsgID.WriteBareTo(w)
}

func (o *TLUpdateBotInlineSend) String() string {
	return tl.Pretty(o)
}

// TLUpdateEditChannelMessage represents ctor updateEditChannelMessage#1b3f4df7 message:Message pts:int pts_count:int = Update from Telegram
type TLUpdateEditChannelMessage struct {
	Message  TLMessageType // message:Message
	Pts      int           // pts:int
	PtsCount int           // pts_count:int
}

func (o *TLUpdateEditChannelMessage) IsTLUpdate() {}

func (o *TLUpdateEditChannelMessage) Cmd() uint32 {
	return TagUpdateEditChannelMessage
}

func (o *TLUpdateEditChannelMessage) ReadBareFrom(r *tl.Reader) {
	o.Message = Schema.ReadLimitedBoxedObjectFrom(r, TagMessageEmpty, TagMessage, TagMessageService).(TLMessageType)
	o.Pts = r.ReadInt()
	o.PtsCount = r.ReadInt()
}

func (o *TLUpdateEditChannelMessage) WriteBareTo(w *tl.Writer) {
	w.WriteCmd(o.Message.Cmd())
	o.Message.WriteBareTo(w)
	w.WriteInt(o.Pts)
	w.WriteInt(o.PtsCount)
}

func (o *TLUpdateEditChannelMessage) String() string {
	return tl.Pretty(o)
}

// TLUpdateChannelPinnedMessage represents ctor updateChannelPinnedMessage#98592475 channel_id:int id:int = Update from Telegram
type TLUpdateChannelPinnedMessage struct {
	ChannelID int // channel_id:int
	ID        int // id:int
}

func (o *TLUpdateChannelPinnedMessage) IsTLUpdate() {}

func (o *TLUpdateChannelPinnedMessage) Cmd() uint32 {
	return TagUpdateChannelPinnedMessage
}

func (o *TLUpdateChannelPinnedMessage) ReadBareFrom(r *tl.Reader) {
	o.ChannelID = r.ReadInt()
	o.ID = r.ReadInt()
}

func (o *TLUpdateChannelPinnedMessage) WriteBareTo(w *tl.Writer) {
	w.WriteInt(o.ChannelID)
	w.WriteInt(o.ID)
}

func (o *TLUpdateChannelPinnedMessage) String() string {
	return tl.Pretty(o)
}

// TLUpdateBotCallbackQuery represents ctor updateBotCallbackQuery#e73547e1 flags:# query_id:long user_id:int peer:Peer msg_id:int chat_instance:long flags.0?data:bytes flags.1?game_short_name:string = Update from Telegram
type TLUpdateBotCallbackQuery struct {
	Flags         uint       // flags:#
	QueryID       uint64     // query_id:long
	UserID        int        // user_id:int
	Peer          TLPeerType // peer:Peer
	MsgID         int        // msg_id:int
	ChatInstance  uint64     // chat_instance:long
	Data          []byte     // flags.0?data:bytes
	GameShortName string     // flags.1?game_short_name:string
}

func (o *TLUpdateBotCallbackQuery) IsTLUpdate() {}

func (o *TLUpdateBotCallbackQuery) Cmd() uint32 {
	return TagUpdateBotCallbackQuery
}

func (o *TLUpdateBotCallbackQuery) ReadBareFrom(r *tl.Reader) {
	o.Flags = uint(r.ReadUint32())
	o.QueryID = r.ReadUint64()
	o.UserID = r.ReadInt()
	o.Peer = Schema.ReadLimitedBoxedObjectFrom(r, TagPeerUser, TagPeerChat, TagPeerChannel).(TLPeerType)
	o.MsgID = r.ReadInt()
	o.ChatInstance = r.ReadUint64()
	o.Data = r.ReadBlob()
	o.GameShortName = r.ReadString()
}

func (o *TLUpdateBotCallbackQuery) WriteBareTo(w *tl.Writer) {
	w.WriteUint32(uint32(o.Flags))
	w.WriteUint64(o.QueryID)
	w.WriteInt(o.UserID)
	w.WriteCmd(o.Peer.Cmd())
	o.Peer.WriteBareTo(w)
	w.WriteInt(o.MsgID)
	w.WriteUint64(o.ChatInstance)
	w.WriteBlob(o.Data)
	w.WriteString(o.GameShortName)
}

func (o *TLUpdateBotCallbackQuery) String() string {
	return tl.Pretty(o)
}

// TLUpdateEditMessage represents ctor updateEditMessage#e40370a3 message:Message pts:int pts_count:int = Update from Telegram
type TLUpdateEditMessage struct {
	Message  TLMessageType // message:Message
	Pts      int           // pts:int
	PtsCount int           // pts_count:int
}

func (o *TLUpdateEditMessage) IsTLUpdate() {}

func (o *TLUpdateEditMessage) Cmd() uint32 {
	return TagUpdateEditMessage
}

func (o *TLUpdateEditMessage) ReadBareFrom(r *tl.Reader) {
	o.Message = Schema.ReadLimitedBoxedObjectFrom(r, TagMessageEmpty, TagMessage, TagMessageService).(TLMessageType)
	o.Pts = r.ReadInt()
	o.PtsCount = r.ReadInt()
}

func (o *TLUpdateEditMessage) WriteBareTo(w *tl.Writer) {
	w.WriteCmd(o.Message.Cmd())
	o.Message.WriteBareTo(w)
	w.WriteInt(o.Pts)
	w.WriteInt(o.PtsCount)
}

func (o *TLUpdateEditMessage) String() string {
	return tl.Pretty(o)
}

// TLUpdateInlineBotCallbackQuery represents ctor updateInlineBotCallbackQuery#f9d27a5a flags:# query_id:long user_id:int msg_id:InputBotInlineMessageID chat_instance:long flags.0?data:bytes flags.1?game_short_name:string = Update from Telegram
type TLUpdateInlineBotCallbackQuery struct {
	Flags         uint                       // flags:#
	QueryID       uint64                     // query_id:long
	UserID        int                        // user_id:int
	MsgID         *TLInputBotInlineMessageID // msg_id:InputBotInlineMessageID
	ChatInstance  uint64                     // chat_instance:long
	Data          []byte                     // flags.0?data:bytes
	GameShortName string                     // flags.1?game_short_name:string
}

func (o *TLUpdateInlineBotCallbackQuery) IsTLUpdate() {}

func (o *TLUpdateInlineBotCallbackQuery) Cmd() uint32 {
	return TagUpdateInlineBotCallbackQuery
}

func (o *TLUpdateInlineBotCallbackQuery) ReadBareFrom(r *tl.Reader) {
	o.Flags = uint(r.ReadUint32())
	o.QueryID = r.ReadUint64()
	o.UserID = r.ReadInt()
	if cmd := r.ReadCmd(); cmd != TagInputBotInlineMessageID {
		r.Fail(errors.New("expected: inputBotInlineMessageID"))
	}
	o.MsgID = new(TLInputBotInlineMessageID)
	o.MsgID.ReadBareFrom(r)
	o.ChatInstance = r.ReadUint64()
	o.Data = r.ReadBlob()
	o.GameShortName = r.ReadString()
}

func (o *TLUpdateInlineBotCallbackQuery) WriteBareTo(w *tl.Writer) {
	w.WriteUint32(uint32(o.Flags))
	w.WriteUint64(o.QueryID)
	w.WriteInt(o.UserID)
	w.WriteCmd(TagInputBotInlineMessageID)
	o.MsgID.WriteBareTo(w)
	w.WriteUint64(o.ChatInstance)
	w.WriteBlob(o.Data)
	w.WriteString(o.GameShortName)
}

func (o *TLUpdateInlineBotCallbackQuery) String() string {
	return tl.Pretty(o)
}

// TLUpdateReadChannelOutbox represents ctor updateReadChannelOutbox#25d6c9c7 channel_id:int max_id:int = Update from Telegram
type TLUpdateReadChannelOutbox struct {
	ChannelID int // channel_id:int
	MaxID     int // max_id:int
}

func (o *TLUpdateReadChannelOutbox) IsTLUpdate() {}

func (o *TLUpdateReadChannelOutbox) Cmd() uint32 {
	return TagUpdateReadChannelOutbox
}

func (o *TLUpdateReadChannelOutbox) ReadBareFrom(r *tl.Reader) {
	o.ChannelID = r.ReadInt()
	o.MaxID = r.ReadInt()
}

func (o *TLUpdateReadChannelOutbox) WriteBareTo(w *tl.Writer) {
	w.WriteInt(o.ChannelID)
	w.WriteInt(o.MaxID)
}

func (o *TLUpdateReadChannelOutbox) String() string {
	return tl.Pretty(o)
}

// TLUpdateDraftMessage represents ctor updateDraftMessage#ee2bb969 peer:Peer draft:DraftMessage = Update from Telegram
type TLUpdateDraftMessage struct {
	Peer  TLPeerType         // peer:Peer
	Draft TLDraftMessageType // draft:DraftMessage
}

func (o *TLUpdateDraftMessage) IsTLUpdate() {}

func (o *TLUpdateDraftMessage) Cmd() uint32 {
	return TagUpdateDraftMessage
}

func (o *TLUpdateDraftMessage) ReadBareFrom(r *tl.Reader) {
	o.Peer = Schema.ReadLimitedBoxedObjectFrom(r, TagPeerUser, TagPeerChat, TagPeerChannel).(TLPeerType)
	o.Draft = Schema.ReadLimitedBoxedObjectFrom(r, TagDraftMessageEmpty, TagDraftMessage).(TLDraftMessageType)
}

func (o *TLUpdateDraftMessage) WriteBareTo(w *tl.Writer) {
	w.WriteCmd(o.Peer.Cmd())
	o.Peer.WriteBareTo(w)
	w.WriteCmd(o.Draft.Cmd())
	o.Draft.WriteBareTo(w)
}

func (o *TLUpdateDraftMessage) String() string {
	return tl.Pretty(o)
}

// TLUpdateReadFeaturedStickers represents ctor updateReadFeaturedStickers#571d2742 = Update from Telegram
type TLUpdateReadFeaturedStickers struct {
}

func (o *TLUpdateReadFeaturedStickers) IsTLUpdate() {}

func (o *TLUpdateReadFeaturedStickers) Cmd() uint32 {
	return TagUpdateReadFeaturedStickers
}

func (o *TLUpdateReadFeaturedStickers) ReadBareFrom(r *tl.Reader) {
}

func (o *TLUpdateReadFeaturedStickers) WriteBareTo(w *tl.Writer) {
}

func (o *TLUpdateReadFeaturedStickers) String() string {
	return tl.Pretty(o)
}

// TLUpdateRecentStickers represents ctor updateRecentStickers#9a422c20 = Update from Telegram
type TLUpdateRecentStickers struct {
}

func (o *TLUpdateRecentStickers) IsTLUpdate() {}

func (o *TLUpdateRecentStickers) Cmd() uint32 {
	return TagUpdateRecentStickers
}

func (o *TLUpdateRecentStickers) ReadBareFrom(r *tl.Reader) {
}

func (o *TLUpdateRecentStickers) WriteBareTo(w *tl.Writer) {
}

func (o *TLUpdateRecentStickers) String() string {
	return tl.Pretty(o)
}

// TLUpdateConfig represents ctor updateConfig#a229dd06 = Update from Telegram
type TLUpdateConfig struct {
}

func (o *TLUpdateConfig) IsTLUpdate() {}

func (o *TLUpdateConfig) Cmd() uint32 {
	return TagUpdateConfig
}

func (o *TLUpdateConfig) ReadBareFrom(r *tl.Reader) {
}

func (o *TLUpdateConfig) WriteBareTo(w *tl.Writer) {
}

func (o *TLUpdateConfig) String() string {
	return tl.Pretty(o)
}

// TLUpdatePtsChanged represents ctor updatePtsChanged#3354678f = Update from Telegram
type TLUpdatePtsChanged struct {
}

func (o *TLUpdatePtsChanged) IsTLUpdate() {}

func (o *TLUpdatePtsChanged) Cmd() uint32 {
	return TagUpdatePtsChanged
}

func (o *TLUpdatePtsChanged) ReadBareFrom(r *tl.Reader) {
}

func (o *TLUpdatePtsChanged) WriteBareTo(w *tl.Writer) {
}

func (o *TLUpdatePtsChanged) String() string {
	return tl.Pretty(o)
}

// TLUpdateChannelWebPage represents ctor updateChannelWebPage#40771900 channel_id:int webpage:WebPage pts:int pts_count:int = Update from Telegram
type TLUpdateChannelWebPage struct {
	ChannelID int           // channel_id:int
	Webpage   TLWebPageType // webpage:WebPage
	Pts       int           // pts:int
	PtsCount  int           // pts_count:int
}

func (o *TLUpdateChannelWebPage) IsTLUpdate() {}

func (o *TLUpdateChannelWebPage) Cmd() uint32 {
	return TagUpdateChannelWebPage
}

func (o *TLUpdateChannelWebPage) ReadBareFrom(r *tl.Reader) {
	o.ChannelID = r.ReadInt()
	o.Webpage = Schema.ReadLimitedBoxedObjectFrom(r, TagWebPageEmpty, TagWebPagePending, TagWebPage, TagWebPageNotModified).(TLWebPageType)
	o.Pts = r.ReadInt()
	o.PtsCount = r.ReadInt()
}

func (o *TLUpdateChannelWebPage) WriteBareTo(w *tl.Writer) {
	w.WriteInt(o.ChannelID)
	w.WriteCmd(o.Webpage.Cmd())
	o.Webpage.WriteBareTo(w)
	w.WriteInt(o.Pts)
	w.WriteInt(o.PtsCount)
}

func (o *TLUpdateChannelWebPage) String() string {
	return tl.Pretty(o)
}

// TLUpdateDialogPinned represents ctor updateDialogPinned#d711a2cc flags:# flags.0?pinned:true peer:Peer = Update from Telegram
type TLUpdateDialogPinned struct {
	Flags  uint       // flags:#
	Pinned bool       // flags.0?pinned:true
	Peer   TLPeerType // peer:Peer
}

func (o *TLUpdateDialogPinned) IsTLUpdate() {}

func (o *TLUpdateDialogPinned) Cmd() uint32 {
	return TagUpdateDialogPinned
}

func (o *TLUpdateDialogPinned) ReadBareFrom(r *tl.Reader) {
	o.Flags = uint(r.ReadUint32())
	o.Pinned = true
	o.Peer = Schema.ReadLimitedBoxedObjectFrom(r, TagPeerUser, TagPeerChat, TagPeerChannel).(TLPeerType)
}

func (o *TLUpdateDialogPinned) WriteBareTo(w *tl.Writer) {
	w.WriteUint32(uint32(o.Flags))
	w.WriteCmd(o.Peer.Cmd())
	o.Peer.WriteBareTo(w)
}

func (o *TLUpdateDialogPinned) String() string {
	return tl.Pretty(o)
}

// TLUpdatePinnedDialogs represents ctor updatePinnedDialogs#d8caf68d flags:# flags.0?order:Vector<Peer> = Update from Telegram
type TLUpdatePinnedDialogs struct {
	Flags uint         // flags:#
	Order []TLPeerType // flags.0?order:Vector<Peer>
}

func (o *TLUpdatePinnedDialogs) IsTLUpdate() {}

func (o *TLUpdatePinnedDialogs) Cmd() uint32 {
	return TagUpdatePinnedDialogs
}

func (o *TLUpdatePinnedDialogs) ReadBareFrom(r *tl.Reader) {
	o.Flags = uint(r.ReadUint32())
	if cmd := r.ReadCmd(); cmd != TagVector {
		r.Fail(errors.New("expected: vector"))
	}
	o.Order = make([]TLPeerType, r.ReadInt())
	for i := 0; i < len(o.Order); i++ {
		o.Order[i] = Schema.ReadLimitedBoxedObjectFrom(r, TagPeerUser, TagPeerChat, TagPeerChannel).(TLPeerType)
	}
}

func (o *TLUpdatePinnedDialogs) WriteBareTo(w *tl.Writer) {
	w.WriteUint32(uint32(o.Flags))
	w.WriteCmd(TagVector)
	w.WriteInt(len(o.Order))
	for i := 0; i < len(o.Order); i++ {
		w.WriteCmd(o.Order[i].Cmd())
		o.Order[i].WriteBareTo(w)
	}
}

func (o *TLUpdatePinnedDialogs) String() string {
	return tl.Pretty(o)
}

// TLUpdateBotWebhookJSON represents ctor updateBotWebhookJSON#8317c0c3 data:DataJSON = Update from Telegram
type TLUpdateBotWebhookJSON struct {
	Data *TLDataJSON // data:DataJSON
}

func (o *TLUpdateBotWebhookJSON) IsTLUpdate() {}

func (o *TLUpdateBotWebhookJSON) Cmd() uint32 {
	return TagUpdateBotWebhookJSON
}

func (o *TLUpdateBotWebhookJSON) ReadBareFrom(r *tl.Reader) {
	if cmd := r.ReadCmd(); cmd != TagDataJSON {
		r.Fail(errors.New("expected: dataJSON"))
	}
	o.Data = new(TLDataJSON)
	o.Data.ReadBareFrom(r)
}

func (o *TLUpdateBotWebhookJSON) WriteBareTo(w *tl.Writer) {
	w.WriteCmd(TagDataJSON)
	o.Data.WriteBareTo(w)
}

func (o *TLUpdateBotWebhookJSON) String() string {
	return tl.Pretty(o)
}

// TLUpdateBotWebhookJSONQuery represents ctor updateBotWebhookJSONQuery#9b9240a6 query_id:long data:DataJSON timeout:int = Update from Telegram
type TLUpdateBotWebhookJSONQuery struct {
	QueryID uint64      // query_id:long
	Data    *TLDataJSON // data:DataJSON
	Timeout int         // timeout:int
}

func (o *TLUpdateBotWebhookJSONQuery) IsTLUpdate() {}

func (o *TLUpdateBotWebhookJSONQuery) Cmd() uint32 {
	return TagUpdateBotWebhookJSONQuery
}

func (o *TLUpdateBotWebhookJSONQuery) ReadBareFrom(r *tl.Reader) {
	o.QueryID = r.ReadUint64()
	if cmd := r.ReadCmd(); cmd != TagDataJSON {
		r.Fail(errors.New("expected: dataJSON"))
	}
	o.Data = new(TLDataJSON)
	o.Data.ReadBareFrom(r)
	o.Timeout = r.ReadInt()
}

func (o *TLUpdateBotWebhookJSONQuery) WriteBareTo(w *tl.Writer) {
	w.WriteUint64(o.QueryID)
	w.WriteCmd(TagDataJSON)
	o.Data.WriteBareTo(w)
	w.WriteInt(o.Timeout)
}

func (o *TLUpdateBotWebhookJSONQuery) String() string {
	return tl.Pretty(o)
}

// TLUpdateBotShippingQuery represents ctor updateBotShippingQuery#e0cdc940 query_id:long user_id:int payload:bytes shipping_address:PostAddress = Update from Telegram
type TLUpdateBotShippingQuery struct {
	QueryID         uint64         // query_id:long
	UserID          int            // user_id:int
	Payload         []byte         // payload:bytes
	ShippingAddress *TLPostAddress // shipping_address:PostAddress
}

func (o *TLUpdateBotShippingQuery) IsTLUpdate() {}

func (o *TLUpdateBotShippingQuery) Cmd() uint32 {
	return TagUpdateBotShippingQuery
}

func (o *TLUpdateBotShippingQuery) ReadBareFrom(r *tl.Reader) {
	o.QueryID = r.ReadUint64()
	o.UserID = r.ReadInt()
	o.Payload = r.ReadBlob()
	if cmd := r.ReadCmd(); cmd != TagPostAddress {
		r.Fail(errors.New("expected: postAddress"))
	}
	o.ShippingAddress = new(TLPostAddress)
	o.ShippingAddress.ReadBareFrom(r)
}

func (o *TLUpdateBotShippingQuery) WriteBareTo(w *tl.Writer) {
	w.WriteUint64(o.QueryID)
	w.WriteInt(o.UserID)
	w.WriteBlob(o.Payload)
	w.WriteCmd(TagPostAddress)
	o.ShippingAddress.WriteBareTo(w)
}

func (o *TLUpdateBotShippingQuery) String() string {
	return tl.Pretty(o)
}

// TLUpdateBotPrecheckoutQuery represents ctor updateBotPrecheckoutQuery#5d2f3aa9 flags:# query_id:long user_id:int payload:bytes flags.0?info:PaymentRequestedInfo flags.1?shipping_option_id:string currency:string total_amount:long = Update from Telegram
type TLUpdateBotPrecheckoutQuery struct {
	Flags            uint                    // flags:#
	QueryID          uint64                  // query_id:long
	UserID           int                     // user_id:int
	Payload          []byte                  // payload:bytes
	Info             *TLPaymentRequestedInfo // flags.0?info:PaymentRequestedInfo
	ShippingOptionID string                  // flags.1?shipping_option_id:string
	Currency         string                  // currency:string
	TotalAmount      uint64                  // total_amount:long
}

func (o *TLUpdateBotPrecheckoutQuery) IsTLUpdate() {}

func (o *TLUpdateBotPrecheckoutQuery) Cmd() uint32 {
	return TagUpdateBotPrecheckoutQuery
}

func (o *TLUpdateBotPrecheckoutQuery) ReadBareFrom(r *tl.Reader) {
	o.Flags = uint(r.ReadUint32())
	o.QueryID = r.ReadUint64()
	o.UserID = r.ReadInt()
	o.Payload = r.ReadBlob()
	if cmd := r.ReadCmd(); cmd != TagPaymentRequestedInfo {
		r.Fail(errors.New("expected: paymentRequestedInfo"))
	}
	o.Info = new(TLPaymentRequestedInfo)
	o.Info.ReadBareFrom(r)
	o.ShippingOptionID = r.ReadString()
	o.Currency = r.ReadString()
	o.TotalAmount = r.ReadUint64()
}

func (o *TLUpdateBotPrecheckoutQuery) WriteBareTo(w *tl.Writer) {
	w.WriteUint32(uint32(o.Flags))
	w.WriteUint64(o.QueryID)
	w.WriteInt(o.UserID)
	w.WriteBlob(o.Payload)
	w.WriteCmd(TagPaymentRequestedInfo)
	o.Info.WriteBareTo(w)
	w.WriteString(o.ShippingOptionID)
	w.WriteString(o.Currency)
	w.WriteUint64(o.TotalAmount)
}

func (o *TLUpdateBotPrecheckoutQuery) String() string {
	return tl.Pretty(o)
}

// TLUpdatePhoneCall represents ctor updatePhoneCall#ab0f6b1e phone_call:PhoneCall = Update from Telegram
type TLUpdatePhoneCall struct {
	PhoneCall TLPhoneCallType // phone_call:PhoneCall
}

func (o *TLUpdatePhoneCall) IsTLUpdate() {}

func (o *TLUpdatePhoneCall) Cmd() uint32 {
	return TagUpdatePhoneCall
}

func (o *TLUpdatePhoneCall) ReadBareFrom(r *tl.Reader) {
	o.PhoneCall = Schema.ReadLimitedBoxedObjectFrom(r, TagPhoneCallEmpty, TagPhoneCallWaiting, TagPhoneCallRequested, TagPhoneCallAccepted, TagPhoneCall, TagPhoneCallDiscarded).(TLPhoneCallType)
}

func (o *TLUpdatePhoneCall) WriteBareTo(w *tl.Writer) {
	w.WriteCmd(o.PhoneCall.Cmd())
	o.PhoneCall.WriteBareTo(w)
}

func (o *TLUpdatePhoneCall) String() string {
	return tl.Pretty(o)
}

// TLUpdatesDifferenceEmpty represents ctor updates.differenceEmpty#5d75a138 date:int seq:int = updates.Difference from Telegram
type TLUpdatesDifferenceEmpty struct {
	Date int // date:int
	Seq  int // seq:int
}

func (o *TLUpdatesDifferenceEmpty) IsTLUpdatesDifference() {}

func (o *TLUpdatesDifferenceEmpty) Cmd() uint32 {
	return TagUpdatesDifferenceEmpty
}

func (o *TLUpdatesDifferenceEmpty) ReadBareFrom(r *tl.Reader) {
	o.Date = r.ReadInt()
	o.Seq = r.ReadInt()
}

func (o *TLUpdatesDifferenceEmpty) WriteBareTo(w *tl.Writer) {
	w.WriteInt(o.Date)
	w.WriteInt(o.Seq)
}

func (o *TLUpdatesDifferenceEmpty) String() string {
	return tl.Pretty(o)
}

// TLUpdatesDifference represents ctor updates.difference#00f49ca0 new_messages:Vector<Message> new_encrypted_messages:Vector<EncryptedMessage> other_updates:Vector<Update> chats:Vector<Chat> users:Vector<User> state:updates.State = updates.Difference from Telegram
type TLUpdatesDifference struct {
	NewMessages          []TLMessageType          // new_messages:Vector<Message>
	NewEncryptedMessages []TLEncryptedMessageType // new_encrypted_messages:Vector<EncryptedMessage>
	OtherUpdates         []TLUpdateType           // other_updates:Vector<Update>
	Chats                []TLChatType             // chats:Vector<Chat>
	Users                []TLUserType             // users:Vector<User>
	State                *TLUpdatesState          // state:updates.State
}

func (o *TLUpdatesDifference) IsTLUpdatesDifference() {}

func (o *TLUpdatesDifference) Cmd() uint32 {
	return TagUpdatesDifference
}

func (o *TLUpdatesDifference) ReadBareFrom(r *tl.Reader) {
	if cmd := r.ReadCmd(); cmd != TagVector {
		r.Fail(errors.New("expected: vector"))
	}
	o.NewMessages = make([]TLMessageType, r.ReadInt())
	for i := 0; i < len(o.NewMessages); i++ {
		o.NewMessages[i] = Schema.ReadLimitedBoxedObjectFrom(r, TagMessageEmpty, TagMessage, TagMessageService).(TLMessageType)
	}
	if cmd := r.ReadCmd(); cmd != TagVector {
		r.Fail(errors.New("expected: vector"))
	}
	o.NewEncryptedMessages = make([]TLEncryptedMessageType, r.ReadInt())
	for i := 0; i < len(o.NewEncryptedMessages); i++ {
		o.NewEncryptedMessages[i] = Schema.ReadLimitedBoxedObjectFrom(r, TagEncryptedMessage, TagEncryptedMessageService).(TLEncryptedMessageType)
	}
	if cmd := r.ReadCmd(); cmd != TagVector {
		r.Fail(errors.New("expected: vector"))
	}
	o.OtherUpdates = make([]TLUpdateType, r.ReadInt())
	for i := 0; i < len(o.OtherUpdates); i++ {
		o.OtherUpdates[i] = Schema.ReadLimitedBoxedObjectFrom(r, TagUpdateNewMessage, TagUpdateMessageID, TagUpdateDeleteMessages, TagUpdateUserTyping, TagUpdateChatUserTyping, TagUpdateChatParticipants, TagUpdateUserStatus, TagUpdateUserName, TagUpdateUserPhoto, TagUpdateContactRegistered, TagUpdateContactLink, TagUpdateNewEncryptedMessage, TagUpdateEncryptedChatTyping, TagUpdateEncryption, TagUpdateEncryptedMessagesRead, TagUpdateChatParticipantAdd, TagUpdateChatParticipantDelete, TagUpdateDCOptions, TagUpdateUserBlocked, TagUpdateNotifySettings, TagUpdateServiceNotification, TagUpdatePrivacy, TagUpdateUserPhone, TagUpdateReadHistoryInbox, TagUpdateReadHistoryOutbox, TagUpdateWebPage, TagUpdateReadMessagesContents, TagUpdateChannelTooLong, TagUpdateChannel, TagUpdateNewChannelMessage, TagUpdateReadChannelInbox, TagUpdateDeleteChannelMessages, TagUpdateChannelMessageViews, TagUpdateChatAdmins, TagUpdateChatParticipantAdmin, TagUpdateNewStickerSet, TagUpdateStickerSetsOrder, TagUpdateStickerSets, TagUpdateSavedGifs, TagUpdateBotInlineQuery, TagUpdateBotInlineSend, TagUpdateEditChannelMessage, TagUpdateChannelPinnedMessage, TagUpdateBotCallbackQuery, TagUpdateEditMessage, TagUpdateInlineBotCallbackQuery, TagUpdateReadChannelOutbox, TagUpdateDraftMessage, TagUpdateReadFeaturedStickers, TagUpdateRecentStickers, TagUpdateConfig, TagUpdatePtsChanged, TagUpdateChannelWebPage, TagUpdateDialogPinned, TagUpdatePinnedDialogs, TagUpdateBotWebhookJSON, TagUpdateBotWebhookJSONQuery, TagUpdateBotShippingQuery, TagUpdateBotPrecheckoutQuery, TagUpdatePhoneCall).(TLUpdateType)
	}
	if cmd := r.ReadCmd(); cmd != TagVector {
		r.Fail(errors.New("expected: vector"))
	}
	o.Chats = make([]TLChatType, r.ReadInt())
	for i := 0; i < len(o.Chats); i++ {
		o.Chats[i] = Schema.ReadLimitedBoxedObjectFrom(r, TagChatEmpty, TagChat, TagChatForbidden, TagChannel, TagChannelForbidden).(TLChatType)
	}
	if cmd := r.ReadCmd(); cmd != TagVector {
		r.Fail(errors.New("expected: vector"))
	}
	o.Users = make([]TLUserType, r.ReadInt())
	for i := 0; i < len(o.Users); i++ {
		o.Users[i] = Schema.ReadLimitedBoxedObjectFrom(r, TagUserEmpty, TagUser).(TLUserType)
	}
	if cmd := r.ReadCmd(); cmd != TagUpdatesState {
		r.Fail(errors.New("expected: updates.state"))
	}
	o.State = new(TLUpdatesState)
	o.State.ReadBareFrom(r)
}

func (o *TLUpdatesDifference) WriteBareTo(w *tl.Writer) {
	w.WriteCmd(TagVector)
	w.WriteInt(len(o.NewMessages))
	for i := 0; i < len(o.NewMessages); i++ {
		w.WriteCmd(o.NewMessages[i].Cmd())
		o.NewMessages[i].WriteBareTo(w)
	}
	w.WriteCmd(TagVector)
	w.WriteInt(len(o.NewEncryptedMessages))
	for i := 0; i < len(o.NewEncryptedMessages); i++ {
		w.WriteCmd(o.NewEncryptedMessages[i].Cmd())
		o.NewEncryptedMessages[i].WriteBareTo(w)
	}
	w.WriteCmd(TagVector)
	w.WriteInt(len(o.OtherUpdates))
	for i := 0; i < len(o.OtherUpdates); i++ {
		w.WriteCmd(o.OtherUpdates[i].Cmd())
		o.OtherUpdates[i].WriteBareTo(w)
	}
	w.WriteCmd(TagVector)
	w.WriteInt(len(o.Chats))
	for i := 0; i < len(o.Chats); i++ {
		w.WriteCmd(o.Chats[i].Cmd())
		o.Chats[i].WriteBareTo(w)
	}
	w.WriteCmd(TagVector)
	w.WriteInt(len(o.Users))
	for i := 0; i < len(o.Users); i++ {
		w.WriteCmd(o.Users[i].Cmd())
		o.Users[i].WriteBareTo(w)
	}
	w.WriteCmd(TagUpdatesState)
	o.State.WriteBareTo(w)
}

func (o *TLUpdatesDifference) String() string {
	return tl.Pretty(o)
}

// TLUpdatesDifferenceSlice represents ctor updates.differenceSlice#a8fb1981 new_messages:Vector<Message> new_encrypted_messages:Vector<EncryptedMessage> other_updates:Vector<Update> chats:Vector<Chat> users:Vector<User> intermediate_state:updates.State = updates.Difference from Telegram
type TLUpdatesDifferenceSlice struct {
	NewMessages          []TLMessageType          // new_messages:Vector<Message>
	NewEncryptedMessages []TLEncryptedMessageType // new_encrypted_messages:Vector<EncryptedMessage>
	OtherUpdates         []TLUpdateType           // other_updates:Vector<Update>
	Chats                []TLChatType             // chats:Vector<Chat>
	Users                []TLUserType             // users:Vector<User>
	IntermediateState    *TLUpdatesState          // intermediate_state:updates.State
}

func (o *TLUpdatesDifferenceSlice) IsTLUpdatesDifference() {}

func (o *TLUpdatesDifferenceSlice) Cmd() uint32 {
	return TagUpdatesDifferenceSlice
}

func (o *TLUpdatesDifferenceSlice) ReadBareFrom(r *tl.Reader) {
	if cmd := r.ReadCmd(); cmd != TagVector {
		r.Fail(errors.New("expected: vector"))
	}
	o.NewMessages = make([]TLMessageType, r.ReadInt())
	for i := 0; i < len(o.NewMessages); i++ {
		o.NewMessages[i] = Schema.ReadLimitedBoxedObjectFrom(r, TagMessageEmpty, TagMessage, TagMessageService).(TLMessageType)
	}
	if cmd := r.ReadCmd(); cmd != TagVector {
		r.Fail(errors.New("expected: vector"))
	}
	o.NewEncryptedMessages = make([]TLEncryptedMessageType, r.ReadInt())
	for i := 0; i < len(o.NewEncryptedMessages); i++ {
		o.NewEncryptedMessages[i] = Schema.ReadLimitedBoxedObjectFrom(r, TagEncryptedMessage, TagEncryptedMessageService).(TLEncryptedMessageType)
	}
	if cmd := r.ReadCmd(); cmd != TagVector {
		r.Fail(errors.New("expected: vector"))
	}
	o.OtherUpdates = make([]TLUpdateType, r.ReadInt())
	for i := 0; i < len(o.OtherUpdates); i++ {
		o.OtherUpdates[i] = Schema.ReadLimitedBoxedObjectFrom(r, TagUpdateNewMessage, TagUpdateMessageID, TagUpdateDeleteMessages, TagUpdateUserTyping, TagUpdateChatUserTyping, TagUpdateChatParticipants, TagUpdateUserStatus, TagUpdateUserName, TagUpdateUserPhoto, TagUpdateContactRegistered, TagUpdateContactLink, TagUpdateNewEncryptedMessage, TagUpdateEncryptedChatTyping, TagUpdateEncryption, TagUpdateEncryptedMessagesRead, TagUpdateChatParticipantAdd, TagUpdateChatParticipantDelete, TagUpdateDCOptions, TagUpdateUserBlocked, TagUpdateNotifySettings, TagUpdateServiceNotification, TagUpdatePrivacy, TagUpdateUserPhone, TagUpdateReadHistoryInbox, TagUpdateReadHistoryOutbox, TagUpdateWebPage, TagUpdateReadMessagesContents, TagUpdateChannelTooLong, TagUpdateChannel, TagUpdateNewChannelMessage, TagUpdateReadChannelInbox, TagUpdateDeleteChannelMessages, TagUpdateChannelMessageViews, TagUpdateChatAdmins, TagUpdateChatParticipantAdmin, TagUpdateNewStickerSet, TagUpdateStickerSetsOrder, TagUpdateStickerSets, TagUpdateSavedGifs, TagUpdateBotInlineQuery, TagUpdateBotInlineSend, TagUpdateEditChannelMessage, TagUpdateChannelPinnedMessage, TagUpdateBotCallbackQuery, TagUpdateEditMessage, TagUpdateInlineBotCallbackQuery, TagUpdateReadChannelOutbox, TagUpdateDraftMessage, TagUpdateReadFeaturedStickers, TagUpdateRecentStickers, TagUpdateConfig, TagUpdatePtsChanged, TagUpdateChannelWebPage, TagUpdateDialogPinned, TagUpdatePinnedDialogs, TagUpdateBotWebhookJSON, TagUpdateBotWebhookJSONQuery, TagUpdateBotShippingQuery, TagUpdateBotPrecheckoutQuery, TagUpdatePhoneCall).(TLUpdateType)
	}
	if cmd := r.ReadCmd(); cmd != TagVector {
		r.Fail(errors.New("expected: vector"))
	}
	o.Chats = make([]TLChatType, r.ReadInt())
	for i := 0; i < len(o.Chats); i++ {
		o.Chats[i] = Schema.ReadLimitedBoxedObjectFrom(r, TagChatEmpty, TagChat, TagChatForbidden, TagChannel, TagChannelForbidden).(TLChatType)
	}
	if cmd := r.ReadCmd(); cmd != TagVector {
		r.Fail(errors.New("expected: vector"))
	}
	o.Users = make([]TLUserType, r.ReadInt())
	for i := 0; i < len(o.Users); i++ {
		o.Users[i] = Schema.ReadLimitedBoxedObjectFrom(r, TagUserEmpty, TagUser).(TLUserType)
	}
	if cmd := r.ReadCmd(); cmd != TagUpdatesState {
		r.Fail(errors.New("expected: updates.state"))
	}
	o.IntermediateState = new(TLUpdatesState)
	o.IntermediateState.ReadBareFrom(r)
}

func (o *TLUpdatesDifferenceSlice) WriteBareTo(w *tl.Writer) {
	w.WriteCmd(TagVector)
	w.WriteInt(len(o.NewMessages))
	for i := 0; i < len(o.NewMessages); i++ {
		w.WriteCmd(o.NewMessages[i].Cmd())
		o.NewMessages[i].WriteBareTo(w)
	}
	w.WriteCmd(TagVector)
	w.WriteInt(len(o.NewEncryptedMessages))
	for i := 0; i < len(o.NewEncryptedMessages); i++ {
		w.WriteCmd(o.NewEncryptedMessages[i].Cmd())
		o.NewEncryptedMessages[i].WriteBareTo(w)
	}
	w.WriteCmd(TagVector)
	w.WriteInt(len(o.OtherUpdates))
	for i := 0; i < len(o.OtherUpdates); i++ {
		w.WriteCmd(o.OtherUpdates[i].Cmd())
		o.OtherUpdates[i].WriteBareTo(w)
	}
	w.WriteCmd(TagVector)
	w.WriteInt(len(o.Chats))
	for i := 0; i < len(o.Chats); i++ {
		w.WriteCmd(o.Chats[i].Cmd())
		o.Chats[i].WriteBareTo(w)
	}
	w.WriteCmd(TagVector)
	w.WriteInt(len(o.Users))
	for i := 0; i < len(o.Users); i++ {
		w.WriteCmd(o.Users[i].Cmd())
		o.Users[i].WriteBareTo(w)
	}
	w.WriteCmd(TagUpdatesState)
	o.IntermediateState.WriteBareTo(w)
}

func (o *TLUpdatesDifferenceSlice) String() string {
	return tl.Pretty(o)
}

// TLUpdatesDifferenceTooLong represents ctor updates.differenceTooLong#4afe8f6d pts:int = updates.Difference from Telegram
type TLUpdatesDifferenceTooLong struct {
	Pts int // pts:int
}

func (o *TLUpdatesDifferenceTooLong) IsTLUpdatesDifference() {}

func (o *TLUpdatesDifferenceTooLong) Cmd() uint32 {
	return TagUpdatesDifferenceTooLong
}

func (o *TLUpdatesDifferenceTooLong) ReadBareFrom(r *tl.Reader) {
	o.Pts = r.ReadInt()
}

func (o *TLUpdatesDifferenceTooLong) WriteBareTo(w *tl.Writer) {
	w.WriteInt(o.Pts)
}

func (o *TLUpdatesDifferenceTooLong) String() string {
	return tl.Pretty(o)
}

// TLUpdatesTooLong represents ctor updatesTooLong#e317af7e = Updates from Telegram
type TLUpdatesTooLong struct {
}

func (o *TLUpdatesTooLong) IsTLUpdates() {}

func (o *TLUpdatesTooLong) Cmd() uint32 {
	return TagUpdatesTooLong
}

func (o *TLUpdatesTooLong) ReadBareFrom(r *tl.Reader) {
}

func (o *TLUpdatesTooLong) WriteBareTo(w *tl.Writer) {
}

func (o *TLUpdatesTooLong) String() string {
	return tl.Pretty(o)
}

// TLUpdateShortMessage represents ctor updateShortMessage#914fbf11 flags:# flags.1?out:true flags.4?mentioned:true flags.5?media_unread:true flags.13?silent:true id:int user_id:int message:string pts:int pts_count:int date:int flags.2?fwd_from:MessageFwdHeader flags.11?via_bot_id:int flags.3?reply_to_msg_id:int flags.7?entities:Vector<MessageEntity> = Updates from Telegram
type TLUpdateShortMessage struct {
	Flags        uint                  // flags:#
	Out          bool                  // flags.1?out:true
	Mentioned    bool                  // flags.4?mentioned:true
	MediaUnread  bool                  // flags.5?media_unread:true
	Silent       bool                  // flags.13?silent:true
	ID           int                   // id:int
	UserID       int                   // user_id:int
	Message      string                // message:string
	Pts          int                   // pts:int
	PtsCount     int                   // pts_count:int
	Date         int                   // date:int
	FwdFrom      *TLMessageFwdHeader   // flags.2?fwd_from:MessageFwdHeader
	ViaBotID     int                   // flags.11?via_bot_id:int
	ReplyToMsgID int                   // flags.3?reply_to_msg_id:int
	Entities     []TLMessageEntityType // flags.7?entities:Vector<MessageEntity>
}

func (o *TLUpdateShortMessage) IsTLUpdates() {}

func (o *TLUpdateShortMessage) Cmd() uint32 {
	return TagUpdateShortMessage
}

func (o *TLUpdateShortMessage) ReadBareFrom(r *tl.Reader) {
	o.Flags = uint(r.ReadUint32())
	o.Out = true
	o.Mentioned = true
	o.MediaUnread = true
	o.Silent = true
	o.ID = r.ReadInt()
	o.UserID = r.ReadInt()
	o.Message = r.ReadString()
	o.Pts = r.ReadInt()
	o.PtsCount = r.ReadInt()
	o.Date = r.ReadInt()
	if cmd := r.ReadCmd(); cmd != TagMessageFwdHeader {
		r.Fail(errors.New("expected: messageFwdHeader"))
	}
	o.FwdFrom = new(TLMessageFwdHeader)
	o.FwdFrom.ReadBareFrom(r)
	o.ViaBotID = r.ReadInt()
	o.ReplyToMsgID = r.ReadInt()
	if cmd := r.ReadCmd(); cmd != TagVector {
		r.Fail(errors.New("expected: vector"))
	}
	o.Entities = make([]TLMessageEntityType, r.ReadInt())
	for i := 0; i < len(o.Entities); i++ {
		o.Entities[i] = Schema.ReadLimitedBoxedObjectFrom(r, TagMessageEntityUnknown, TagMessageEntityMention, TagMessageEntityHashtag, TagMessageEntityBotCommand, TagMessageEntityUrl, TagMessageEntityEmail, TagMessageEntityBold, TagMessageEntityItalic, TagMessageEntityCode, TagMessageEntityPre, TagMessageEntityTextUrl, TagMessageEntityMentionName, TagInputMessageEntityMentionName).(TLMessageEntityType)
	}
}

func (o *TLUpdateShortMessage) WriteBareTo(w *tl.Writer) {
	w.WriteUint32(uint32(o.Flags))
	w.WriteInt(o.ID)
	w.WriteInt(o.UserID)
	w.WriteString(o.Message)
	w.WriteInt(o.Pts)
	w.WriteInt(o.PtsCount)
	w.WriteInt(o.Date)
	w.WriteCmd(TagMessageFwdHeader)
	o.FwdFrom.WriteBareTo(w)
	w.WriteInt(o.ViaBotID)
	w.WriteInt(o.ReplyToMsgID)
	w.WriteCmd(TagVector)
	w.WriteInt(len(o.Entities))
	for i := 0; i < len(o.Entities); i++ {
		w.WriteCmd(o.Entities[i].Cmd())
		o.Entities[i].WriteBareTo(w)
	}
}

func (o *TLUpdateShortMessage) String() string {
	return tl.Pretty(o)
}

// TLUpdateShortChatMessage represents ctor updateShortChatMessage#16812688 flags:# flags.1?out:true flags.4?mentioned:true flags.5?media_unread:true flags.13?silent:true id:int from_id:int chat_id:int message:string pts:int pts_count:int date:int flags.2?fwd_from:MessageFwdHeader flags.11?via_bot_id:int flags.3?reply_to_msg_id:int flags.7?entities:Vector<MessageEntity> = Updates from Telegram
type TLUpdateShortChatMessage struct {
	Flags        uint                  // flags:#
	Out          bool                  // flags.1?out:true
	Mentioned    bool                  // flags.4?mentioned:true
	MediaUnread  bool                  // flags.5?media_unread:true
	Silent       bool                  // flags.13?silent:true
	ID           int                   // id:int
	FromID       int                   // from_id:int
	ChatID       int                   // chat_id:int
	Message      string                // message:string
	Pts          int                   // pts:int
	PtsCount     int                   // pts_count:int
	Date         int                   // date:int
	FwdFrom      *TLMessageFwdHeader   // flags.2?fwd_from:MessageFwdHeader
	ViaBotID     int                   // flags.11?via_bot_id:int
	ReplyToMsgID int                   // flags.3?reply_to_msg_id:int
	Entities     []TLMessageEntityType // flags.7?entities:Vector<MessageEntity>
}

func (o *TLUpdateShortChatMessage) IsTLUpdates() {}

func (o *TLUpdateShortChatMessage) Cmd() uint32 {
	return TagUpdateShortChatMessage
}

func (o *TLUpdateShortChatMessage) ReadBareFrom(r *tl.Reader) {
	o.Flags = uint(r.ReadUint32())
	o.Out = true
	o.Mentioned = true
	o.MediaUnread = true
	o.Silent = true
	o.ID = r.ReadInt()
	o.FromID = r.ReadInt()
	o.ChatID = r.ReadInt()
	o.Message = r.ReadString()
	o.Pts = r.ReadInt()
	o.PtsCount = r.ReadInt()
	o.Date = r.ReadInt()
	if cmd := r.ReadCmd(); cmd != TagMessageFwdHeader {
		r.Fail(errors.New("expected: messageFwdHeader"))
	}
	o.FwdFrom = new(TLMessageFwdHeader)
	o.FwdFrom.ReadBareFrom(r)
	o.ViaBotID = r.ReadInt()
	o.ReplyToMsgID = r.ReadInt()
	if cmd := r.ReadCmd(); cmd != TagVector {
		r.Fail(errors.New("expected: vector"))
	}
	o.Entities = make([]TLMessageEntityType, r.ReadInt())
	for i := 0; i < len(o.Entities); i++ {
		o.Entities[i] = Schema.ReadLimitedBoxedObjectFrom(r, TagMessageEntityUnknown, TagMessageEntityMention, TagMessageEntityHashtag, TagMessageEntityBotCommand, TagMessageEntityUrl, TagMessageEntityEmail, TagMessageEntityBold, TagMessageEntityItalic, TagMessageEntityCode, TagMessageEntityPre, TagMessageEntityTextUrl, TagMessageEntityMentionName, TagInputMessageEntityMentionName).(TLMessageEntityType)
	}
}

func (o *TLUpdateShortChatMessage) WriteBareTo(w *tl.Writer) {
	w.WriteUint32(uint32(o.Flags))
	w.WriteInt(o.ID)
	w.WriteInt(o.FromID)
	w.WriteInt(o.ChatID)
	w.WriteString(o.Message)
	w.WriteInt(o.Pts)
	w.WriteInt(o.PtsCount)
	w.WriteInt(o.Date)
	w.WriteCmd(TagMessageFwdHeader)
	o.FwdFrom.WriteBareTo(w)
	w.WriteInt(o.ViaBotID)
	w.WriteInt(o.ReplyToMsgID)
	w.WriteCmd(TagVector)
	w.WriteInt(len(o.Entities))
	for i := 0; i < len(o.Entities); i++ {
		w.WriteCmd(o.Entities[i].Cmd())
		o.Entities[i].WriteBareTo(w)
	}
}

func (o *TLUpdateShortChatMessage) String() string {
	return tl.Pretty(o)
}

// TLUpdateShort represents ctor updateShort#78d4dec1 update:Update date:int = Updates from Telegram
type TLUpdateShort struct {
	Update TLUpdateType // update:Update
	Date   int          // date:int
}

func (o *TLUpdateShort) IsTLUpdates() {}

func (o *TLUpdateShort) Cmd() uint32 {
	return TagUpdateShort
}

func (o *TLUpdateShort) ReadBareFrom(r *tl.Reader) {
	o.Update = Schema.ReadLimitedBoxedObjectFrom(r, TagUpdateNewMessage, TagUpdateMessageID, TagUpdateDeleteMessages, TagUpdateUserTyping, TagUpdateChatUserTyping, TagUpdateChatParticipants, TagUpdateUserStatus, TagUpdateUserName, TagUpdateUserPhoto, TagUpdateContactRegistered, TagUpdateContactLink, TagUpdateNewEncryptedMessage, TagUpdateEncryptedChatTyping, TagUpdateEncryption, TagUpdateEncryptedMessagesRead, TagUpdateChatParticipantAdd, TagUpdateChatParticipantDelete, TagUpdateDCOptions, TagUpdateUserBlocked, TagUpdateNotifySettings, TagUpdateServiceNotification, TagUpdatePrivacy, TagUpdateUserPhone, TagUpdateReadHistoryInbox, TagUpdateReadHistoryOutbox, TagUpdateWebPage, TagUpdateReadMessagesContents, TagUpdateChannelTooLong, TagUpdateChannel, TagUpdateNewChannelMessage, TagUpdateReadChannelInbox, TagUpdateDeleteChannelMessages, TagUpdateChannelMessageViews, TagUpdateChatAdmins, TagUpdateChatParticipantAdmin, TagUpdateNewStickerSet, TagUpdateStickerSetsOrder, TagUpdateStickerSets, TagUpdateSavedGifs, TagUpdateBotInlineQuery, TagUpdateBotInlineSend, TagUpdateEditChannelMessage, TagUpdateChannelPinnedMessage, TagUpdateBotCallbackQuery, TagUpdateEditMessage, TagUpdateInlineBotCallbackQuery, TagUpdateReadChannelOutbox, TagUpdateDraftMessage, TagUpdateReadFeaturedStickers, TagUpdateRecentStickers, TagUpdateConfig, TagUpdatePtsChanged, TagUpdateChannelWebPage, TagUpdateDialogPinned, TagUpdatePinnedDialogs, TagUpdateBotWebhookJSON, TagUpdateBotWebhookJSONQuery, TagUpdateBotShippingQuery, TagUpdateBotPrecheckoutQuery, TagUpdatePhoneCall).(TLUpdateType)
	o.Date = r.ReadInt()
}

func (o *TLUpdateShort) WriteBareTo(w *tl.Writer) {
	w.WriteCmd(o.Update.Cmd())
	o.Update.WriteBareTo(w)
	w.WriteInt(o.Date)
}

func (o *TLUpdateShort) String() string {
	return tl.Pretty(o)
}

// TLUpdatesCombined represents ctor updatesCombined#725b04c3 updates:Vector<Update> users:Vector<User> chats:Vector<Chat> date:int seq_start:int seq:int = Updates from Telegram
type TLUpdatesCombined struct {
	Updates  []TLUpdateType // updates:Vector<Update>
	Users    []TLUserType   // users:Vector<User>
	Chats    []TLChatType   // chats:Vector<Chat>
	Date     int            // date:int
	SeqStart int            // seq_start:int
	Seq      int            // seq:int
}

func (o *TLUpdatesCombined) IsTLUpdates() {}

func (o *TLUpdatesCombined) Cmd() uint32 {
	return TagUpdatesCombined
}

func (o *TLUpdatesCombined) ReadBareFrom(r *tl.Reader) {
	if cmd := r.ReadCmd(); cmd != TagVector {
		r.Fail(errors.New("expected: vector"))
	}
	o.Updates = make([]TLUpdateType, r.ReadInt())
	for i := 0; i < len(o.Updates); i++ {
		o.Updates[i] = Schema.ReadLimitedBoxedObjectFrom(r, TagUpdateNewMessage, TagUpdateMessageID, TagUpdateDeleteMessages, TagUpdateUserTyping, TagUpdateChatUserTyping, TagUpdateChatParticipants, TagUpdateUserStatus, TagUpdateUserName, TagUpdateUserPhoto, TagUpdateContactRegistered, TagUpdateContactLink, TagUpdateNewEncryptedMessage, TagUpdateEncryptedChatTyping, TagUpdateEncryption, TagUpdateEncryptedMessagesRead, TagUpdateChatParticipantAdd, TagUpdateChatParticipantDelete, TagUpdateDCOptions, TagUpdateUserBlocked, TagUpdateNotifySettings, TagUpdateServiceNotification, TagUpdatePrivacy, TagUpdateUserPhone, TagUpdateReadHistoryInbox, TagUpdateReadHistoryOutbox, TagUpdateWebPage, TagUpdateReadMessagesContents, TagUpdateChannelTooLong, TagUpdateChannel, TagUpdateNewChannelMessage, TagUpdateReadChannelInbox, TagUpdateDeleteChannelMessages, TagUpdateChannelMessageViews, TagUpdateChatAdmins, TagUpdateChatParticipantAdmin, TagUpdateNewStickerSet, TagUpdateStickerSetsOrder, TagUpdateStickerSets, TagUpdateSavedGifs, TagUpdateBotInlineQuery, TagUpdateBotInlineSend, TagUpdateEditChannelMessage, TagUpdateChannelPinnedMessage, TagUpdateBotCallbackQuery, TagUpdateEditMessage, TagUpdateInlineBotCallbackQuery, TagUpdateReadChannelOutbox, TagUpdateDraftMessage, TagUpdateReadFeaturedStickers, TagUpdateRecentStickers, TagUpdateConfig, TagUpdatePtsChanged, TagUpdateChannelWebPage, TagUpdateDialogPinned, TagUpdatePinnedDialogs, TagUpdateBotWebhookJSON, TagUpdateBotWebhookJSONQuery, TagUpdateBotShippingQuery, TagUpdateBotPrecheckoutQuery, TagUpdatePhoneCall).(TLUpdateType)
	}
	if cmd := r.ReadCmd(); cmd != TagVector {
		r.Fail(errors.New("expected: vector"))
	}
	o.Users = make([]TLUserType, r.ReadInt())
	for i := 0; i < len(o.Users); i++ {
		o.Users[i] = Schema.ReadLimitedBoxedObjectFrom(r, TagUserEmpty, TagUser).(TLUserType)
	}
	if cmd := r.ReadCmd(); cmd != TagVector {
		r.Fail(errors.New("expected: vector"))
	}
	o.Chats = make([]TLChatType, r.ReadInt())
	for i := 0; i < len(o.Chats); i++ {
		o.Chats[i] = Schema.ReadLimitedBoxedObjectFrom(r, TagChatEmpty, TagChat, TagChatForbidden, TagChannel, TagChannelForbidden).(TLChatType)
	}
	o.Date = r.ReadInt()
	o.SeqStart = r.ReadInt()
	o.Seq = r.ReadInt()
}

func (o *TLUpdatesCombined) WriteBareTo(w *tl.Writer) {
	w.WriteCmd(TagVector)
	w.WriteInt(len(o.Updates))
	for i := 0; i < len(o.Updates); i++ {
		w.WriteCmd(o.Updates[i].Cmd())
		o.Updates[i].WriteBareTo(w)
	}
	w.WriteCmd(TagVector)
	w.WriteInt(len(o.Users))
	for i := 0; i < len(o.Users); i++ {
		w.WriteCmd(o.Users[i].Cmd())
		o.Users[i].WriteBareTo(w)
	}
	w.WriteCmd(TagVector)
	w.WriteInt(len(o.Chats))
	for i := 0; i < len(o.Chats); i++ {
		w.WriteCmd(o.Chats[i].Cmd())
		o.Chats[i].WriteBareTo(w)
	}
	w.WriteInt(o.Date)
	w.WriteInt(o.SeqStart)
	w.WriteInt(o.Seq)
}

func (o *TLUpdatesCombined) String() string {
	return tl.Pretty(o)
}

// TLUpdates represents ctor updates#74ae4240 updates:Vector<Update> users:Vector<User> chats:Vector<Chat> date:int seq:int = Updates from Telegram
type TLUpdates struct {
	Updates []TLUpdateType // updates:Vector<Update>
	Users   []TLUserType   // users:Vector<User>
	Chats   []TLChatType   // chats:Vector<Chat>
	Date    int            // date:int
	Seq     int            // seq:int
}

func (o *TLUpdates) IsTLUpdates() {}

func (o *TLUpdates) Cmd() uint32 {
	return TagUpdates
}

func (o *TLUpdates) ReadBareFrom(r *tl.Reader) {
	if cmd := r.ReadCmd(); cmd != TagVector {
		r.Fail(errors.New("expected: vector"))
	}
	o.Updates = make([]TLUpdateType, r.ReadInt())
	for i := 0; i < len(o.Updates); i++ {
		o.Updates[i] = Schema.ReadLimitedBoxedObjectFrom(r, TagUpdateNewMessage, TagUpdateMessageID, TagUpdateDeleteMessages, TagUpdateUserTyping, TagUpdateChatUserTyping, TagUpdateChatParticipants, TagUpdateUserStatus, TagUpdateUserName, TagUpdateUserPhoto, TagUpdateContactRegistered, TagUpdateContactLink, TagUpdateNewEncryptedMessage, TagUpdateEncryptedChatTyping, TagUpdateEncryption, TagUpdateEncryptedMessagesRead, TagUpdateChatParticipantAdd, TagUpdateChatParticipantDelete, TagUpdateDCOptions, TagUpdateUserBlocked, TagUpdateNotifySettings, TagUpdateServiceNotification, TagUpdatePrivacy, TagUpdateUserPhone, TagUpdateReadHistoryInbox, TagUpdateReadHistoryOutbox, TagUpdateWebPage, TagUpdateReadMessagesContents, TagUpdateChannelTooLong, TagUpdateChannel, TagUpdateNewChannelMessage, TagUpdateReadChannelInbox, TagUpdateDeleteChannelMessages, TagUpdateChannelMessageViews, TagUpdateChatAdmins, TagUpdateChatParticipantAdmin, TagUpdateNewStickerSet, TagUpdateStickerSetsOrder, TagUpdateStickerSets, TagUpdateSavedGifs, TagUpdateBotInlineQuery, TagUpdateBotInlineSend, TagUpdateEditChannelMessage, TagUpdateChannelPinnedMessage, TagUpdateBotCallbackQuery, TagUpdateEditMessage, TagUpdateInlineBotCallbackQuery, TagUpdateReadChannelOutbox, TagUpdateDraftMessage, TagUpdateReadFeaturedStickers, TagUpdateRecentStickers, TagUpdateConfig, TagUpdatePtsChanged, TagUpdateChannelWebPage, TagUpdateDialogPinned, TagUpdatePinnedDialogs, TagUpdateBotWebhookJSON, TagUpdateBotWebhookJSONQuery, TagUpdateBotShippingQuery, TagUpdateBotPrecheckoutQuery, TagUpdatePhoneCall).(TLUpdateType)
	}
	if cmd := r.ReadCmd(); cmd != TagVector {
		r.Fail(errors.New("expected: vector"))
	}
	o.Users = make([]TLUserType, r.ReadInt())
	for i := 0; i < len(o.Users); i++ {
		o.Users[i] = Schema.ReadLimitedBoxedObjectFrom(r, TagUserEmpty, TagUser).(TLUserType)
	}
	if cmd := r.ReadCmd(); cmd != TagVector {
		r.Fail(errors.New("expected: vector"))
	}
	o.Chats = make([]TLChatType, r.ReadInt())
	for i := 0; i < len(o.Chats); i++ {
		o.Chats[i] = Schema.ReadLimitedBoxedObjectFrom(r, TagChatEmpty, TagChat, TagChatForbidden, TagChannel, TagChannelForbidden).(TLChatType)
	}
	o.Date = r.ReadInt()
	o.Seq = r.ReadInt()
}

func (o *TLUpdates) WriteBareTo(w *tl.Writer) {
	w.WriteCmd(TagVector)
	w.WriteInt(len(o.Updates))
	for i := 0; i < len(o.Updates); i++ {
		w.WriteCmd(o.Updates[i].Cmd())
		o.Updates[i].WriteBareTo(w)
	}
	w.WriteCmd(TagVector)
	w.WriteInt(len(o.Users))
	for i := 0; i < len(o.Users); i++ {
		w.WriteCmd(o.Users[i].Cmd())
		o.Users[i].WriteBareTo(w)
	}
	w.WriteCmd(TagVector)
	w.WriteInt(len(o.Chats))
	for i := 0; i < len(o.Chats); i++ {
		w.WriteCmd(o.Chats[i].Cmd())
		o.Chats[i].WriteBareTo(w)
	}
	w.WriteInt(o.Date)
	w.WriteInt(o.Seq)
}

func (o *TLUpdates) String() string {
	return tl.Pretty(o)
}

// TLUpdateShortSentMessage represents ctor updateShortSentMessage#11f1331c flags:# flags.1?out:true id:int pts:int pts_count:int date:int flags.9?media:MessageMedia flags.7?entities:Vector<MessageEntity> = Updates from Telegram
type TLUpdateShortSentMessage struct {
	Flags    uint                  // flags:#
	Out      bool                  // flags.1?out:true
	ID       int                   // id:int
	Pts      int                   // pts:int
	PtsCount int                   // pts_count:int
	Date     int                   // date:int
	Media    TLMessageMediaType    // flags.9?media:MessageMedia
	Entities []TLMessageEntityType // flags.7?entities:Vector<MessageEntity>
}

func (o *TLUpdateShortSentMessage) IsTLUpdates() {}

func (o *TLUpdateShortSentMessage) Cmd() uint32 {
	return TagUpdateShortSentMessage
}

func (o *TLUpdateShortSentMessage) ReadBareFrom(r *tl.Reader) {
	o.Flags = uint(r.ReadUint32())
	o.Out = true
	o.ID = r.ReadInt()
	o.Pts = r.ReadInt()
	o.PtsCount = r.ReadInt()
	o.Date = r.ReadInt()
	o.Media = Schema.ReadLimitedBoxedObjectFrom(r, TagMessageMediaEmpty, TagMessageMediaPhoto, TagMessageMediaGeo, TagMessageMediaContact, TagMessageMediaUnsupported, TagMessageMediaDocument, TagMessageMediaWebPage, TagMessageMediaVenue, TagMessageMediaGame, TagMessageMediaInvoice).(TLMessageMediaType)
	if cmd := r.ReadCmd(); cmd != TagVector {
		r.Fail(errors.New("expected: vector"))
	}
	o.Entities = make([]TLMessageEntityType, r.ReadInt())
	for i := 0; i < len(o.Entities); i++ {
		o.Entities[i] = Schema.ReadLimitedBoxedObjectFrom(r, TagMessageEntityUnknown, TagMessageEntityMention, TagMessageEntityHashtag, TagMessageEntityBotCommand, TagMessageEntityUrl, TagMessageEntityEmail, TagMessageEntityBold, TagMessageEntityItalic, TagMessageEntityCode, TagMessageEntityPre, TagMessageEntityTextUrl, TagMessageEntityMentionName, TagInputMessageEntityMentionName).(TLMessageEntityType)
	}
}

func (o *TLUpdateShortSentMessage) WriteBareTo(w *tl.Writer) {
	w.WriteUint32(uint32(o.Flags))
	w.WriteInt(o.ID)
	w.WriteInt(o.Pts)
	w.WriteInt(o.PtsCount)
	w.WriteInt(o.Date)
	w.WriteCmd(o.Media.Cmd())
	o.Media.WriteBareTo(w)
	w.WriteCmd(TagVector)
	w.WriteInt(len(o.Entities))
	for i := 0; i < len(o.Entities); i++ {
		w.WriteCmd(o.Entities[i].Cmd())
		o.Entities[i].WriteBareTo(w)
	}
}

func (o *TLUpdateShortSentMessage) String() string {
	return tl.Pretty(o)
}

// TLPhotosPhotos represents ctor photos.photos#8dca6aa5 photos:Vector<Photo> users:Vector<User> = photos.Photos from Telegram
type TLPhotosPhotos struct {
	Photos []TLPhotoType // photos:Vector<Photo>
	Users  []TLUserType  // users:Vector<User>
}

func (o *TLPhotosPhotos) IsTLPhotosPhotos() {}

func (o *TLPhotosPhotos) Cmd() uint32 {
	return TagPhotosPhotos
}

func (o *TLPhotosPhotos) ReadBareFrom(r *tl.Reader) {
	if cmd := r.ReadCmd(); cmd != TagVector {
		r.Fail(errors.New("expected: vector"))
	}
	o.Photos = make([]TLPhotoType, r.ReadInt())
	for i := 0; i < len(o.Photos); i++ {
		o.Photos[i] = Schema.ReadLimitedBoxedObjectFrom(r, TagPhotoEmpty, TagPhoto).(TLPhotoType)
	}
	if cmd := r.ReadCmd(); cmd != TagVector {
		r.Fail(errors.New("expected: vector"))
	}
	o.Users = make([]TLUserType, r.ReadInt())
	for i := 0; i < len(o.Users); i++ {
		o.Users[i] = Schema.ReadLimitedBoxedObjectFrom(r, TagUserEmpty, TagUser).(TLUserType)
	}
}

func (o *TLPhotosPhotos) WriteBareTo(w *tl.Writer) {
	w.WriteCmd(TagVector)
	w.WriteInt(len(o.Photos))
	for i := 0; i < len(o.Photos); i++ {
		w.WriteCmd(o.Photos[i].Cmd())
		o.Photos[i].WriteBareTo(w)
	}
	w.WriteCmd(TagVector)
	w.WriteInt(len(o.Users))
	for i := 0; i < len(o.Users); i++ {
		w.WriteCmd(o.Users[i].Cmd())
		o.Users[i].WriteBareTo(w)
	}
}

func (o *TLPhotosPhotos) String() string {
	return tl.Pretty(o)
}

// TLPhotosPhotosSlice represents ctor photos.photosSlice#15051f54 count:int photos:Vector<Photo> users:Vector<User> = photos.Photos from Telegram
type TLPhotosPhotosSlice struct {
	Count  int           // count:int
	Photos []TLPhotoType // photos:Vector<Photo>
	Users  []TLUserType  // users:Vector<User>
}

func (o *TLPhotosPhotosSlice) IsTLPhotosPhotos() {}

func (o *TLPhotosPhotosSlice) Cmd() uint32 {
	return TagPhotosPhotosSlice
}

func (o *TLPhotosPhotosSlice) ReadBareFrom(r *tl.Reader) {
	o.Count = r.ReadInt()
	if cmd := r.ReadCmd(); cmd != TagVector {
		r.Fail(errors.New("expected: vector"))
	}
	o.Photos = make([]TLPhotoType, r.ReadInt())
	for i := 0; i < len(o.Photos); i++ {
		o.Photos[i] = Schema.ReadLimitedBoxedObjectFrom(r, TagPhotoEmpty, TagPhoto).(TLPhotoType)
	}
	if cmd := r.ReadCmd(); cmd != TagVector {
		r.Fail(errors.New("expected: vector"))
	}
	o.Users = make([]TLUserType, r.ReadInt())
	for i := 0; i < len(o.Users); i++ {
		o.Users[i] = Schema.ReadLimitedBoxedObjectFrom(r, TagUserEmpty, TagUser).(TLUserType)
	}
}

func (o *TLPhotosPhotosSlice) WriteBareTo(w *tl.Writer) {
	w.WriteInt(o.Count)
	w.WriteCmd(TagVector)
	w.WriteInt(len(o.Photos))
	for i := 0; i < len(o.Photos); i++ {
		w.WriteCmd(o.Photos[i].Cmd())
		o.Photos[i].WriteBareTo(w)
	}
	w.WriteCmd(TagVector)
	w.WriteInt(len(o.Users))
	for i := 0; i < len(o.Users); i++ {
		w.WriteCmd(o.Users[i].Cmd())
		o.Users[i].WriteBareTo(w)
	}
}

func (o *TLPhotosPhotosSlice) String() string {
	return tl.Pretty(o)
}

// TLHelpAppUpdate represents ctor help.appUpdate#8987f311 id:int critical:Bool url:string text:string = help.AppUpdate from Telegram
type TLHelpAppUpdate struct {
	ID       int    // id:int
	Critical bool   // critical:Bool
	Url      string // url:string
	Text     string // text:string
}

func (o *TLHelpAppUpdate) IsTLHelpAppUpdate() {}

func (o *TLHelpAppUpdate) Cmd() uint32 {
	return TagHelpAppUpdate
}

func (o *TLHelpAppUpdate) ReadBareFrom(r *tl.Reader) {
	o.ID = r.ReadInt()
	r.ExpectCmd(TagBoolTrue, TagBoolFalse)
	o.Critical = (r.ReadCmd() == TagBoolTrue)
	o.Url = r.ReadString()
	o.Text = r.ReadString()
}

func (o *TLHelpAppUpdate) WriteBareTo(w *tl.Writer) {
	w.WriteInt(o.ID)
	if o.Critical {
		w.WriteCmd(TagBoolTrue)
	} else {
		w.WriteCmd(TagBoolFalse)
	}
	w.WriteString(o.Url)
	w.WriteString(o.Text)
}

func (o *TLHelpAppUpdate) String() string {
	return tl.Pretty(o)
}

// TLHelpNoAppUpdate represents ctor help.noAppUpdate#c45a6536 = help.AppUpdate from Telegram
type TLHelpNoAppUpdate struct {
}

func (o *TLHelpNoAppUpdate) IsTLHelpAppUpdate() {}

func (o *TLHelpNoAppUpdate) Cmd() uint32 {
	return TagHelpNoAppUpdate
}

func (o *TLHelpNoAppUpdate) ReadBareFrom(r *tl.Reader) {
}

func (o *TLHelpNoAppUpdate) WriteBareTo(w *tl.Writer) {
}

func (o *TLHelpNoAppUpdate) String() string {
	return tl.Pretty(o)
}

// TLEncryptedChatEmpty represents ctor encryptedChatEmpty#ab7ec0a0 id:int = EncryptedChat from Telegram
type TLEncryptedChatEmpty struct {
	ID int // id:int
}

func (o *TLEncryptedChatEmpty) IsTLEncryptedChat() {}

func (o *TLEncryptedChatEmpty) Cmd() uint32 {
	return TagEncryptedChatEmpty
}

func (o *TLEncryptedChatEmpty) ReadBareFrom(r *tl.Reader) {
	o.ID = r.ReadInt()
}

func (o *TLEncryptedChatEmpty) WriteBareTo(w *tl.Writer) {
	w.WriteInt(o.ID)
}

func (o *TLEncryptedChatEmpty) String() string {
	return tl.Pretty(o)
}

// TLEncryptedChatWaiting represents ctor encryptedChatWaiting#3bf703dc id:int access_hash:long date:int admin_id:int participant_id:int = EncryptedChat from Telegram
type TLEncryptedChatWaiting struct {
	ID            int    // id:int
	AccessHash    uint64 // access_hash:long
	Date          int    // date:int
	AdminID       int    // admin_id:int
	ParticipantID int    // participant_id:int
}

func (o *TLEncryptedChatWaiting) IsTLEncryptedChat() {}

func (o *TLEncryptedChatWaiting) Cmd() uint32 {
	return TagEncryptedChatWaiting
}

func (o *TLEncryptedChatWaiting) ReadBareFrom(r *tl.Reader) {
	o.ID = r.ReadInt()
	o.AccessHash = r.ReadUint64()
	o.Date = r.ReadInt()
	o.AdminID = r.ReadInt()
	o.ParticipantID = r.ReadInt()
}

func (o *TLEncryptedChatWaiting) WriteBareTo(w *tl.Writer) {
	w.WriteInt(o.ID)
	w.WriteUint64(o.AccessHash)
	w.WriteInt(o.Date)
	w.WriteInt(o.AdminID)
	w.WriteInt(o.ParticipantID)
}

func (o *TLEncryptedChatWaiting) String() string {
	return tl.Pretty(o)
}

// TLEncryptedChatRequested represents ctor encryptedChatRequested#c878527e id:int access_hash:long date:int admin_id:int participant_id:int g_a:bytes = EncryptedChat from Telegram
type TLEncryptedChatRequested struct {
	ID            int    // id:int
	AccessHash    uint64 // access_hash:long
	Date          int    // date:int
	AdminID       int    // admin_id:int
	ParticipantID int    // participant_id:int
	GA            []byte // g_a:bytes
}

func (o *TLEncryptedChatRequested) IsTLEncryptedChat() {}

func (o *TLEncryptedChatRequested) Cmd() uint32 {
	return TagEncryptedChatRequested
}

func (o *TLEncryptedChatRequested) ReadBareFrom(r *tl.Reader) {
	o.ID = r.ReadInt()
	o.AccessHash = r.ReadUint64()
	o.Date = r.ReadInt()
	o.AdminID = r.ReadInt()
	o.ParticipantID = r.ReadInt()
	o.GA = r.ReadBlob()
}

func (o *TLEncryptedChatRequested) WriteBareTo(w *tl.Writer) {
	w.WriteInt(o.ID)
	w.WriteUint64(o.AccessHash)
	w.WriteInt(o.Date)
	w.WriteInt(o.AdminID)
	w.WriteInt(o.ParticipantID)
	w.WriteBlob(o.GA)
}

func (o *TLEncryptedChatRequested) String() string {
	return tl.Pretty(o)
}

// TLEncryptedChat represents ctor encryptedChat#fa56ce36 id:int access_hash:long date:int admin_id:int participant_id:int g_a_or_b:bytes key_fingerprint:long = EncryptedChat from Telegram
type TLEncryptedChat struct {
	ID             int    // id:int
	AccessHash     uint64 // access_hash:long
	Date           int    // date:int
	AdminID        int    // admin_id:int
	ParticipantID  int    // participant_id:int
	GAOrB          []byte // g_a_or_b:bytes
	KeyFingerprint uint64 // key_fingerprint:long
}

func (o *TLEncryptedChat) IsTLEncryptedChat() {}

func (o *TLEncryptedChat) Cmd() uint32 {
	return TagEncryptedChat
}

func (o *TLEncryptedChat) ReadBareFrom(r *tl.Reader) {
	o.ID = r.ReadInt()
	o.AccessHash = r.ReadUint64()
	o.Date = r.ReadInt()
	o.AdminID = r.ReadInt()
	o.ParticipantID = r.ReadInt()
	o.GAOrB = r.ReadBlob()
	o.KeyFingerprint = r.ReadUint64()
}

func (o *TLEncryptedChat) WriteBareTo(w *tl.Writer) {
	w.WriteInt(o.ID)
	w.WriteUint64(o.AccessHash)
	w.WriteInt(o.Date)
	w.WriteInt(o.AdminID)
	w.WriteInt(o.ParticipantID)
	w.WriteBlob(o.GAOrB)
	w.WriteUint64(o.KeyFingerprint)
}

func (o *TLEncryptedChat) String() string {
	return tl.Pretty(o)
}

// TLEncryptedChatDiscarded represents ctor encryptedChatDiscarded#13d6dd27 id:int = EncryptedChat from Telegram
type TLEncryptedChatDiscarded struct {
	ID int // id:int
}

func (o *TLEncryptedChatDiscarded) IsTLEncryptedChat() {}

func (o *TLEncryptedChatDiscarded) Cmd() uint32 {
	return TagEncryptedChatDiscarded
}

func (o *TLEncryptedChatDiscarded) ReadBareFrom(r *tl.Reader) {
	o.ID = r.ReadInt()
}

func (o *TLEncryptedChatDiscarded) WriteBareTo(w *tl.Writer) {
	w.WriteInt(o.ID)
}

func (o *TLEncryptedChatDiscarded) String() string {
	return tl.Pretty(o)
}

// TLEncryptedFileEmpty represents ctor encryptedFileEmpty#c21f497e = EncryptedFile from Telegram
type TLEncryptedFileEmpty struct {
}

func (o *TLEncryptedFileEmpty) IsTLEncryptedFile() {}

func (o *TLEncryptedFileEmpty) Cmd() uint32 {
	return TagEncryptedFileEmpty
}

func (o *TLEncryptedFileEmpty) ReadBareFrom(r *tl.Reader) {
}

func (o *TLEncryptedFileEmpty) WriteBareTo(w *tl.Writer) {
}

func (o *TLEncryptedFileEmpty) String() string {
	return tl.Pretty(o)
}

// TLEncryptedFile represents ctor encryptedFile#4a70994c id:long access_hash:long size:int dc_id:int key_fingerprint:int = EncryptedFile from Telegram
type TLEncryptedFile struct {
	ID             uint64 // id:long
	AccessHash     uint64 // access_hash:long
	Size           int    // size:int
	DCID           int    // dc_id:int
	KeyFingerprint int    // key_fingerprint:int
}

func (o *TLEncryptedFile) IsTLEncryptedFile() {}

func (o *TLEncryptedFile) Cmd() uint32 {
	return TagEncryptedFile
}

func (o *TLEncryptedFile) ReadBareFrom(r *tl.Reader) {
	o.ID = r.ReadUint64()
	o.AccessHash = r.ReadUint64()
	o.Size = r.ReadInt()
	o.DCID = r.ReadInt()
	o.KeyFingerprint = r.ReadInt()
}

func (o *TLEncryptedFile) WriteBareTo(w *tl.Writer) {
	w.WriteUint64(o.ID)
	w.WriteUint64(o.AccessHash)
	w.WriteInt(o.Size)
	w.WriteInt(o.DCID)
	w.WriteInt(o.KeyFingerprint)
}

func (o *TLEncryptedFile) String() string {
	return tl.Pretty(o)
}

// TLInputEncryptedFileEmpty represents ctor inputEncryptedFileEmpty#1837c364 = InputEncryptedFile from Telegram
type TLInputEncryptedFileEmpty struct {
}

func (o *TLInputEncryptedFileEmpty) IsTLInputEncryptedFile() {}

func (o *TLInputEncryptedFileEmpty) Cmd() uint32 {
	return TagInputEncryptedFileEmpty
}

func (o *TLInputEncryptedFileEmpty) ReadBareFrom(r *tl.Reader) {
}

func (o *TLInputEncryptedFileEmpty) WriteBareTo(w *tl.Writer) {
}

func (o *TLInputEncryptedFileEmpty) String() string {
	return tl.Pretty(o)
}

// TLInputEncryptedFileUploaded represents ctor inputEncryptedFileUploaded#64bd0306 id:long parts:int md5_checksum:string key_fingerprint:int = InputEncryptedFile from Telegram
type TLInputEncryptedFileUploaded struct {
	ID             uint64 // id:long
	Parts          int    // parts:int
	Md5Checksum    string // md5_checksum:string
	KeyFingerprint int    // key_fingerprint:int
}

func (o *TLInputEncryptedFileUploaded) IsTLInputEncryptedFile() {}

func (o *TLInputEncryptedFileUploaded) Cmd() uint32 {
	return TagInputEncryptedFileUploaded
}

func (o *TLInputEncryptedFileUploaded) ReadBareFrom(r *tl.Reader) {
	o.ID = r.ReadUint64()
	o.Parts = r.ReadInt()
	o.Md5Checksum = r.ReadString()
	o.KeyFingerprint = r.ReadInt()
}

func (o *TLInputEncryptedFileUploaded) WriteBareTo(w *tl.Writer) {
	w.WriteUint64(o.ID)
	w.WriteInt(o.Parts)
	w.WriteString(o.Md5Checksum)
	w.WriteInt(o.KeyFingerprint)
}

func (o *TLInputEncryptedFileUploaded) String() string {
	return tl.Pretty(o)
}

// TLInputEncryptedFile represents ctor inputEncryptedFile#5a17b5e5 id:long access_hash:long = InputEncryptedFile from Telegram
type TLInputEncryptedFile struct {
	ID         uint64 // id:long
	AccessHash uint64 // access_hash:long
}

func (o *TLInputEncryptedFile) IsTLInputEncryptedFile() {}

func (o *TLInputEncryptedFile) Cmd() uint32 {
	return TagInputEncryptedFile
}

func (o *TLInputEncryptedFile) ReadBareFrom(r *tl.Reader) {
	o.ID = r.ReadUint64()
	o.AccessHash = r.ReadUint64()
}

func (o *TLInputEncryptedFile) WriteBareTo(w *tl.Writer) {
	w.WriteUint64(o.ID)
	w.WriteUint64(o.AccessHash)
}

func (o *TLInputEncryptedFile) String() string {
	return tl.Pretty(o)
}

// TLInputEncryptedFileBigUploaded represents ctor inputEncryptedFileBigUploaded#2dc173c8 id:long parts:int key_fingerprint:int = InputEncryptedFile from Telegram
type TLInputEncryptedFileBigUploaded struct {
	ID             uint64 // id:long
	Parts          int    // parts:int
	KeyFingerprint int    // key_fingerprint:int
}

func (o *TLInputEncryptedFileBigUploaded) IsTLInputEncryptedFile() {}

func (o *TLInputEncryptedFileBigUploaded) Cmd() uint32 {
	return TagInputEncryptedFileBigUploaded
}

func (o *TLInputEncryptedFileBigUploaded) ReadBareFrom(r *tl.Reader) {
	o.ID = r.ReadUint64()
	o.Parts = r.ReadInt()
	o.KeyFingerprint = r.ReadInt()
}

func (o *TLInputEncryptedFileBigUploaded) WriteBareTo(w *tl.Writer) {
	w.WriteUint64(o.ID)
	w.WriteInt(o.Parts)
	w.WriteInt(o.KeyFingerprint)
}

func (o *TLInputEncryptedFileBigUploaded) String() string {
	return tl.Pretty(o)
}

// TLEncryptedMessage represents ctor encryptedMessage#ed18c118 random_id:long chat_id:int date:int bytes:bytes file:EncryptedFile = EncryptedMessage from Telegram
type TLEncryptedMessage struct {
	RandomID uint64              // random_id:long
	ChatID   int                 // chat_id:int
	Date     int                 // date:int
	Bytes    []byte              // bytes:bytes
	File     TLEncryptedFileType // file:EncryptedFile
}

func (o *TLEncryptedMessage) IsTLEncryptedMessage() {}

func (o *TLEncryptedMessage) Cmd() uint32 {
	return TagEncryptedMessage
}

func (o *TLEncryptedMessage) ReadBareFrom(r *tl.Reader) {
	o.RandomID = r.ReadUint64()
	o.ChatID = r.ReadInt()
	o.Date = r.ReadInt()
	o.Bytes = r.ReadBlob()
	o.File = Schema.ReadLimitedBoxedObjectFrom(r, TagEncryptedFileEmpty, TagEncryptedFile).(TLEncryptedFileType)
}

func (o *TLEncryptedMessage) WriteBareTo(w *tl.Writer) {
	w.WriteUint64(o.RandomID)
	w.WriteInt(o.ChatID)
	w.WriteInt(o.Date)
	w.WriteBlob(o.Bytes)
	w.WriteCmd(o.File.Cmd())
	o.File.WriteBareTo(w)
}

func (o *TLEncryptedMessage) String() string {
	return tl.Pretty(o)
}

// TLEncryptedMessageService represents ctor encryptedMessageService#23734b06 random_id:long chat_id:int date:int bytes:bytes = EncryptedMessage from Telegram
type TLEncryptedMessageService struct {
	RandomID uint64 // random_id:long
	ChatID   int    // chat_id:int
	Date     int    // date:int
	Bytes    []byte // bytes:bytes
}

func (o *TLEncryptedMessageService) IsTLEncryptedMessage() {}

func (o *TLEncryptedMessageService) Cmd() uint32 {
	return TagEncryptedMessageService
}

func (o *TLEncryptedMessageService) ReadBareFrom(r *tl.Reader) {
	o.RandomID = r.ReadUint64()
	o.ChatID = r.ReadInt()
	o.Date = r.ReadInt()
	o.Bytes = r.ReadBlob()
}

func (o *TLEncryptedMessageService) WriteBareTo(w *tl.Writer) {
	w.WriteUint64(o.RandomID)
	w.WriteInt(o.ChatID)
	w.WriteInt(o.Date)
	w.WriteBlob(o.Bytes)
}

func (o *TLEncryptedMessageService) String() string {
	return tl.Pretty(o)
}

// TLMessagesDHConfigNotModified represents ctor messages.dhConfigNotModified#c0e24635 random:bytes = messages.DhConfig from Telegram
type TLMessagesDHConfigNotModified struct {
	Random []byte // random:bytes
}

func (o *TLMessagesDHConfigNotModified) IsTLMessagesDHConfig() {}

func (o *TLMessagesDHConfigNotModified) Cmd() uint32 {
	return TagMessagesDHConfigNotModified
}

func (o *TLMessagesDHConfigNotModified) ReadBareFrom(r *tl.Reader) {
	o.Random = r.ReadBlob()
}

func (o *TLMessagesDHConfigNotModified) WriteBareTo(w *tl.Writer) {
	w.WriteBlob(o.Random)
}

func (o *TLMessagesDHConfigNotModified) String() string {
	return tl.Pretty(o)
}

// TLMessagesDHConfig represents ctor messages.dhConfig#2c221edd g:int p:bytes version:int random:bytes = messages.DhConfig from Telegram
type TLMessagesDHConfig struct {
	G       int    // g:int
	P       []byte // p:bytes
	Version int    // version:int
	Random  []byte // random:bytes
}

func (o *TLMessagesDHConfig) IsTLMessagesDHConfig() {}

func (o *TLMessagesDHConfig) Cmd() uint32 {
	return TagMessagesDHConfig
}

func (o *TLMessagesDHConfig) ReadBareFrom(r *tl.Reader) {
	o.G = r.ReadInt()
	o.P = r.ReadBlob()
	o.Version = r.ReadInt()
	o.Random = r.ReadBlob()
}

func (o *TLMessagesDHConfig) WriteBareTo(w *tl.Writer) {
	w.WriteInt(o.G)
	w.WriteBlob(o.P)
	w.WriteInt(o.Version)
	w.WriteBlob(o.Random)
}

func (o *TLMessagesDHConfig) String() string {
	return tl.Pretty(o)
}

// TLMessagesSentEncryptedMessage represents ctor messages.sentEncryptedMessage#560f8935 date:int = messages.SentEncryptedMessage from Telegram
type TLMessagesSentEncryptedMessage struct {
	Date int // date:int
}

func (o *TLMessagesSentEncryptedMessage) IsTLMessagesSentEncryptedMessage() {}

func (o *TLMessagesSentEncryptedMessage) Cmd() uint32 {
	return TagMessagesSentEncryptedMessage
}

func (o *TLMessagesSentEncryptedMessage) ReadBareFrom(r *tl.Reader) {
	o.Date = r.ReadInt()
}

func (o *TLMessagesSentEncryptedMessage) WriteBareTo(w *tl.Writer) {
	w.WriteInt(o.Date)
}

func (o *TLMessagesSentEncryptedMessage) String() string {
	return tl.Pretty(o)
}

// TLMessagesSentEncryptedFile represents ctor messages.sentEncryptedFile#9493ff32 date:int file:EncryptedFile = messages.SentEncryptedMessage from Telegram
type TLMessagesSentEncryptedFile struct {
	Date int                 // date:int
	File TLEncryptedFileType // file:EncryptedFile
}

func (o *TLMessagesSentEncryptedFile) IsTLMessagesSentEncryptedMessage() {}

func (o *TLMessagesSentEncryptedFile) Cmd() uint32 {
	return TagMessagesSentEncryptedFile
}

func (o *TLMessagesSentEncryptedFile) ReadBareFrom(r *tl.Reader) {
	o.Date = r.ReadInt()
	o.File = Schema.ReadLimitedBoxedObjectFrom(r, TagEncryptedFileEmpty, TagEncryptedFile).(TLEncryptedFileType)
}

func (o *TLMessagesSentEncryptedFile) WriteBareTo(w *tl.Writer) {
	w.WriteInt(o.Date)
	w.WriteCmd(o.File.Cmd())
	o.File.WriteBareTo(w)
}

func (o *TLMessagesSentEncryptedFile) String() string {
	return tl.Pretty(o)
}

// TLInputDocumentEmpty represents ctor inputDocumentEmpty#72f0eaae = InputDocument from Telegram
type TLInputDocumentEmpty struct {
}

func (o *TLInputDocumentEmpty) IsTLInputDocument() {}

func (o *TLInputDocumentEmpty) Cmd() uint32 {
	return TagInputDocumentEmpty
}

func (o *TLInputDocumentEmpty) ReadBareFrom(r *tl.Reader) {
}

func (o *TLInputDocumentEmpty) WriteBareTo(w *tl.Writer) {
}

func (o *TLInputDocumentEmpty) String() string {
	return tl.Pretty(o)
}

// TLInputDocument represents ctor inputDocument#18798952 id:long access_hash:long = InputDocument from Telegram
type TLInputDocument struct {
	ID         uint64 // id:long
	AccessHash uint64 // access_hash:long
}

func (o *TLInputDocument) IsTLInputDocument() {}

func (o *TLInputDocument) Cmd() uint32 {
	return TagInputDocument
}

func (o *TLInputDocument) ReadBareFrom(r *tl.Reader) {
	o.ID = r.ReadUint64()
	o.AccessHash = r.ReadUint64()
}

func (o *TLInputDocument) WriteBareTo(w *tl.Writer) {
	w.WriteUint64(o.ID)
	w.WriteUint64(o.AccessHash)
}

func (o *TLInputDocument) String() string {
	return tl.Pretty(o)
}

// TLDocumentEmpty represents ctor documentEmpty#36f8c871 id:long = Document from Telegram
type TLDocumentEmpty struct {
	ID uint64 // id:long
}

func (o *TLDocumentEmpty) IsTLDocument() {}

func (o *TLDocumentEmpty) Cmd() uint32 {
	return TagDocumentEmpty
}

func (o *TLDocumentEmpty) ReadBareFrom(r *tl.Reader) {
	o.ID = r.ReadUint64()
}

func (o *TLDocumentEmpty) WriteBareTo(w *tl.Writer) {
	w.WriteUint64(o.ID)
}

func (o *TLDocumentEmpty) String() string {
	return tl.Pretty(o)
}

// TLDocument represents ctor document#87232bc7 id:long access_hash:long date:int mime_type:string size:int thumb:PhotoSize dc_id:int version:int attributes:Vector<DocumentAttribute> = Document from Telegram
type TLDocument struct {
	ID         uint64                    // id:long
	AccessHash uint64                    // access_hash:long
	Date       int                       // date:int
	MimeType   string                    // mime_type:string
	Size       int                       // size:int
	Thumb      TLPhotoSizeType           // thumb:PhotoSize
	DCID       int                       // dc_id:int
	Version    int                       // version:int
	Attributes []TLDocumentAttributeType // attributes:Vector<DocumentAttribute>
}

func (o *TLDocument) IsTLDocument() {}

func (o *TLDocument) Cmd() uint32 {
	return TagDocument
}

func (o *TLDocument) ReadBareFrom(r *tl.Reader) {
	o.ID = r.ReadUint64()
	o.AccessHash = r.ReadUint64()
	o.Date = r.ReadInt()
	o.MimeType = r.ReadString()
	o.Size = r.ReadInt()
	o.Thumb = Schema.ReadLimitedBoxedObjectFrom(r, TagPhotoSizeEmpty, TagPhotoSize, TagPhotoCachedSize).(TLPhotoSizeType)
	o.DCID = r.ReadInt()
	o.Version = r.ReadInt()
	if cmd := r.ReadCmd(); cmd != TagVector {
		r.Fail(errors.New("expected: vector"))
	}
	o.Attributes = make([]TLDocumentAttributeType, r.ReadInt())
	for i := 0; i < len(o.Attributes); i++ {
		o.Attributes[i] = Schema.ReadLimitedBoxedObjectFrom(r, TagDocumentAttributeImageSize, TagDocumentAttributeAnimated, TagDocumentAttributeSticker, TagDocumentAttributeVideo, TagDocumentAttributeAudio, TagDocumentAttributeFilename, TagDocumentAttributeHasStickers).(TLDocumentAttributeType)
	}
}

func (o *TLDocument) WriteBareTo(w *tl.Writer) {
	w.WriteUint64(o.ID)
	w.WriteUint64(o.AccessHash)
	w.WriteInt(o.Date)
	w.WriteString(o.MimeType)
	w.WriteInt(o.Size)
	w.WriteCmd(o.Thumb.Cmd())
	o.Thumb.WriteBareTo(w)
	w.WriteInt(o.DCID)
	w.WriteInt(o.Version)
	w.WriteCmd(TagVector)
	w.WriteInt(len(o.Attributes))
	for i := 0; i < len(o.Attributes); i++ {
		w.WriteCmd(o.Attributes[i].Cmd())
		o.Attributes[i].WriteBareTo(w)
	}
}

func (o *TLDocument) String() string {
	return tl.Pretty(o)
}

// TLNotifyPeer represents ctor notifyPeer#9fd40bd8 peer:Peer = NotifyPeer from Telegram
type TLNotifyPeer struct {
	Peer TLPeerType // peer:Peer
}

func (o *TLNotifyPeer) IsTLNotifyPeer() {}

func (o *TLNotifyPeer) Cmd() uint32 {
	return TagNotifyPeer
}

func (o *TLNotifyPeer) ReadBareFrom(r *tl.Reader) {
	o.Peer = Schema.ReadLimitedBoxedObjectFrom(r, TagPeerUser, TagPeerChat, TagPeerChannel).(TLPeerType)
}

func (o *TLNotifyPeer) WriteBareTo(w *tl.Writer) {
	w.WriteCmd(o.Peer.Cmd())
	o.Peer.WriteBareTo(w)
}

func (o *TLNotifyPeer) String() string {
	return tl.Pretty(o)
}

// TLNotifyUsers represents ctor notifyUsers#b4c83b4c = NotifyPeer from Telegram
type TLNotifyUsers struct {
}

func (o *TLNotifyUsers) IsTLNotifyPeer() {}

func (o *TLNotifyUsers) Cmd() uint32 {
	return TagNotifyUsers
}

func (o *TLNotifyUsers) ReadBareFrom(r *tl.Reader) {
}

func (o *TLNotifyUsers) WriteBareTo(w *tl.Writer) {
}

func (o *TLNotifyUsers) String() string {
	return tl.Pretty(o)
}

// TLNotifyChats represents ctor notifyChats#c007cec3 = NotifyPeer from Telegram
type TLNotifyChats struct {
}

func (o *TLNotifyChats) IsTLNotifyPeer() {}

func (o *TLNotifyChats) Cmd() uint32 {
	return TagNotifyChats
}

func (o *TLNotifyChats) ReadBareFrom(r *tl.Reader) {
}

func (o *TLNotifyChats) WriteBareTo(w *tl.Writer) {
}

func (o *TLNotifyChats) String() string {
	return tl.Pretty(o)
}

// TLNotifyAll represents ctor notifyAll#74d07c60 = NotifyPeer from Telegram
type TLNotifyAll struct {
}

func (o *TLNotifyAll) IsTLNotifyPeer() {}

func (o *TLNotifyAll) Cmd() uint32 {
	return TagNotifyAll
}

func (o *TLNotifyAll) ReadBareFrom(r *tl.Reader) {
}

func (o *TLNotifyAll) WriteBareTo(w *tl.Writer) {
}

func (o *TLNotifyAll) String() string {
	return tl.Pretty(o)
}

// TLSendMessageTypingAction represents ctor sendMessageTypingAction#16bf744e = SendMessageAction from Telegram
type TLSendMessageTypingAction struct {
}

func (o *TLSendMessageTypingAction) IsTLSendMessageAction() {}

func (o *TLSendMessageTypingAction) Cmd() uint32 {
	return TagSendMessageTypingAction
}

func (o *TLSendMessageTypingAction) ReadBareFrom(r *tl.Reader) {
}

func (o *TLSendMessageTypingAction) WriteBareTo(w *tl.Writer) {
}

func (o *TLSendMessageTypingAction) String() string {
	return tl.Pretty(o)
}

// TLSendMessageCancelAction represents ctor sendMessageCancelAction#fd5ec8f5 = SendMessageAction from Telegram
type TLSendMessageCancelAction struct {
}

func (o *TLSendMessageCancelAction) IsTLSendMessageAction() {}

func (o *TLSendMessageCancelAction) Cmd() uint32 {
	return TagSendMessageCancelAction
}

func (o *TLSendMessageCancelAction) ReadBareFrom(r *tl.Reader) {
}

func (o *TLSendMessageCancelAction) WriteBareTo(w *tl.Writer) {
}

func (o *TLSendMessageCancelAction) String() string {
	return tl.Pretty(o)
}

// TLSendMessageRecordVideoAction represents ctor sendMessageRecordVideoAction#a187d66f = SendMessageAction from Telegram
type TLSendMessageRecordVideoAction struct {
}

func (o *TLSendMessageRecordVideoAction) IsTLSendMessageAction() {}

func (o *TLSendMessageRecordVideoAction) Cmd() uint32 {
	return TagSendMessageRecordVideoAction
}

func (o *TLSendMessageRecordVideoAction) ReadBareFrom(r *tl.Reader) {
}

func (o *TLSendMessageRecordVideoAction) WriteBareTo(w *tl.Writer) {
}

func (o *TLSendMessageRecordVideoAction) String() string {
	return tl.Pretty(o)
}

// TLSendMessageUploadVideoAction represents ctor sendMessageUploadVideoAction#e9763aec progress:int = SendMessageAction from Telegram
type TLSendMessageUploadVideoAction struct {
	Progress int // progress:int
}

func (o *TLSendMessageUploadVideoAction) IsTLSendMessageAction() {}

func (o *TLSendMessageUploadVideoAction) Cmd() uint32 {
	return TagSendMessageUploadVideoAction
}

func (o *TLSendMessageUploadVideoAction) ReadBareFrom(r *tl.Reader) {
	o.Progress = r.ReadInt()
}

func (o *TLSendMessageUploadVideoAction) WriteBareTo(w *tl.Writer) {
	w.WriteInt(o.Progress)
}

func (o *TLSendMessageUploadVideoAction) String() string {
	return tl.Pretty(o)
}

// TLSendMessageRecordAudioAction represents ctor sendMessageRecordAudioAction#d52f73f7 = SendMessageAction from Telegram
type TLSendMessageRecordAudioAction struct {
}

func (o *TLSendMessageRecordAudioAction) IsTLSendMessageAction() {}

func (o *TLSendMessageRecordAudioAction) Cmd() uint32 {
	return TagSendMessageRecordAudioAction
}

func (o *TLSendMessageRecordAudioAction) ReadBareFrom(r *tl.Reader) {
}

func (o *TLSendMessageRecordAudioAction) WriteBareTo(w *tl.Writer) {
}

func (o *TLSendMessageRecordAudioAction) String() string {
	return tl.Pretty(o)
}

// TLSendMessageUploadAudioAction represents ctor sendMessageUploadAudioAction#f351d7ab progress:int = SendMessageAction from Telegram
type TLSendMessageUploadAudioAction struct {
	Progress int // progress:int
}

func (o *TLSendMessageUploadAudioAction) IsTLSendMessageAction() {}

func (o *TLSendMessageUploadAudioAction) Cmd() uint32 {
	return TagSendMessageUploadAudioAction
}

func (o *TLSendMessageUploadAudioAction) ReadBareFrom(r *tl.Reader) {
	o.Progress = r.ReadInt()
}

func (o *TLSendMessageUploadAudioAction) WriteBareTo(w *tl.Writer) {
	w.WriteInt(o.Progress)
}

func (o *TLSendMessageUploadAudioAction) String() string {
	return tl.Pretty(o)
}

// TLSendMessageUploadPhotoAction represents ctor sendMessageUploadPhotoAction#d1d34a26 progress:int = SendMessageAction from Telegram
type TLSendMessageUploadPhotoAction struct {
	Progress int // progress:int
}

func (o *TLSendMessageUploadPhotoAction) IsTLSendMessageAction() {}

func (o *TLSendMessageUploadPhotoAction) Cmd() uint32 {
	return TagSendMessageUploadPhotoAction
}

func (o *TLSendMessageUploadPhotoAction) ReadBareFrom(r *tl.Reader) {
	o.Progress = r.ReadInt()
}

func (o *TLSendMessageUploadPhotoAction) WriteBareTo(w *tl.Writer) {
	w.WriteInt(o.Progress)
}

func (o *TLSendMessageUploadPhotoAction) String() string {
	return tl.Pretty(o)
}

// TLSendMessageUploadDocumentAction represents ctor sendMessageUploadDocumentAction#aa0cd9e4 progress:int = SendMessageAction from Telegram
type TLSendMessageUploadDocumentAction struct {
	Progress int // progress:int
}

func (o *TLSendMessageUploadDocumentAction) IsTLSendMessageAction() {}

func (o *TLSendMessageUploadDocumentAction) Cmd() uint32 {
	return TagSendMessageUploadDocumentAction
}

func (o *TLSendMessageUploadDocumentAction) ReadBareFrom(r *tl.Reader) {
	o.Progress = r.ReadInt()
}

func (o *TLSendMessageUploadDocumentAction) WriteBareTo(w *tl.Writer) {
	w.WriteInt(o.Progress)
}

func (o *TLSendMessageUploadDocumentAction) String() string {
	return tl.Pretty(o)
}

// TLSendMessageGeoLocationAction represents ctor sendMessageGeoLocationAction#176f8ba1 = SendMessageAction from Telegram
type TLSendMessageGeoLocationAction struct {
}

func (o *TLSendMessageGeoLocationAction) IsTLSendMessageAction() {}

func (o *TLSendMessageGeoLocationAction) Cmd() uint32 {
	return TagSendMessageGeoLocationAction
}

func (o *TLSendMessageGeoLocationAction) ReadBareFrom(r *tl.Reader) {
}

func (o *TLSendMessageGeoLocationAction) WriteBareTo(w *tl.Writer) {
}

func (o *TLSendMessageGeoLocationAction) String() string {
	return tl.Pretty(o)
}

// TLSendMessageChooseContactAction represents ctor sendMessageChooseContactAction#628cbc6f = SendMessageAction from Telegram
type TLSendMessageChooseContactAction struct {
}

func (o *TLSendMessageChooseContactAction) IsTLSendMessageAction() {}

func (o *TLSendMessageChooseContactAction) Cmd() uint32 {
	return TagSendMessageChooseContactAction
}

func (o *TLSendMessageChooseContactAction) ReadBareFrom(r *tl.Reader) {
}

func (o *TLSendMessageChooseContactAction) WriteBareTo(w *tl.Writer) {
}

func (o *TLSendMessageChooseContactAction) String() string {
	return tl.Pretty(o)
}

// TLSendMessageGamePlayAction represents ctor sendMessageGamePlayAction#dd6a8f48 = SendMessageAction from Telegram
type TLSendMessageGamePlayAction struct {
}

func (o *TLSendMessageGamePlayAction) IsTLSendMessageAction() {}

func (o *TLSendMessageGamePlayAction) Cmd() uint32 {
	return TagSendMessageGamePlayAction
}

func (o *TLSendMessageGamePlayAction) ReadBareFrom(r *tl.Reader) {
}

func (o *TLSendMessageGamePlayAction) WriteBareTo(w *tl.Writer) {
}

func (o *TLSendMessageGamePlayAction) String() string {
	return tl.Pretty(o)
}

// TLInputPrivacyKeyStatusTimestamp represents ctor inputPrivacyKeyStatusTimestamp#4f96cb18 = InputPrivacyKey from Telegram
type TLInputPrivacyKeyStatusTimestamp struct {
}

func (o *TLInputPrivacyKeyStatusTimestamp) IsTLInputPrivacyKey() {}

func (o *TLInputPrivacyKeyStatusTimestamp) Cmd() uint32 {
	return TagInputPrivacyKeyStatusTimestamp
}

func (o *TLInputPrivacyKeyStatusTimestamp) ReadBareFrom(r *tl.Reader) {
}

func (o *TLInputPrivacyKeyStatusTimestamp) WriteBareTo(w *tl.Writer) {
}

func (o *TLInputPrivacyKeyStatusTimestamp) String() string {
	return tl.Pretty(o)
}

// TLInputPrivacyKeyChatInvite represents ctor inputPrivacyKeyChatInvite#bdfb0426 = InputPrivacyKey from Telegram
type TLInputPrivacyKeyChatInvite struct {
}

func (o *TLInputPrivacyKeyChatInvite) IsTLInputPrivacyKey() {}

func (o *TLInputPrivacyKeyChatInvite) Cmd() uint32 {
	return TagInputPrivacyKeyChatInvite
}

func (o *TLInputPrivacyKeyChatInvite) ReadBareFrom(r *tl.Reader) {
}

func (o *TLInputPrivacyKeyChatInvite) WriteBareTo(w *tl.Writer) {
}

func (o *TLInputPrivacyKeyChatInvite) String() string {
	return tl.Pretty(o)
}

// TLInputPrivacyKeyPhoneCall represents ctor inputPrivacyKeyPhoneCall#fabadc5f = InputPrivacyKey from Telegram
type TLInputPrivacyKeyPhoneCall struct {
}

func (o *TLInputPrivacyKeyPhoneCall) IsTLInputPrivacyKey() {}

func (o *TLInputPrivacyKeyPhoneCall) Cmd() uint32 {
	return TagInputPrivacyKeyPhoneCall
}

func (o *TLInputPrivacyKeyPhoneCall) ReadBareFrom(r *tl.Reader) {
}

func (o *TLInputPrivacyKeyPhoneCall) WriteBareTo(w *tl.Writer) {
}

func (o *TLInputPrivacyKeyPhoneCall) String() string {
	return tl.Pretty(o)
}

// TLPrivacyKeyStatusTimestamp represents ctor privacyKeyStatusTimestamp#bc2eab30 = PrivacyKey from Telegram
type TLPrivacyKeyStatusTimestamp struct {
}

func (o *TLPrivacyKeyStatusTimestamp) IsTLPrivacyKey() {}

func (o *TLPrivacyKeyStatusTimestamp) Cmd() uint32 {
	return TagPrivacyKeyStatusTimestamp
}

func (o *TLPrivacyKeyStatusTimestamp) ReadBareFrom(r *tl.Reader) {
}

func (o *TLPrivacyKeyStatusTimestamp) WriteBareTo(w *tl.Writer) {
}

func (o *TLPrivacyKeyStatusTimestamp) String() string {
	return tl.Pretty(o)
}

// TLPrivacyKeyChatInvite represents ctor privacyKeyChatInvite#500e6dfa = PrivacyKey from Telegram
type TLPrivacyKeyChatInvite struct {
}

func (o *TLPrivacyKeyChatInvite) IsTLPrivacyKey() {}

func (o *TLPrivacyKeyChatInvite) Cmd() uint32 {
	return TagPrivacyKeyChatInvite
}

func (o *TLPrivacyKeyChatInvite) ReadBareFrom(r *tl.Reader) {
}

func (o *TLPrivacyKeyChatInvite) WriteBareTo(w *tl.Writer) {
}

func (o *TLPrivacyKeyChatInvite) String() string {
	return tl.Pretty(o)
}

// TLPrivacyKeyPhoneCall represents ctor privacyKeyPhoneCall#3d662b7b = PrivacyKey from Telegram
type TLPrivacyKeyPhoneCall struct {
}

func (o *TLPrivacyKeyPhoneCall) IsTLPrivacyKey() {}

func (o *TLPrivacyKeyPhoneCall) Cmd() uint32 {
	return TagPrivacyKeyPhoneCall
}

func (o *TLPrivacyKeyPhoneCall) ReadBareFrom(r *tl.Reader) {
}

func (o *TLPrivacyKeyPhoneCall) WriteBareTo(w *tl.Writer) {
}

func (o *TLPrivacyKeyPhoneCall) String() string {
	return tl.Pretty(o)
}

// TLInputPrivacyValueAllowContacts represents ctor inputPrivacyValueAllowContacts#0d09e07b = InputPrivacyRule from Telegram
type TLInputPrivacyValueAllowContacts struct {
}

func (o *TLInputPrivacyValueAllowContacts) IsTLInputPrivacyRule() {}

func (o *TLInputPrivacyValueAllowContacts) Cmd() uint32 {
	return TagInputPrivacyValueAllowContacts
}

func (o *TLInputPrivacyValueAllowContacts) ReadBareFrom(r *tl.Reader) {
}

func (o *TLInputPrivacyValueAllowContacts) WriteBareTo(w *tl.Writer) {
}

func (o *TLInputPrivacyValueAllowContacts) String() string {
	return tl.Pretty(o)
}

// TLInputPrivacyValueAllowAll represents ctor inputPrivacyValueAllowAll#184b35ce = InputPrivacyRule from Telegram
type TLInputPrivacyValueAllowAll struct {
}

func (o *TLInputPrivacyValueAllowAll) IsTLInputPrivacyRule() {}

func (o *TLInputPrivacyValueAllowAll) Cmd() uint32 {
	return TagInputPrivacyValueAllowAll
}

func (o *TLInputPrivacyValueAllowAll) ReadBareFrom(r *tl.Reader) {
}

func (o *TLInputPrivacyValueAllowAll) WriteBareTo(w *tl.Writer) {
}

func (o *TLInputPrivacyValueAllowAll) String() string {
	return tl.Pretty(o)
}

// TLInputPrivacyValueAllowUsers represents ctor inputPrivacyValueAllowUsers#131cc67f users:Vector<InputUser> = InputPrivacyRule from Telegram
type TLInputPrivacyValueAllowUsers struct {
	Users []TLInputUserType // users:Vector<InputUser>
}

func (o *TLInputPrivacyValueAllowUsers) IsTLInputPrivacyRule() {}

func (o *TLInputPrivacyValueAllowUsers) Cmd() uint32 {
	return TagInputPrivacyValueAllowUsers
}

func (o *TLInputPrivacyValueAllowUsers) ReadBareFrom(r *tl.Reader) {
	if cmd := r.ReadCmd(); cmd != TagVector {
		r.Fail(errors.New("expected: vector"))
	}
	o.Users = make([]TLInputUserType, r.ReadInt())
	for i := 0; i < len(o.Users); i++ {
		o.Users[i] = Schema.ReadLimitedBoxedObjectFrom(r, TagInputUserEmpty, TagInputUserSelf, TagInputUser).(TLInputUserType)
	}
}

func (o *TLInputPrivacyValueAllowUsers) WriteBareTo(w *tl.Writer) {
	w.WriteCmd(TagVector)
	w.WriteInt(len(o.Users))
	for i := 0; i < len(o.Users); i++ {
		w.WriteCmd(o.Users[i].Cmd())
		o.Users[i].WriteBareTo(w)
	}
}

func (o *TLInputPrivacyValueAllowUsers) String() string {
	return tl.Pretty(o)
}

// TLInputPrivacyValueDisallowContacts represents ctor inputPrivacyValueDisallowContacts#0ba52007 = InputPrivacyRule from Telegram
type TLInputPrivacyValueDisallowContacts struct {
}

func (o *TLInputPrivacyValueDisallowContacts) IsTLInputPrivacyRule() {}

func (o *TLInputPrivacyValueDisallowContacts) Cmd() uint32 {
	return TagInputPrivacyValueDisallowContacts
}

func (o *TLInputPrivacyValueDisallowContacts) ReadBareFrom(r *tl.Reader) {
}

func (o *TLInputPrivacyValueDisallowContacts) WriteBareTo(w *tl.Writer) {
}

func (o *TLInputPrivacyValueDisallowContacts) String() string {
	return tl.Pretty(o)
}

// TLInputPrivacyValueDisallowAll represents ctor inputPrivacyValueDisallowAll#d66b66c9 = InputPrivacyRule from Telegram
type TLInputPrivacyValueDisallowAll struct {
}

func (o *TLInputPrivacyValueDisallowAll) IsTLInputPrivacyRule() {}

func (o *TLInputPrivacyValueDisallowAll) Cmd() uint32 {
	return TagInputPrivacyValueDisallowAll
}

func (o *TLInputPrivacyValueDisallowAll) ReadBareFrom(r *tl.Reader) {
}

func (o *TLInputPrivacyValueDisallowAll) WriteBareTo(w *tl.Writer) {
}

func (o *TLInputPrivacyValueDisallowAll) String() string {
	return tl.Pretty(o)
}

// TLInputPrivacyValueDisallowUsers represents ctor inputPrivacyValueDisallowUsers#90110467 users:Vector<InputUser> = InputPrivacyRule from Telegram
type TLInputPrivacyValueDisallowUsers struct {
	Users []TLInputUserType // users:Vector<InputUser>
}

func (o *TLInputPrivacyValueDisallowUsers) IsTLInputPrivacyRule() {}

func (o *TLInputPrivacyValueDisallowUsers) Cmd() uint32 {
	return TagInputPrivacyValueDisallowUsers
}

func (o *TLInputPrivacyValueDisallowUsers) ReadBareFrom(r *tl.Reader) {
	if cmd := r.ReadCmd(); cmd != TagVector {
		r.Fail(errors.New("expected: vector"))
	}
	o.Users = make([]TLInputUserType, r.ReadInt())
	for i := 0; i < len(o.Users); i++ {
		o.Users[i] = Schema.ReadLimitedBoxedObjectFrom(r, TagInputUserEmpty, TagInputUserSelf, TagInputUser).(TLInputUserType)
	}
}

func (o *TLInputPrivacyValueDisallowUsers) WriteBareTo(w *tl.Writer) {
	w.WriteCmd(TagVector)
	w.WriteInt(len(o.Users))
	for i := 0; i < len(o.Users); i++ {
		w.WriteCmd(o.Users[i].Cmd())
		o.Users[i].WriteBareTo(w)
	}
}

func (o *TLInputPrivacyValueDisallowUsers) String() string {
	return tl.Pretty(o)
}

// TLPrivacyValueAllowContacts represents ctor privacyValueAllowContacts#fffe1bac = PrivacyRule from Telegram
type TLPrivacyValueAllowContacts struct {
}

func (o *TLPrivacyValueAllowContacts) IsTLPrivacyRule() {}

func (o *TLPrivacyValueAllowContacts) Cmd() uint32 {
	return TagPrivacyValueAllowContacts
}

func (o *TLPrivacyValueAllowContacts) ReadBareFrom(r *tl.Reader) {
}

func (o *TLPrivacyValueAllowContacts) WriteBareTo(w *tl.Writer) {
}

func (o *TLPrivacyValueAllowContacts) String() string {
	return tl.Pretty(o)
}

// TLPrivacyValueAllowAll represents ctor privacyValueAllowAll#65427b82 = PrivacyRule from Telegram
type TLPrivacyValueAllowAll struct {
}

func (o *TLPrivacyValueAllowAll) IsTLPrivacyRule() {}

func (o *TLPrivacyValueAllowAll) Cmd() uint32 {
	return TagPrivacyValueAllowAll
}

func (o *TLPrivacyValueAllowAll) ReadBareFrom(r *tl.Reader) {
}

func (o *TLPrivacyValueAllowAll) WriteBareTo(w *tl.Writer) {
}

func (o *TLPrivacyValueAllowAll) String() string {
	return tl.Pretty(o)
}

// TLPrivacyValueAllowUsers represents ctor privacyValueAllowUsers#4d5bbe0c users:Vector<int> = PrivacyRule from Telegram
type TLPrivacyValueAllowUsers struct {
	Users []int // users:Vector<int>
}

func (o *TLPrivacyValueAllowUsers) IsTLPrivacyRule() {}

func (o *TLPrivacyValueAllowUsers) Cmd() uint32 {
	return TagPrivacyValueAllowUsers
}

func (o *TLPrivacyValueAllowUsers) ReadBareFrom(r *tl.Reader) {
	if cmd := r.ReadCmd(); cmd != TagVector {
		r.Fail(errors.New("expected: vector"))
	}
	o.Users = make([]int, r.ReadInt())
	for i := 0; i < len(o.Users); i++ {
		o.Users[i] = r.ReadInt()
	}
}

func (o *TLPrivacyValueAllowUsers) WriteBareTo(w *tl.Writer) {
	w.WriteCmd(TagVector)
	w.WriteInt(len(o.Users))
	for i := 0; i < len(o.Users); i++ {
		w.WriteInt(o.Users[i])
	}
}

func (o *TLPrivacyValueAllowUsers) String() string {
	return tl.Pretty(o)
}

// TLPrivacyValueDisallowContacts represents ctor privacyValueDisallowContacts#f888fa1a = PrivacyRule from Telegram
type TLPrivacyValueDisallowContacts struct {
}

func (o *TLPrivacyValueDisallowContacts) IsTLPrivacyRule() {}

func (o *TLPrivacyValueDisallowContacts) Cmd() uint32 {
	return TagPrivacyValueDisallowContacts
}

func (o *TLPrivacyValueDisallowContacts) ReadBareFrom(r *tl.Reader) {
}

func (o *TLPrivacyValueDisallowContacts) WriteBareTo(w *tl.Writer) {
}

func (o *TLPrivacyValueDisallowContacts) String() string {
	return tl.Pretty(o)
}

// TLPrivacyValueDisallowAll represents ctor privacyValueDisallowAll#8b73e763 = PrivacyRule from Telegram
type TLPrivacyValueDisallowAll struct {
}

func (o *TLPrivacyValueDisallowAll) IsTLPrivacyRule() {}

func (o *TLPrivacyValueDisallowAll) Cmd() uint32 {
	return TagPrivacyValueDisallowAll
}

func (o *TLPrivacyValueDisallowAll) ReadBareFrom(r *tl.Reader) {
}

func (o *TLPrivacyValueDisallowAll) WriteBareTo(w *tl.Writer) {
}

func (o *TLPrivacyValueDisallowAll) String() string {
	return tl.Pretty(o)
}

// TLPrivacyValueDisallowUsers represents ctor privacyValueDisallowUsers#0c7f49b7 users:Vector<int> = PrivacyRule from Telegram
type TLPrivacyValueDisallowUsers struct {
	Users []int // users:Vector<int>
}

func (o *TLPrivacyValueDisallowUsers) IsTLPrivacyRule() {}

func (o *TLPrivacyValueDisallowUsers) Cmd() uint32 {
	return TagPrivacyValueDisallowUsers
}

func (o *TLPrivacyValueDisallowUsers) ReadBareFrom(r *tl.Reader) {
	if cmd := r.ReadCmd(); cmd != TagVector {
		r.Fail(errors.New("expected: vector"))
	}
	o.Users = make([]int, r.ReadInt())
	for i := 0; i < len(o.Users); i++ {
		o.Users[i] = r.ReadInt()
	}
}

func (o *TLPrivacyValueDisallowUsers) WriteBareTo(w *tl.Writer) {
	w.WriteCmd(TagVector)
	w.WriteInt(len(o.Users))
	for i := 0; i < len(o.Users); i++ {
		w.WriteInt(o.Users[i])
	}
}

func (o *TLPrivacyValueDisallowUsers) String() string {
	return tl.Pretty(o)
}

// TLDocumentAttributeImageSize represents ctor documentAttributeImageSize#6c37c15c w:int h:int = DocumentAttribute from Telegram
type TLDocumentAttributeImageSize struct {
	W int // w:int
	H int // h:int
}

func (o *TLDocumentAttributeImageSize) IsTLDocumentAttribute() {}

func (o *TLDocumentAttributeImageSize) Cmd() uint32 {
	return TagDocumentAttributeImageSize
}

func (o *TLDocumentAttributeImageSize) ReadBareFrom(r *tl.Reader) {
	o.W = r.ReadInt()
	o.H = r.ReadInt()
}

func (o *TLDocumentAttributeImageSize) WriteBareTo(w *tl.Writer) {
	w.WriteInt(o.W)
	w.WriteInt(o.H)
}

func (o *TLDocumentAttributeImageSize) String() string {
	return tl.Pretty(o)
}

// TLDocumentAttributeAnimated represents ctor documentAttributeAnimated#11b58939 = DocumentAttribute from Telegram
type TLDocumentAttributeAnimated struct {
}

func (o *TLDocumentAttributeAnimated) IsTLDocumentAttribute() {}

func (o *TLDocumentAttributeAnimated) Cmd() uint32 {
	return TagDocumentAttributeAnimated
}

func (o *TLDocumentAttributeAnimated) ReadBareFrom(r *tl.Reader) {
}

func (o *TLDocumentAttributeAnimated) WriteBareTo(w *tl.Writer) {
}

func (o *TLDocumentAttributeAnimated) String() string {
	return tl.Pretty(o)
}

// TLDocumentAttributeSticker represents ctor documentAttributeSticker#6319d612 flags:# flags.1?mask:true alt:string stickerset:InputStickerSet flags.0?mask_coords:MaskCoords = DocumentAttribute from Telegram
type TLDocumentAttributeSticker struct {
	Flags      uint                  // flags:#
	Mask       bool                  // flags.1?mask:true
	Alt        string                // alt:string
	Stickerset TLInputStickerSetType // stickerset:InputStickerSet
	MaskCoords *TLMaskCoords         // flags.0?mask_coords:MaskCoords
}

func (o *TLDocumentAttributeSticker) IsTLDocumentAttribute() {}

func (o *TLDocumentAttributeSticker) Cmd() uint32 {
	return TagDocumentAttributeSticker
}

func (o *TLDocumentAttributeSticker) ReadBareFrom(r *tl.Reader) {
	o.Flags = uint(r.ReadUint32())
	o.Mask = true
	o.Alt = r.ReadString()
	o.Stickerset = Schema.ReadLimitedBoxedObjectFrom(r, TagInputStickerSetEmpty, TagInputStickerSetID, TagInputStickerSetShortName).(TLInputStickerSetType)
	if cmd := r.ReadCmd(); cmd != TagMaskCoords {
		r.Fail(errors.New("expected: maskCoords"))
	}
	o.MaskCoords = new(TLMaskCoords)
	o.MaskCoords.ReadBareFrom(r)
}

func (o *TLDocumentAttributeSticker) WriteBareTo(w *tl.Writer) {
	w.WriteUint32(uint32(o.Flags))
	w.WriteString(o.Alt)
	w.WriteCmd(o.Stickerset.Cmd())
	o.Stickerset.WriteBareTo(w)
	w.WriteCmd(TagMaskCoords)
	o.MaskCoords.WriteBareTo(w)
}

func (o *TLDocumentAttributeSticker) String() string {
	return tl.Pretty(o)
}

// TLDocumentAttributeVideo represents ctor documentAttributeVideo#5910cccb duration:int w:int h:int = DocumentAttribute from Telegram
type TLDocumentAttributeVideo struct {
	Duration int // duration:int
	W        int // w:int
	H        int // h:int
}

func (o *TLDocumentAttributeVideo) IsTLDocumentAttribute() {}

func (o *TLDocumentAttributeVideo) Cmd() uint32 {
	return TagDocumentAttributeVideo
}

func (o *TLDocumentAttributeVideo) ReadBareFrom(r *tl.Reader) {
	o.Duration = r.ReadInt()
	o.W = r.ReadInt()
	o.H = r.ReadInt()
}

func (o *TLDocumentAttributeVideo) WriteBareTo(w *tl.Writer) {
	w.WriteInt(o.Duration)
	w.WriteInt(o.W)
	w.WriteInt(o.H)
}

func (o *TLDocumentAttributeVideo) String() string {
	return tl.Pretty(o)
}

// TLDocumentAttributeAudio represents ctor documentAttributeAudio#9852f9c6 flags:# flags.10?voice:true duration:int flags.0?title:string flags.1?performer:string flags.2?waveform:bytes = DocumentAttribute from Telegram
type TLDocumentAttributeAudio struct {
	Flags     uint   // flags:#
	Voice     bool   // flags.10?voice:true
	Duration  int    // duration:int
	Title     string // flags.0?title:string
	Performer string // flags.1?performer:string
	Waveform  []byte // flags.2?waveform:bytes
}

func (o *TLDocumentAttributeAudio) IsTLDocumentAttribute() {}

func (o *TLDocumentAttributeAudio) Cmd() uint32 {
	return TagDocumentAttributeAudio
}

func (o *TLDocumentAttributeAudio) ReadBareFrom(r *tl.Reader) {
	o.Flags = uint(r.ReadUint32())
	o.Voice = true
	o.Duration = r.ReadInt()
	o.Title = r.ReadString()
	o.Performer = r.ReadString()
	o.Waveform = r.ReadBlob()
}

func (o *TLDocumentAttributeAudio) WriteBareTo(w *tl.Writer) {
	w.WriteUint32(uint32(o.Flags))
	w.WriteInt(o.Duration)
	w.WriteString(o.Title)
	w.WriteString(o.Performer)
	w.WriteBlob(o.Waveform)
}

func (o *TLDocumentAttributeAudio) String() string {
	return tl.Pretty(o)
}

// TLDocumentAttributeFilename represents ctor documentAttributeFilename#15590068 file_name:string = DocumentAttribute from Telegram
type TLDocumentAttributeFilename struct {
	FileName string // file_name:string
}

func (o *TLDocumentAttributeFilename) IsTLDocumentAttribute() {}

func (o *TLDocumentAttributeFilename) Cmd() uint32 {
	return TagDocumentAttributeFilename
}

func (o *TLDocumentAttributeFilename) ReadBareFrom(r *tl.Reader) {
	o.FileName = r.ReadString()
}

func (o *TLDocumentAttributeFilename) WriteBareTo(w *tl.Writer) {
	w.WriteString(o.FileName)
}

func (o *TLDocumentAttributeFilename) String() string {
	return tl.Pretty(o)
}

// TLDocumentAttributeHasStickers represents ctor documentAttributeHasStickers#9801d2f7 = DocumentAttribute from Telegram
type TLDocumentAttributeHasStickers struct {
}

func (o *TLDocumentAttributeHasStickers) IsTLDocumentAttribute() {}

func (o *TLDocumentAttributeHasStickers) Cmd() uint32 {
	return TagDocumentAttributeHasStickers
}

func (o *TLDocumentAttributeHasStickers) ReadBareFrom(r *tl.Reader) {
}

func (o *TLDocumentAttributeHasStickers) WriteBareTo(w *tl.Writer) {
}

func (o *TLDocumentAttributeHasStickers) String() string {
	return tl.Pretty(o)
}

// TLMessagesStickersNotModified represents ctor messages.stickersNotModified#f1749a22 = messages.Stickers from Telegram
type TLMessagesStickersNotModified struct {
}

func (o *TLMessagesStickersNotModified) IsTLMessagesStickers() {}

func (o *TLMessagesStickersNotModified) Cmd() uint32 {
	return TagMessagesStickersNotModified
}

func (o *TLMessagesStickersNotModified) ReadBareFrom(r *tl.Reader) {
}

func (o *TLMessagesStickersNotModified) WriteBareTo(w *tl.Writer) {
}

func (o *TLMessagesStickersNotModified) String() string {
	return tl.Pretty(o)
}

// TLMessagesStickers represents ctor messages.stickers#8a8ecd32 hash:string stickers:Vector<Document> = messages.Stickers from Telegram
type TLMessagesStickers struct {
	Hash     string           // hash:string
	Stickers []TLDocumentType // stickers:Vector<Document>
}

func (o *TLMessagesStickers) IsTLMessagesStickers() {}

func (o *TLMessagesStickers) Cmd() uint32 {
	return TagMessagesStickers
}

func (o *TLMessagesStickers) ReadBareFrom(r *tl.Reader) {
	o.Hash = r.ReadString()
	if cmd := r.ReadCmd(); cmd != TagVector {
		r.Fail(errors.New("expected: vector"))
	}
	o.Stickers = make([]TLDocumentType, r.ReadInt())
	for i := 0; i < len(o.Stickers); i++ {
		o.Stickers[i] = Schema.ReadLimitedBoxedObjectFrom(r, TagDocumentEmpty, TagDocument).(TLDocumentType)
	}
}

func (o *TLMessagesStickers) WriteBareTo(w *tl.Writer) {
	w.WriteString(o.Hash)
	w.WriteCmd(TagVector)
	w.WriteInt(len(o.Stickers))
	for i := 0; i < len(o.Stickers); i++ {
		w.WriteCmd(o.Stickers[i].Cmd())
		o.Stickers[i].WriteBareTo(w)
	}
}

func (o *TLMessagesStickers) String() string {
	return tl.Pretty(o)
}

// TLMessagesAllStickersNotModified represents ctor messages.allStickersNotModified#e86602c3 = messages.AllStickers from Telegram
type TLMessagesAllStickersNotModified struct {
}

func (o *TLMessagesAllStickersNotModified) IsTLMessagesAllStickers() {}

func (o *TLMessagesAllStickersNotModified) Cmd() uint32 {
	return TagMessagesAllStickersNotModified
}

func (o *TLMessagesAllStickersNotModified) ReadBareFrom(r *tl.Reader) {
}

func (o *TLMessagesAllStickersNotModified) WriteBareTo(w *tl.Writer) {
}

func (o *TLMessagesAllStickersNotModified) String() string {
	return tl.Pretty(o)
}

// TLMessagesAllStickers represents ctor messages.allStickers#edfd405f hash:int sets:Vector<StickerSet> = messages.AllStickers from Telegram
type TLMessagesAllStickers struct {
	Hash int             // hash:int
	Sets []*TLStickerSet // sets:Vector<StickerSet>
}

func (o *TLMessagesAllStickers) IsTLMessagesAllStickers() {}

func (o *TLMessagesAllStickers) Cmd() uint32 {
	return TagMessagesAllStickers
}

func (o *TLMessagesAllStickers) ReadBareFrom(r *tl.Reader) {
	o.Hash = r.ReadInt()
	if cmd := r.ReadCmd(); cmd != TagVector {
		r.Fail(errors.New("expected: vector"))
	}
	o.Sets = make([]*TLStickerSet, r.ReadInt())
	for i := 0; i < len(o.Sets); i++ {
		if cmd := r.ReadCmd(); cmd != TagStickerSet {
			r.Fail(errors.New("expected: stickerSet"))
		}
		o.Sets[i] = new(TLStickerSet)
		o.Sets[i].ReadBareFrom(r)
	}
}

func (o *TLMessagesAllStickers) WriteBareTo(w *tl.Writer) {
	w.WriteInt(o.Hash)
	w.WriteCmd(TagVector)
	w.WriteInt(len(o.Sets))
	for i := 0; i < len(o.Sets); i++ {
		w.WriteCmd(TagStickerSet)
		o.Sets[i].WriteBareTo(w)
	}
}

func (o *TLMessagesAllStickers) String() string {
	return tl.Pretty(o)
}

// TLWebPageEmpty represents ctor webPageEmpty#eb1477e8 id:long = WebPage from Telegram
type TLWebPageEmpty struct {
	ID uint64 // id:long
}

func (o *TLWebPageEmpty) IsTLWebPage() {}

func (o *TLWebPageEmpty) Cmd() uint32 {
	return TagWebPageEmpty
}

func (o *TLWebPageEmpty) ReadBareFrom(r *tl.Reader) {
	o.ID = r.ReadUint64()
}

func (o *TLWebPageEmpty) WriteBareTo(w *tl.Writer) {
	w.WriteUint64(o.ID)
}

func (o *TLWebPageEmpty) String() string {
	return tl.Pretty(o)
}

// TLWebPagePending represents ctor webPagePending#c586da1c id:long date:int = WebPage from Telegram
type TLWebPagePending struct {
	ID   uint64 // id:long
	Date int    // date:int
}

func (o *TLWebPagePending) IsTLWebPage() {}

func (o *TLWebPagePending) Cmd() uint32 {
	return TagWebPagePending
}

func (o *TLWebPagePending) ReadBareFrom(r *tl.Reader) {
	o.ID = r.ReadUint64()
	o.Date = r.ReadInt()
}

func (o *TLWebPagePending) WriteBareTo(w *tl.Writer) {
	w.WriteUint64(o.ID)
	w.WriteInt(o.Date)
}

func (o *TLWebPagePending) String() string {
	return tl.Pretty(o)
}

// TLWebPage represents ctor webPage#5f07b4bc flags:# id:long url:string display_url:string hash:int flags.0?type:string flags.1?site_name:string flags.2?title:string flags.3?description:string flags.4?photo:Photo flags.5?embed_url:string flags.5?embed_type:string flags.6?embed_width:int flags.6?embed_height:int flags.7?duration:int flags.8?author:string flags.9?document:Document flags.10?cached_page:Page = WebPage from Telegram
type TLWebPage struct {
	Flags       uint           // flags:#
	ID          uint64         // id:long
	Url         string         // url:string
	DisplayUrl  string         // display_url:string
	Hash        int            // hash:int
	Type        string         // flags.0?type:string
	SiteName    string         // flags.1?site_name:string
	Title       string         // flags.2?title:string
	Description string         // flags.3?description:string
	Photo       TLPhotoType    // flags.4?photo:Photo
	EmbedUrl    string         // flags.5?embed_url:string
	EmbedType   string         // flags.5?embed_type:string
	EmbedWidth  int            // flags.6?embed_width:int
	EmbedHeight int            // flags.6?embed_height:int
	Duration    int            // flags.7?duration:int
	Author      string         // flags.8?author:string
	Document    TLDocumentType // flags.9?document:Document
	CachedPage  TLPageType     // flags.10?cached_page:Page
}

func (o *TLWebPage) IsTLWebPage() {}

func (o *TLWebPage) Cmd() uint32 {
	return TagWebPage
}

func (o *TLWebPage) ReadBareFrom(r *tl.Reader) {
	o.Flags = uint(r.ReadUint32())
	o.ID = r.ReadUint64()
	o.Url = r.ReadString()
	o.DisplayUrl = r.ReadString()
	o.Hash = r.ReadInt()
	o.Type = r.ReadString()
	o.SiteName = r.ReadString()
	o.Title = r.ReadString()
	o.Description = r.ReadString()
	o.Photo = Schema.ReadLimitedBoxedObjectFrom(r, TagPhotoEmpty, TagPhoto).(TLPhotoType)
	o.EmbedUrl = r.ReadString()
	o.EmbedType = r.ReadString()
	o.EmbedWidth = r.ReadInt()
	o.EmbedHeight = r.ReadInt()
	o.Duration = r.ReadInt()
	o.Author = r.ReadString()
	o.Document = Schema.ReadLimitedBoxedObjectFrom(r, TagDocumentEmpty, TagDocument).(TLDocumentType)
	o.CachedPage = Schema.ReadLimitedBoxedObjectFrom(r, TagPagePart, TagPageFull).(TLPageType)
}

func (o *TLWebPage) WriteBareTo(w *tl.Writer) {
	w.WriteUint32(uint32(o.Flags))
	w.WriteUint64(o.ID)
	w.WriteString(o.Url)
	w.WriteString(o.DisplayUrl)
	w.WriteInt(o.Hash)
	w.WriteString(o.Type)
	w.WriteString(o.SiteName)
	w.WriteString(o.Title)
	w.WriteString(o.Description)
	w.WriteCmd(o.Photo.Cmd())
	o.Photo.WriteBareTo(w)
	w.WriteString(o.EmbedUrl)
	w.WriteString(o.EmbedType)
	w.WriteInt(o.EmbedWidth)
	w.WriteInt(o.EmbedHeight)
	w.WriteInt(o.Duration)
	w.WriteString(o.Author)
	w.WriteCmd(o.Document.Cmd())
	o.Document.WriteBareTo(w)
	w.WriteCmd(o.CachedPage.Cmd())
	o.CachedPage.WriteBareTo(w)
}

func (o *TLWebPage) String() string {
	return tl.Pretty(o)
}

// TLWebPageNotModified represents ctor webPageNotModified#85849473 = WebPage from Telegram
type TLWebPageNotModified struct {
}

func (o *TLWebPageNotModified) IsTLWebPage() {}

func (o *TLWebPageNotModified) Cmd() uint32 {
	return TagWebPageNotModified
}

func (o *TLWebPageNotModified) ReadBareFrom(r *tl.Reader) {
}

func (o *TLWebPageNotModified) WriteBareTo(w *tl.Writer) {
}

func (o *TLWebPageNotModified) String() string {
	return tl.Pretty(o)
}

// TLAccountNoPassword represents ctor account.noPassword#96dabc18 new_salt:bytes email_unconfirmed_pattern:string = account.Password from Telegram
type TLAccountNoPassword struct {
	NewSalt                 []byte // new_salt:bytes
	EmailUnconfirmedPattern string // email_unconfirmed_pattern:string
}

func (o *TLAccountNoPassword) IsTLAccountPassword() {}

func (o *TLAccountNoPassword) Cmd() uint32 {
	return TagAccountNoPassword
}

func (o *TLAccountNoPassword) ReadBareFrom(r *tl.Reader) {
	o.NewSalt = r.ReadBlob()
	o.EmailUnconfirmedPattern = r.ReadString()
}

func (o *TLAccountNoPassword) WriteBareTo(w *tl.Writer) {
	w.WriteBlob(o.NewSalt)
	w.WriteString(o.EmailUnconfirmedPattern)
}

func (o *TLAccountNoPassword) String() string {
	return tl.Pretty(o)
}

// TLAccountPassword represents ctor account.password#7c18141c current_salt:bytes new_salt:bytes hint:string has_recovery:Bool email_unconfirmed_pattern:string = account.Password from Telegram
type TLAccountPassword struct {
	CurrentSalt             []byte // current_salt:bytes
	NewSalt                 []byte // new_salt:bytes
	Hint                    string // hint:string
	HasRecovery             bool   // has_recovery:Bool
	EmailUnconfirmedPattern string // email_unconfirmed_pattern:string
}

func (o *TLAccountPassword) IsTLAccountPassword() {}

func (o *TLAccountPassword) Cmd() uint32 {
	return TagAccountPassword
}

func (o *TLAccountPassword) ReadBareFrom(r *tl.Reader) {
	o.CurrentSalt = r.ReadBlob()
	o.NewSalt = r.ReadBlob()
	o.Hint = r.ReadString()
	r.ExpectCmd(TagBoolTrue, TagBoolFalse)
	o.HasRecovery = (r.ReadCmd() == TagBoolTrue)
	o.EmailUnconfirmedPattern = r.ReadString()
}

func (o *TLAccountPassword) WriteBareTo(w *tl.Writer) {
	w.WriteBlob(o.CurrentSalt)
	w.WriteBlob(o.NewSalt)
	w.WriteString(o.Hint)
	if o.HasRecovery {
		w.WriteCmd(TagBoolTrue)
	} else {
		w.WriteCmd(TagBoolFalse)
	}
	w.WriteString(o.EmailUnconfirmedPattern)
}

func (o *TLAccountPassword) String() string {
	return tl.Pretty(o)
}

// TLChatInviteEmpty represents ctor chatInviteEmpty#69df3769 = ExportedChatInvite from Telegram
type TLChatInviteEmpty struct {
}

func (o *TLChatInviteEmpty) IsTLExportedChatInvite() {}

func (o *TLChatInviteEmpty) Cmd() uint32 {
	return TagChatInviteEmpty
}

func (o *TLChatInviteEmpty) ReadBareFrom(r *tl.Reader) {
}

func (o *TLChatInviteEmpty) WriteBareTo(w *tl.Writer) {
}

func (o *TLChatInviteEmpty) String() string {
	return tl.Pretty(o)
}

// TLChatInviteExported represents ctor chatInviteExported#fc2e05bc link:string = ExportedChatInvite from Telegram
type TLChatInviteExported struct {
	Link string // link:string
}

func (o *TLChatInviteExported) IsTLExportedChatInvite() {}

func (o *TLChatInviteExported) Cmd() uint32 {
	return TagChatInviteExported
}

func (o *TLChatInviteExported) ReadBareFrom(r *tl.Reader) {
	o.Link = r.ReadString()
}

func (o *TLChatInviteExported) WriteBareTo(w *tl.Writer) {
	w.WriteString(o.Link)
}

func (o *TLChatInviteExported) String() string {
	return tl.Pretty(o)
}

// TLChatInviteAlready represents ctor chatInviteAlready#5a686d7c chat:Chat = ChatInvite from Telegram
type TLChatInviteAlready struct {
	Chat TLChatType // chat:Chat
}

func (o *TLChatInviteAlready) IsTLChatInvite() {}

func (o *TLChatInviteAlready) Cmd() uint32 {
	return TagChatInviteAlready
}

func (o *TLChatInviteAlready) ReadBareFrom(r *tl.Reader) {
	o.Chat = Schema.ReadLimitedBoxedObjectFrom(r, TagChatEmpty, TagChat, TagChatForbidden, TagChannel, TagChannelForbidden).(TLChatType)
}

func (o *TLChatInviteAlready) WriteBareTo(w *tl.Writer) {
	w.WriteCmd(o.Chat.Cmd())
	o.Chat.WriteBareTo(w)
}

func (o *TLChatInviteAlready) String() string {
	return tl.Pretty(o)
}

// TLChatInvite represents ctor chatInvite#db74f558 flags:# flags.0?channel:true flags.1?broadcast:true flags.2?public:true flags.3?megagroup:true title:string photo:ChatPhoto participants_count:int flags.4?participants:Vector<User> = ChatInvite from Telegram
type TLChatInvite struct {
	Flags             uint            // flags:#
	Channel           bool            // flags.0?channel:true
	Broadcast         bool            // flags.1?broadcast:true
	Public            bool            // flags.2?public:true
	Megagroup         bool            // flags.3?megagroup:true
	Title             string          // title:string
	Photo             TLChatPhotoType // photo:ChatPhoto
	ParticipantsCount int             // participants_count:int
	Participants      []TLUserType    // flags.4?participants:Vector<User>
}

func (o *TLChatInvite) IsTLChatInvite() {}

func (o *TLChatInvite) Cmd() uint32 {
	return TagChatInvite
}

func (o *TLChatInvite) ReadBareFrom(r *tl.Reader) {
	o.Flags = uint(r.ReadUint32())
	o.Channel = true
	o.Broadcast = true
	o.Public = true
	o.Megagroup = true
	o.Title = r.ReadString()
	o.Photo = Schema.ReadLimitedBoxedObjectFrom(r, TagChatPhotoEmpty, TagChatPhoto).(TLChatPhotoType)
	o.ParticipantsCount = r.ReadInt()
	if cmd := r.ReadCmd(); cmd != TagVector {
		r.Fail(errors.New("expected: vector"))
	}
	o.Participants = make([]TLUserType, r.ReadInt())
	for i := 0; i < len(o.Participants); i++ {
		o.Participants[i] = Schema.ReadLimitedBoxedObjectFrom(r, TagUserEmpty, TagUser).(TLUserType)
	}
}

func (o *TLChatInvite) WriteBareTo(w *tl.Writer) {
	w.WriteUint32(uint32(o.Flags))
	w.WriteString(o.Title)
	w.WriteCmd(o.Photo.Cmd())
	o.Photo.WriteBareTo(w)
	w.WriteInt(o.ParticipantsCount)
	w.WriteCmd(TagVector)
	w.WriteInt(len(o.Participants))
	for i := 0; i < len(o.Participants); i++ {
		w.WriteCmd(o.Participants[i].Cmd())
		o.Participants[i].WriteBareTo(w)
	}
}

func (o *TLChatInvite) String() string {
	return tl.Pretty(o)
}

// TLInputStickerSetEmpty represents ctor inputStickerSetEmpty#ffb62b95 = InputStickerSet from Telegram
type TLInputStickerSetEmpty struct {
}

func (o *TLInputStickerSetEmpty) IsTLInputStickerSet() {}

func (o *TLInputStickerSetEmpty) Cmd() uint32 {
	return TagInputStickerSetEmpty
}

func (o *TLInputStickerSetEmpty) ReadBareFrom(r *tl.Reader) {
}

func (o *TLInputStickerSetEmpty) WriteBareTo(w *tl.Writer) {
}

func (o *TLInputStickerSetEmpty) String() string {
	return tl.Pretty(o)
}

// TLInputStickerSetID represents ctor inputStickerSetID#9de7a269 id:long access_hash:long = InputStickerSet from Telegram
type TLInputStickerSetID struct {
	ID         uint64 // id:long
	AccessHash uint64 // access_hash:long
}

func (o *TLInputStickerSetID) IsTLInputStickerSet() {}

func (o *TLInputStickerSetID) Cmd() uint32 {
	return TagInputStickerSetID
}

func (o *TLInputStickerSetID) ReadBareFrom(r *tl.Reader) {
	o.ID = r.ReadUint64()
	o.AccessHash = r.ReadUint64()
}

func (o *TLInputStickerSetID) WriteBareTo(w *tl.Writer) {
	w.WriteUint64(o.ID)
	w.WriteUint64(o.AccessHash)
}

func (o *TLInputStickerSetID) String() string {
	return tl.Pretty(o)
}

// TLInputStickerSetShortName represents ctor inputStickerSetShortName#861cc8a0 short_name:string = InputStickerSet from Telegram
type TLInputStickerSetShortName struct {
	ShortName string // short_name:string
}

func (o *TLInputStickerSetShortName) IsTLInputStickerSet() {}

func (o *TLInputStickerSetShortName) Cmd() uint32 {
	return TagInputStickerSetShortName
}

func (o *TLInputStickerSetShortName) ReadBareFrom(r *tl.Reader) {
	o.ShortName = r.ReadString()
}

func (o *TLInputStickerSetShortName) WriteBareTo(w *tl.Writer) {
	w.WriteString(o.ShortName)
}

func (o *TLInputStickerSetShortName) String() string {
	return tl.Pretty(o)
}

// TLKeyboardButton represents ctor keyboardButton#a2fa4880 text:string = KeyboardButton from Telegram
type TLKeyboardButton struct {
	Text string // text:string
}

func (o *TLKeyboardButton) IsTLKeyboardButton() {}

func (o *TLKeyboardButton) Cmd() uint32 {
	return TagKeyboardButton
}

func (o *TLKeyboardButton) ReadBareFrom(r *tl.Reader) {
	o.Text = r.ReadString()
}

func (o *TLKeyboardButton) WriteBareTo(w *tl.Writer) {
	w.WriteString(o.Text)
}

func (o *TLKeyboardButton) String() string {
	return tl.Pretty(o)
}

// TLKeyboardButtonUrl represents ctor keyboardButtonUrl#258aff05 text:string url:string = KeyboardButton from Telegram
type TLKeyboardButtonUrl struct {
	Text string // text:string
	Url  string // url:string
}

func (o *TLKeyboardButtonUrl) IsTLKeyboardButton() {}

func (o *TLKeyboardButtonUrl) Cmd() uint32 {
	return TagKeyboardButtonUrl
}

func (o *TLKeyboardButtonUrl) ReadBareFrom(r *tl.Reader) {
	o.Text = r.ReadString()
	o.Url = r.ReadString()
}

func (o *TLKeyboardButtonUrl) WriteBareTo(w *tl.Writer) {
	w.WriteString(o.Text)
	w.WriteString(o.Url)
}

func (o *TLKeyboardButtonUrl) String() string {
	return tl.Pretty(o)
}

// TLKeyboardButtonCallback represents ctor keyboardButtonCallback#683a5e46 text:string data:bytes = KeyboardButton from Telegram
type TLKeyboardButtonCallback struct {
	Text string // text:string
	Data []byte // data:bytes
}

func (o *TLKeyboardButtonCallback) IsTLKeyboardButton() {}

func (o *TLKeyboardButtonCallback) Cmd() uint32 {
	return TagKeyboardButtonCallback
}

func (o *TLKeyboardButtonCallback) ReadBareFrom(r *tl.Reader) {
	o.Text = r.ReadString()
	o.Data = r.ReadBlob()
}

func (o *TLKeyboardButtonCallback) WriteBareTo(w *tl.Writer) {
	w.WriteString(o.Text)
	w.WriteBlob(o.Data)
}

func (o *TLKeyboardButtonCallback) String() string {
	return tl.Pretty(o)
}

// TLKeyboardButtonRequestPhone represents ctor keyboardButtonRequestPhone#b16a6c29 text:string = KeyboardButton from Telegram
type TLKeyboardButtonRequestPhone struct {
	Text string // text:string
}

func (o *TLKeyboardButtonRequestPhone) IsTLKeyboardButton() {}

func (o *TLKeyboardButtonRequestPhone) Cmd() uint32 {
	return TagKeyboardButtonRequestPhone
}

func (o *TLKeyboardButtonRequestPhone) ReadBareFrom(r *tl.Reader) {
	o.Text = r.ReadString()
}

func (o *TLKeyboardButtonRequestPhone) WriteBareTo(w *tl.Writer) {
	w.WriteString(o.Text)
}

func (o *TLKeyboardButtonRequestPhone) String() string {
	return tl.Pretty(o)
}

// TLKeyboardButtonRequestGeoLocation represents ctor keyboardButtonRequestGeoLocation#fc796b3f text:string = KeyboardButton from Telegram
type TLKeyboardButtonRequestGeoLocation struct {
	Text string // text:string
}

func (o *TLKeyboardButtonRequestGeoLocation) IsTLKeyboardButton() {}

func (o *TLKeyboardButtonRequestGeoLocation) Cmd() uint32 {
	return TagKeyboardButtonRequestGeoLocation
}

func (o *TLKeyboardButtonRequestGeoLocation) ReadBareFrom(r *tl.Reader) {
	o.Text = r.ReadString()
}

func (o *TLKeyboardButtonRequestGeoLocation) WriteBareTo(w *tl.Writer) {
	w.WriteString(o.Text)
}

func (o *TLKeyboardButtonRequestGeoLocation) String() string {
	return tl.Pretty(o)
}

// TLKeyboardButtonSwitchInline represents ctor keyboardButtonSwitchInline#0568a748 flags:# flags.0?same_peer:true text:string query:string = KeyboardButton from Telegram
type TLKeyboardButtonSwitchInline struct {
	Flags    uint   // flags:#
	SamePeer bool   // flags.0?same_peer:true
	Text     string // text:string
	Query    string // query:string
}

func (o *TLKeyboardButtonSwitchInline) IsTLKeyboardButton() {}

func (o *TLKeyboardButtonSwitchInline) Cmd() uint32 {
	return TagKeyboardButtonSwitchInline
}

func (o *TLKeyboardButtonSwitchInline) ReadBareFrom(r *tl.Reader) {
	o.Flags = uint(r.ReadUint32())
	o.SamePeer = true
	o.Text = r.ReadString()
	o.Query = r.ReadString()
}

func (o *TLKeyboardButtonSwitchInline) WriteBareTo(w *tl.Writer) {
	w.WriteUint32(uint32(o.Flags))
	w.WriteString(o.Text)
	w.WriteString(o.Query)
}

func (o *TLKeyboardButtonSwitchInline) String() string {
	return tl.Pretty(o)
}

// TLKeyboardButtonGame represents ctor keyboardButtonGame#50f41ccf text:string = KeyboardButton from Telegram
type TLKeyboardButtonGame struct {
	Text string // text:string
}

func (o *TLKeyboardButtonGame) IsTLKeyboardButton() {}

func (o *TLKeyboardButtonGame) Cmd() uint32 {
	return TagKeyboardButtonGame
}

func (o *TLKeyboardButtonGame) ReadBareFrom(r *tl.Reader) {
	o.Text = r.ReadString()
}

func (o *TLKeyboardButtonGame) WriteBareTo(w *tl.Writer) {
	w.WriteString(o.Text)
}

func (o *TLKeyboardButtonGame) String() string {
	return tl.Pretty(o)
}

// TLKeyboardButtonBuy represents ctor keyboardButtonBuy#afd93fbb text:string = KeyboardButton from Telegram
type TLKeyboardButtonBuy struct {
	Text string // text:string
}

func (o *TLKeyboardButtonBuy) IsTLKeyboardButton() {}

func (o *TLKeyboardButtonBuy) Cmd() uint32 {
	return TagKeyboardButtonBuy
}

func (o *TLKeyboardButtonBuy) ReadBareFrom(r *tl.Reader) {
	o.Text = r.ReadString()
}

func (o *TLKeyboardButtonBuy) WriteBareTo(w *tl.Writer) {
	w.WriteString(o.Text)
}

func (o *TLKeyboardButtonBuy) String() string {
	return tl.Pretty(o)
}

// TLReplyKeyboardHide represents ctor replyKeyboardHide#a03e5b85 flags:# flags.2?selective:true = ReplyMarkup from Telegram
type TLReplyKeyboardHide struct {
	Flags     uint // flags:#
	Selective bool // flags.2?selective:true
}

func (o *TLReplyKeyboardHide) IsTLReplyMarkup() {}

func (o *TLReplyKeyboardHide) Cmd() uint32 {
	return TagReplyKeyboardHide
}

func (o *TLReplyKeyboardHide) ReadBareFrom(r *tl.Reader) {
	o.Flags = uint(r.ReadUint32())
	o.Selective = true
}

func (o *TLReplyKeyboardHide) WriteBareTo(w *tl.Writer) {
	w.WriteUint32(uint32(o.Flags))
}

func (o *TLReplyKeyboardHide) String() string {
	return tl.Pretty(o)
}

// TLReplyKeyboardForceReply represents ctor replyKeyboardForceReply#f4108aa0 flags:# flags.1?single_use:true flags.2?selective:true = ReplyMarkup from Telegram
type TLReplyKeyboardForceReply struct {
	Flags     uint // flags:#
	SingleUse bool // flags.1?single_use:true
	Selective bool // flags.2?selective:true
}

func (o *TLReplyKeyboardForceReply) IsTLReplyMarkup() {}

func (o *TLReplyKeyboardForceReply) Cmd() uint32 {
	return TagReplyKeyboardForceReply
}

func (o *TLReplyKeyboardForceReply) ReadBareFrom(r *tl.Reader) {
	o.Flags = uint(r.ReadUint32())
	o.SingleUse = true
	o.Selective = true
}

func (o *TLReplyKeyboardForceReply) WriteBareTo(w *tl.Writer) {
	w.WriteUint32(uint32(o.Flags))
}

func (o *TLReplyKeyboardForceReply) String() string {
	return tl.Pretty(o)
}

// TLReplyKeyboardMarkup represents ctor replyKeyboardMarkup#3502758c flags:# flags.0?resize:true flags.1?single_use:true flags.2?selective:true rows:Vector<KeyboardButtonRow> = ReplyMarkup from Telegram
type TLReplyKeyboardMarkup struct {
	Flags     uint                   // flags:#
	Resize    bool                   // flags.0?resize:true
	SingleUse bool                   // flags.1?single_use:true
	Selective bool                   // flags.2?selective:true
	Rows      []*TLKeyboardButtonRow // rows:Vector<KeyboardButtonRow>
}

func (o *TLReplyKeyboardMarkup) IsTLReplyMarkup() {}

func (o *TLReplyKeyboardMarkup) Cmd() uint32 {
	return TagReplyKeyboardMarkup
}

func (o *TLReplyKeyboardMarkup) ReadBareFrom(r *tl.Reader) {
	o.Flags = uint(r.ReadUint32())
	o.Resize = true
	o.SingleUse = true
	o.Selective = true
	if cmd := r.ReadCmd(); cmd != TagVector {
		r.Fail(errors.New("expected: vector"))
	}
	o.Rows = make([]*TLKeyboardButtonRow, r.ReadInt())
	for i := 0; i < len(o.Rows); i++ {
		if cmd := r.ReadCmd(); cmd != TagKeyboardButtonRow {
			r.Fail(errors.New("expected: keyboardButtonRow"))
		}
		o.Rows[i] = new(TLKeyboardButtonRow)
		o.Rows[i].ReadBareFrom(r)
	}
}

func (o *TLReplyKeyboardMarkup) WriteBareTo(w *tl.Writer) {
	w.WriteUint32(uint32(o.Flags))
	w.WriteCmd(TagVector)
	w.WriteInt(len(o.Rows))
	for i := 0; i < len(o.Rows); i++ {
		w.WriteCmd(TagKeyboardButtonRow)
		o.Rows[i].WriteBareTo(w)
	}
}

func (o *TLReplyKeyboardMarkup) String() string {
	return tl.Pretty(o)
}

// TLReplyInlineMarkup represents ctor replyInlineMarkup#48a30254 rows:Vector<KeyboardButtonRow> = ReplyMarkup from Telegram
type TLReplyInlineMarkup struct {
	Rows []*TLKeyboardButtonRow // rows:Vector<KeyboardButtonRow>
}

func (o *TLReplyInlineMarkup) IsTLReplyMarkup() {}

func (o *TLReplyInlineMarkup) Cmd() uint32 {
	return TagReplyInlineMarkup
}

func (o *TLReplyInlineMarkup) ReadBareFrom(r *tl.Reader) {
	if cmd := r.ReadCmd(); cmd != TagVector {
		r.Fail(errors.New("expected: vector"))
	}
	o.Rows = make([]*TLKeyboardButtonRow, r.ReadInt())
	for i := 0; i < len(o.Rows); i++ {
		if cmd := r.ReadCmd(); cmd != TagKeyboardButtonRow {
			r.Fail(errors.New("expected: keyboardButtonRow"))
		}
		o.Rows[i] = new(TLKeyboardButtonRow)
		o.Rows[i].ReadBareFrom(r)
	}
}

func (o *TLReplyInlineMarkup) WriteBareTo(w *tl.Writer) {
	w.WriteCmd(TagVector)
	w.WriteInt(len(o.Rows))
	for i := 0; i < len(o.Rows); i++ {
		w.WriteCmd(TagKeyboardButtonRow)
		o.Rows[i].WriteBareTo(w)
	}
}

func (o *TLReplyInlineMarkup) String() string {
	return tl.Pretty(o)
}

// TLMessageEntityUnknown represents ctor messageEntityUnknown#bb92ba95 offset:int length:int = MessageEntity from Telegram
type TLMessageEntityUnknown struct {
	Offset int // offset:int
	Length int // length:int
}

func (o *TLMessageEntityUnknown) IsTLMessageEntity() {}

func (o *TLMessageEntityUnknown) Cmd() uint32 {
	return TagMessageEntityUnknown
}

func (o *TLMessageEntityUnknown) ReadBareFrom(r *tl.Reader) {
	o.Offset = r.ReadInt()
	o.Length = r.ReadInt()
}

func (o *TLMessageEntityUnknown) WriteBareTo(w *tl.Writer) {
	w.WriteInt(o.Offset)
	w.WriteInt(o.Length)
}

func (o *TLMessageEntityUnknown) String() string {
	return tl.Pretty(o)
}

// TLMessageEntityMention represents ctor messageEntityMention#fa04579d offset:int length:int = MessageEntity from Telegram
type TLMessageEntityMention struct {
	Offset int // offset:int
	Length int // length:int
}

func (o *TLMessageEntityMention) IsTLMessageEntity() {}

func (o *TLMessageEntityMention) Cmd() uint32 {
	return TagMessageEntityMention
}

func (o *TLMessageEntityMention) ReadBareFrom(r *tl.Reader) {
	o.Offset = r.ReadInt()
	o.Length = r.ReadInt()
}

func (o *TLMessageEntityMention) WriteBareTo(w *tl.Writer) {
	w.WriteInt(o.Offset)
	w.WriteInt(o.Length)
}

func (o *TLMessageEntityMention) String() string {
	return tl.Pretty(o)
}

// TLMessageEntityHashtag represents ctor messageEntityHashtag#6f635b0d offset:int length:int = MessageEntity from Telegram
type TLMessageEntityHashtag struct {
	Offset int // offset:int
	Length int // length:int
}

func (o *TLMessageEntityHashtag) IsTLMessageEntity() {}

func (o *TLMessageEntityHashtag) Cmd() uint32 {
	return TagMessageEntityHashtag
}

func (o *TLMessageEntityHashtag) ReadBareFrom(r *tl.Reader) {
	o.Offset = r.ReadInt()
	o.Length = r.ReadInt()
}

func (o *TLMessageEntityHashtag) WriteBareTo(w *tl.Writer) {
	w.WriteInt(o.Offset)
	w.WriteInt(o.Length)
}

func (o *TLMessageEntityHashtag) String() string {
	return tl.Pretty(o)
}

// TLMessageEntityBotCommand represents ctor messageEntityBotCommand#6cef8ac7 offset:int length:int = MessageEntity from Telegram
type TLMessageEntityBotCommand struct {
	Offset int // offset:int
	Length int // length:int
}

func (o *TLMessageEntityBotCommand) IsTLMessageEntity() {}

func (o *TLMessageEntityBotCommand) Cmd() uint32 {
	return TagMessageEntityBotCommand
}

func (o *TLMessageEntityBotCommand) ReadBareFrom(r *tl.Reader) {
	o.Offset = r.ReadInt()
	o.Length = r.ReadInt()
}

func (o *TLMessageEntityBotCommand) WriteBareTo(w *tl.Writer) {
	w.WriteInt(o.Offset)
	w.WriteInt(o.Length)
}

func (o *TLMessageEntityBotCommand) String() string {
	return tl.Pretty(o)
}

// TLMessageEntityUrl represents ctor messageEntityUrl#6ed02538 offset:int length:int = MessageEntity from Telegram
type TLMessageEntityUrl struct {
	Offset int // offset:int
	Length int // length:int
}

func (o *TLMessageEntityUrl) IsTLMessageEntity() {}

func (o *TLMessageEntityUrl) Cmd() uint32 {
	return TagMessageEntityUrl
}

func (o *TLMessageEntityUrl) ReadBareFrom(r *tl.Reader) {
	o.Offset = r.ReadInt()
	o.Length = r.ReadInt()
}

func (o *TLMessageEntityUrl) WriteBareTo(w *tl.Writer) {
	w.WriteInt(o.Offset)
	w.WriteInt(o.Length)
}

func (o *TLMessageEntityUrl) String() string {
	return tl.Pretty(o)
}

// TLMessageEntityEmail represents ctor messageEntityEmail#64e475c2 offset:int length:int = MessageEntity from Telegram
type TLMessageEntityEmail struct {
	Offset int // offset:int
	Length int // length:int
}

func (o *TLMessageEntityEmail) IsTLMessageEntity() {}

func (o *TLMessageEntityEmail) Cmd() uint32 {
	return TagMessageEntityEmail
}

func (o *TLMessageEntityEmail) ReadBareFrom(r *tl.Reader) {
	o.Offset = r.ReadInt()
	o.Length = r.ReadInt()
}

func (o *TLMessageEntityEmail) WriteBareTo(w *tl.Writer) {
	w.WriteInt(o.Offset)
	w.WriteInt(o.Length)
}

func (o *TLMessageEntityEmail) String() string {
	return tl.Pretty(o)
}

// TLMessageEntityBold represents ctor messageEntityBold#bd610bc9 offset:int length:int = MessageEntity from Telegram
type TLMessageEntityBold struct {
	Offset int // offset:int
	Length int // length:int
}

func (o *TLMessageEntityBold) IsTLMessageEntity() {}

func (o *TLMessageEntityBold) Cmd() uint32 {
	return TagMessageEntityBold
}

func (o *TLMessageEntityBold) ReadBareFrom(r *tl.Reader) {
	o.Offset = r.ReadInt()
	o.Length = r.ReadInt()
}

func (o *TLMessageEntityBold) WriteBareTo(w *tl.Writer) {
	w.WriteInt(o.Offset)
	w.WriteInt(o.Length)
}

func (o *TLMessageEntityBold) String() string {
	return tl.Pretty(o)
}

// TLMessageEntityItalic represents ctor messageEntityItalic#826f8b60 offset:int length:int = MessageEntity from Telegram
type TLMessageEntityItalic struct {
	Offset int // offset:int
	Length int // length:int
}

func (o *TLMessageEntityItalic) IsTLMessageEntity() {}

func (o *TLMessageEntityItalic) Cmd() uint32 {
	return TagMessageEntityItalic
}

func (o *TLMessageEntityItalic) ReadBareFrom(r *tl.Reader) {
	o.Offset = r.ReadInt()
	o.Length = r.ReadInt()
}

func (o *TLMessageEntityItalic) WriteBareTo(w *tl.Writer) {
	w.WriteInt(o.Offset)
	w.WriteInt(o.Length)
}

func (o *TLMessageEntityItalic) String() string {
	return tl.Pretty(o)
}

// TLMessageEntityCode represents ctor messageEntityCode#28a20571 offset:int length:int = MessageEntity from Telegram
type TLMessageEntityCode struct {
	Offset int // offset:int
	Length int // length:int
}

func (o *TLMessageEntityCode) IsTLMessageEntity() {}

func (o *TLMessageEntityCode) Cmd() uint32 {
	return TagMessageEntityCode
}

func (o *TLMessageEntityCode) ReadBareFrom(r *tl.Reader) {
	o.Offset = r.ReadInt()
	o.Length = r.ReadInt()
}

func (o *TLMessageEntityCode) WriteBareTo(w *tl.Writer) {
	w.WriteInt(o.Offset)
	w.WriteInt(o.Length)
}

func (o *TLMessageEntityCode) String() string {
	return tl.Pretty(o)
}

// TLMessageEntityPre represents ctor messageEntityPre#73924be0 offset:int length:int language:string = MessageEntity from Telegram
type TLMessageEntityPre struct {
	Offset   int    // offset:int
	Length   int    // length:int
	Language string // language:string
}

func (o *TLMessageEntityPre) IsTLMessageEntity() {}

func (o *TLMessageEntityPre) Cmd() uint32 {
	return TagMessageEntityPre
}

func (o *TLMessageEntityPre) ReadBareFrom(r *tl.Reader) {
	o.Offset = r.ReadInt()
	o.Length = r.ReadInt()
	o.Language = r.ReadString()
}

func (o *TLMessageEntityPre) WriteBareTo(w *tl.Writer) {
	w.WriteInt(o.Offset)
	w.WriteInt(o.Length)
	w.WriteString(o.Language)
}

func (o *TLMessageEntityPre) String() string {
	return tl.Pretty(o)
}

// TLMessageEntityTextUrl represents ctor messageEntityTextUrl#76a6d327 offset:int length:int url:string = MessageEntity from Telegram
type TLMessageEntityTextUrl struct {
	Offset int    // offset:int
	Length int    // length:int
	Url    string // url:string
}

func (o *TLMessageEntityTextUrl) IsTLMessageEntity() {}

func (o *TLMessageEntityTextUrl) Cmd() uint32 {
	return TagMessageEntityTextUrl
}

func (o *TLMessageEntityTextUrl) ReadBareFrom(r *tl.Reader) {
	o.Offset = r.ReadInt()
	o.Length = r.ReadInt()
	o.Url = r.ReadString()
}

func (o *TLMessageEntityTextUrl) WriteBareTo(w *tl.Writer) {
	w.WriteInt(o.Offset)
	w.WriteInt(o.Length)
	w.WriteString(o.Url)
}

func (o *TLMessageEntityTextUrl) String() string {
	return tl.Pretty(o)
}

// TLMessageEntityMentionName represents ctor messageEntityMentionName#352dca58 offset:int length:int user_id:int = MessageEntity from Telegram
type TLMessageEntityMentionName struct {
	Offset int // offset:int
	Length int // length:int
	UserID int // user_id:int
}

func (o *TLMessageEntityMentionName) IsTLMessageEntity() {}

func (o *TLMessageEntityMentionName) Cmd() uint32 {
	return TagMessageEntityMentionName
}

func (o *TLMessageEntityMentionName) ReadBareFrom(r *tl.Reader) {
	o.Offset = r.ReadInt()
	o.Length = r.ReadInt()
	o.UserID = r.ReadInt()
}

func (o *TLMessageEntityMentionName) WriteBareTo(w *tl.Writer) {
	w.WriteInt(o.Offset)
	w.WriteInt(o.Length)
	w.WriteInt(o.UserID)
}

func (o *TLMessageEntityMentionName) String() string {
	return tl.Pretty(o)
}

// TLInputMessageEntityMentionName represents ctor inputMessageEntityMentionName#208e68c9 offset:int length:int user_id:InputUser = MessageEntity from Telegram
type TLInputMessageEntityMentionName struct {
	Offset int             // offset:int
	Length int             // length:int
	UserID TLInputUserType // user_id:InputUser
}

func (o *TLInputMessageEntityMentionName) IsTLMessageEntity() {}

func (o *TLInputMessageEntityMentionName) Cmd() uint32 {
	return TagInputMessageEntityMentionName
}

func (o *TLInputMessageEntityMentionName) ReadBareFrom(r *tl.Reader) {
	o.Offset = r.ReadInt()
	o.Length = r.ReadInt()
	o.UserID = Schema.ReadLimitedBoxedObjectFrom(r, TagInputUserEmpty, TagInputUserSelf, TagInputUser).(TLInputUserType)
}

func (o *TLInputMessageEntityMentionName) WriteBareTo(w *tl.Writer) {
	w.WriteInt(o.Offset)
	w.WriteInt(o.Length)
	w.WriteCmd(o.UserID.Cmd())
	o.UserID.WriteBareTo(w)
}

func (o *TLInputMessageEntityMentionName) String() string {
	return tl.Pretty(o)
}

// TLInputChannelEmpty represents ctor inputChannelEmpty#ee8c1e86 = InputChannel from Telegram
type TLInputChannelEmpty struct {
}

func (o *TLInputChannelEmpty) IsTLInputChannel() {}

func (o *TLInputChannelEmpty) Cmd() uint32 {
	return TagInputChannelEmpty
}

func (o *TLInputChannelEmpty) ReadBareFrom(r *tl.Reader) {
}

func (o *TLInputChannelEmpty) WriteBareTo(w *tl.Writer) {
}

func (o *TLInputChannelEmpty) String() string {
	return tl.Pretty(o)
}

// TLInputChannel represents ctor inputChannel#afeb712e channel_id:int access_hash:long = InputChannel from Telegram
type TLInputChannel struct {
	ChannelID  int    // channel_id:int
	AccessHash uint64 // access_hash:long
}

func (o *TLInputChannel) IsTLInputChannel() {}

func (o *TLInputChannel) Cmd() uint32 {
	return TagInputChannel
}

func (o *TLInputChannel) ReadBareFrom(r *tl.Reader) {
	o.ChannelID = r.ReadInt()
	o.AccessHash = r.ReadUint64()
}

func (o *TLInputChannel) WriteBareTo(w *tl.Writer) {
	w.WriteInt(o.ChannelID)
	w.WriteUint64(o.AccessHash)
}

func (o *TLInputChannel) String() string {
	return tl.Pretty(o)
}

// TLUpdatesChannelDifferenceEmpty represents ctor updates.channelDifferenceEmpty#3e11affb flags:# flags.0?final:true pts:int flags.1?timeout:int = updates.ChannelDifference from Telegram
type TLUpdatesChannelDifferenceEmpty struct {
	Flags   uint // flags:#
	Final   bool // flags.0?final:true
	Pts     int  // pts:int
	Timeout int  // flags.1?timeout:int
}

func (o *TLUpdatesChannelDifferenceEmpty) IsTLUpdatesChannelDifference() {}

func (o *TLUpdatesChannelDifferenceEmpty) Cmd() uint32 {
	return TagUpdatesChannelDifferenceEmpty
}

func (o *TLUpdatesChannelDifferenceEmpty) ReadBareFrom(r *tl.Reader) {
	o.Flags = uint(r.ReadUint32())
	o.Final = true
	o.Pts = r.ReadInt()
	o.Timeout = r.ReadInt()
}

func (o *TLUpdatesChannelDifferenceEmpty) WriteBareTo(w *tl.Writer) {
	w.WriteUint32(uint32(o.Flags))
	w.WriteInt(o.Pts)
	w.WriteInt(o.Timeout)
}

func (o *TLUpdatesChannelDifferenceEmpty) String() string {
	return tl.Pretty(o)
}

// TLUpdatesChannelDifferenceTooLong represents ctor updates.channelDifferenceTooLong#410dee07 flags:# flags.0?final:true pts:int flags.1?timeout:int top_message:int read_inbox_max_id:int read_outbox_max_id:int unread_count:int messages:Vector<Message> chats:Vector<Chat> users:Vector<User> = updates.ChannelDifference from Telegram
type TLUpdatesChannelDifferenceTooLong struct {
	Flags           uint            // flags:#
	Final           bool            // flags.0?final:true
	Pts             int             // pts:int
	Timeout         int             // flags.1?timeout:int
	TopMessage      int             // top_message:int
	ReadInboxMaxID  int             // read_inbox_max_id:int
	ReadOutboxMaxID int             // read_outbox_max_id:int
	UnreadCount     int             // unread_count:int
	Messages        []TLMessageType // messages:Vector<Message>
	Chats           []TLChatType    // chats:Vector<Chat>
	Users           []TLUserType    // users:Vector<User>
}

func (o *TLUpdatesChannelDifferenceTooLong) IsTLUpdatesChannelDifference() {}

func (o *TLUpdatesChannelDifferenceTooLong) Cmd() uint32 {
	return TagUpdatesChannelDifferenceTooLong
}

func (o *TLUpdatesChannelDifferenceTooLong) ReadBareFrom(r *tl.Reader) {
	o.Flags = uint(r.ReadUint32())
	o.Final = true
	o.Pts = r.ReadInt()
	o.Timeout = r.ReadInt()
	o.TopMessage = r.ReadInt()
	o.ReadInboxMaxID = r.ReadInt()
	o.ReadOutboxMaxID = r.ReadInt()
	o.UnreadCount = r.ReadInt()
	if cmd := r.ReadCmd(); cmd != TagVector {
		r.Fail(errors.New("expected: vector"))
	}
	o.Messages = make([]TLMessageType, r.ReadInt())
	for i := 0; i < len(o.Messages); i++ {
		o.Messages[i] = Schema.ReadLimitedBoxedObjectFrom(r, TagMessageEmpty, TagMessage, TagMessageService).(TLMessageType)
	}
	if cmd := r.ReadCmd(); cmd != TagVector {
		r.Fail(errors.New("expected: vector"))
	}
	o.Chats = make([]TLChatType, r.ReadInt())
	for i := 0; i < len(o.Chats); i++ {
		o.Chats[i] = Schema.ReadLimitedBoxedObjectFrom(r, TagChatEmpty, TagChat, TagChatForbidden, TagChannel, TagChannelForbidden).(TLChatType)
	}
	if cmd := r.ReadCmd(); cmd != TagVector {
		r.Fail(errors.New("expected: vector"))
	}
	o.Users = make([]TLUserType, r.ReadInt())
	for i := 0; i < len(o.Users); i++ {
		o.Users[i] = Schema.ReadLimitedBoxedObjectFrom(r, TagUserEmpty, TagUser).(TLUserType)
	}
}

func (o *TLUpdatesChannelDifferenceTooLong) WriteBareTo(w *tl.Writer) {
	w.WriteUint32(uint32(o.Flags))
	w.WriteInt(o.Pts)
	w.WriteInt(o.Timeout)
	w.WriteInt(o.TopMessage)
	w.WriteInt(o.ReadInboxMaxID)
	w.WriteInt(o.ReadOutboxMaxID)
	w.WriteInt(o.UnreadCount)
	w.WriteCmd(TagVector)
	w.WriteInt(len(o.Messages))
	for i := 0; i < len(o.Messages); i++ {
		w.WriteCmd(o.Messages[i].Cmd())
		o.Messages[i].WriteBareTo(w)
	}
	w.WriteCmd(TagVector)
	w.WriteInt(len(o.Chats))
	for i := 0; i < len(o.Chats); i++ {
		w.WriteCmd(o.Chats[i].Cmd())
		o.Chats[i].WriteBareTo(w)
	}
	w.WriteCmd(TagVector)
	w.WriteInt(len(o.Users))
	for i := 0; i < len(o.Users); i++ {
		w.WriteCmd(o.Users[i].Cmd())
		o.Users[i].WriteBareTo(w)
	}
}

func (o *TLUpdatesChannelDifferenceTooLong) String() string {
	return tl.Pretty(o)
}

// TLUpdatesChannelDifference represents ctor updates.channelDifference#2064674e flags:# flags.0?final:true pts:int flags.1?timeout:int new_messages:Vector<Message> other_updates:Vector<Update> chats:Vector<Chat> users:Vector<User> = updates.ChannelDifference from Telegram
type TLUpdatesChannelDifference struct {
	Flags        uint            // flags:#
	Final        bool            // flags.0?final:true
	Pts          int             // pts:int
	Timeout      int             // flags.1?timeout:int
	NewMessages  []TLMessageType // new_messages:Vector<Message>
	OtherUpdates []TLUpdateType  // other_updates:Vector<Update>
	Chats        []TLChatType    // chats:Vector<Chat>
	Users        []TLUserType    // users:Vector<User>
}

func (o *TLUpdatesChannelDifference) IsTLUpdatesChannelDifference() {}

func (o *TLUpdatesChannelDifference) Cmd() uint32 {
	return TagUpdatesChannelDifference
}

func (o *TLUpdatesChannelDifference) ReadBareFrom(r *tl.Reader) {
	o.Flags = uint(r.ReadUint32())
	o.Final = true
	o.Pts = r.ReadInt()
	o.Timeout = r.ReadInt()
	if cmd := r.ReadCmd(); cmd != TagVector {
		r.Fail(errors.New("expected: vector"))
	}
	o.NewMessages = make([]TLMessageType, r.ReadInt())
	for i := 0; i < len(o.NewMessages); i++ {
		o.NewMessages[i] = Schema.ReadLimitedBoxedObjectFrom(r, TagMessageEmpty, TagMessage, TagMessageService).(TLMessageType)
	}
	if cmd := r.ReadCmd(); cmd != TagVector {
		r.Fail(errors.New("expected: vector"))
	}
	o.OtherUpdates = make([]TLUpdateType, r.ReadInt())
	for i := 0; i < len(o.OtherUpdates); i++ {
		o.OtherUpdates[i] = Schema.ReadLimitedBoxedObjectFrom(r, TagUpdateNewMessage, TagUpdateMessageID, TagUpdateDeleteMessages, TagUpdateUserTyping, TagUpdateChatUserTyping, TagUpdateChatParticipants, TagUpdateUserStatus, TagUpdateUserName, TagUpdateUserPhoto, TagUpdateContactRegistered, TagUpdateContactLink, TagUpdateNewEncryptedMessage, TagUpdateEncryptedChatTyping, TagUpdateEncryption, TagUpdateEncryptedMessagesRead, TagUpdateChatParticipantAdd, TagUpdateChatParticipantDelete, TagUpdateDCOptions, TagUpdateUserBlocked, TagUpdateNotifySettings, TagUpdateServiceNotification, TagUpdatePrivacy, TagUpdateUserPhone, TagUpdateReadHistoryInbox, TagUpdateReadHistoryOutbox, TagUpdateWebPage, TagUpdateReadMessagesContents, TagUpdateChannelTooLong, TagUpdateChannel, TagUpdateNewChannelMessage, TagUpdateReadChannelInbox, TagUpdateDeleteChannelMessages, TagUpdateChannelMessageViews, TagUpdateChatAdmins, TagUpdateChatParticipantAdmin, TagUpdateNewStickerSet, TagUpdateStickerSetsOrder, TagUpdateStickerSets, TagUpdateSavedGifs, TagUpdateBotInlineQuery, TagUpdateBotInlineSend, TagUpdateEditChannelMessage, TagUpdateChannelPinnedMessage, TagUpdateBotCallbackQuery, TagUpdateEditMessage, TagUpdateInlineBotCallbackQuery, TagUpdateReadChannelOutbox, TagUpdateDraftMessage, TagUpdateReadFeaturedStickers, TagUpdateRecentStickers, TagUpdateConfig, TagUpdatePtsChanged, TagUpdateChannelWebPage, TagUpdateDialogPinned, TagUpdatePinnedDialogs, TagUpdateBotWebhookJSON, TagUpdateBotWebhookJSONQuery, TagUpdateBotShippingQuery, TagUpdateBotPrecheckoutQuery, TagUpdatePhoneCall).(TLUpdateType)
	}
	if cmd := r.ReadCmd(); cmd != TagVector {
		r.Fail(errors.New("expected: vector"))
	}
	o.Chats = make([]TLChatType, r.ReadInt())
	for i := 0; i < len(o.Chats); i++ {
		o.Chats[i] = Schema.ReadLimitedBoxedObjectFrom(r, TagChatEmpty, TagChat, TagChatForbidden, TagChannel, TagChannelForbidden).(TLChatType)
	}
	if cmd := r.ReadCmd(); cmd != TagVector {
		r.Fail(errors.New("expected: vector"))
	}
	o.Users = make([]TLUserType, r.ReadInt())
	for i := 0; i < len(o.Users); i++ {
		o.Users[i] = Schema.ReadLimitedBoxedObjectFrom(r, TagUserEmpty, TagUser).(TLUserType)
	}
}

func (o *TLUpdatesChannelDifference) WriteBareTo(w *tl.Writer) {
	w.WriteUint32(uint32(o.Flags))
	w.WriteInt(o.Pts)
	w.WriteInt(o.Timeout)
	w.WriteCmd(TagVector)
	w.WriteInt(len(o.NewMessages))
	for i := 0; i < len(o.NewMessages); i++ {
		w.WriteCmd(o.NewMessages[i].Cmd())
		o.NewMessages[i].WriteBareTo(w)
	}
	w.WriteCmd(TagVector)
	w.WriteInt(len(o.OtherUpdates))
	for i := 0; i < len(o.OtherUpdates); i++ {
		w.WriteCmd(o.OtherUpdates[i].Cmd())
		o.OtherUpdates[i].WriteBareTo(w)
	}
	w.WriteCmd(TagVector)
	w.WriteInt(len(o.Chats))
	for i := 0; i < len(o.Chats); i++ {
		w.WriteCmd(o.Chats[i].Cmd())
		o.Chats[i].WriteBareTo(w)
	}
	w.WriteCmd(TagVector)
	w.WriteInt(len(o.Users))
	for i := 0; i < len(o.Users); i++ {
		w.WriteCmd(o.Users[i].Cmd())
		o.Users[i].WriteBareTo(w)
	}
}

func (o *TLUpdatesChannelDifference) String() string {
	return tl.Pretty(o)
}

// TLChannelMessagesFilterEmpty represents ctor channelMessagesFilterEmpty#94d42ee7 = ChannelMessagesFilter from Telegram
type TLChannelMessagesFilterEmpty struct {
}

func (o *TLChannelMessagesFilterEmpty) IsTLChannelMessagesFilter() {}

func (o *TLChannelMessagesFilterEmpty) Cmd() uint32 {
	return TagChannelMessagesFilterEmpty
}

func (o *TLChannelMessagesFilterEmpty) ReadBareFrom(r *tl.Reader) {
}

func (o *TLChannelMessagesFilterEmpty) WriteBareTo(w *tl.Writer) {
}

func (o *TLChannelMessagesFilterEmpty) String() string {
	return tl.Pretty(o)
}

// TLChannelMessagesFilter represents ctor channelMessagesFilter#cd77d957 flags:# flags.1?exclude_new_messages:true ranges:Vector<MessageRange> = ChannelMessagesFilter from Telegram
type TLChannelMessagesFilter struct {
	Flags              uint              // flags:#
	ExcludeNewMessages bool              // flags.1?exclude_new_messages:true
	Ranges             []*TLMessageRange // ranges:Vector<MessageRange>
}

func (o *TLChannelMessagesFilter) IsTLChannelMessagesFilter() {}

func (o *TLChannelMessagesFilter) Cmd() uint32 {
	return TagChannelMessagesFilter
}

func (o *TLChannelMessagesFilter) ReadBareFrom(r *tl.Reader) {
	o.Flags = uint(r.ReadUint32())
	o.ExcludeNewMessages = true
	if cmd := r.ReadCmd(); cmd != TagVector {
		r.Fail(errors.New("expected: vector"))
	}
	o.Ranges = make([]*TLMessageRange, r.ReadInt())
	for i := 0; i < len(o.Ranges); i++ {
		if cmd := r.ReadCmd(); cmd != TagMessageRange {
			r.Fail(errors.New("expected: messageRange"))
		}
		o.Ranges[i] = new(TLMessageRange)
		o.Ranges[i].ReadBareFrom(r)
	}
}

func (o *TLChannelMessagesFilter) WriteBareTo(w *tl.Writer) {
	w.WriteUint32(uint32(o.Flags))
	w.WriteCmd(TagVector)
	w.WriteInt(len(o.Ranges))
	for i := 0; i < len(o.Ranges); i++ {
		w.WriteCmd(TagMessageRange)
		o.Ranges[i].WriteBareTo(w)
	}
}

func (o *TLChannelMessagesFilter) String() string {
	return tl.Pretty(o)
}

// TLChannelParticipant represents ctor channelParticipant#15ebac1d user_id:int date:int = ChannelParticipant from Telegram
type TLChannelParticipant struct {
	UserID int // user_id:int
	Date   int // date:int
}

func (o *TLChannelParticipant) IsTLChannelParticipant() {}

func (o *TLChannelParticipant) Cmd() uint32 {
	return TagChannelParticipant
}

func (o *TLChannelParticipant) ReadBareFrom(r *tl.Reader) {
	o.UserID = r.ReadInt()
	o.Date = r.ReadInt()
}

func (o *TLChannelParticipant) WriteBareTo(w *tl.Writer) {
	w.WriteInt(o.UserID)
	w.WriteInt(o.Date)
}

func (o *TLChannelParticipant) String() string {
	return tl.Pretty(o)
}

// TLChannelParticipantSelf represents ctor channelParticipantSelf#a3289a6d user_id:int inviter_id:int date:int = ChannelParticipant from Telegram
type TLChannelParticipantSelf struct {
	UserID    int // user_id:int
	InviterID int // inviter_id:int
	Date      int // date:int
}

func (o *TLChannelParticipantSelf) IsTLChannelParticipant() {}

func (o *TLChannelParticipantSelf) Cmd() uint32 {
	return TagChannelParticipantSelf
}

func (o *TLChannelParticipantSelf) ReadBareFrom(r *tl.Reader) {
	o.UserID = r.ReadInt()
	o.InviterID = r.ReadInt()
	o.Date = r.ReadInt()
}

func (o *TLChannelParticipantSelf) WriteBareTo(w *tl.Writer) {
	w.WriteInt(o.UserID)
	w.WriteInt(o.InviterID)
	w.WriteInt(o.Date)
}

func (o *TLChannelParticipantSelf) String() string {
	return tl.Pretty(o)
}

// TLChannelParticipantModerator represents ctor channelParticipantModerator#91057fef user_id:int inviter_id:int date:int = ChannelParticipant from Telegram
type TLChannelParticipantModerator struct {
	UserID    int // user_id:int
	InviterID int // inviter_id:int
	Date      int // date:int
}

func (o *TLChannelParticipantModerator) IsTLChannelParticipant() {}

func (o *TLChannelParticipantModerator) Cmd() uint32 {
	return TagChannelParticipantModerator
}

func (o *TLChannelParticipantModerator) ReadBareFrom(r *tl.Reader) {
	o.UserID = r.ReadInt()
	o.InviterID = r.ReadInt()
	o.Date = r.ReadInt()
}

func (o *TLChannelParticipantModerator) WriteBareTo(w *tl.Writer) {
	w.WriteInt(o.UserID)
	w.WriteInt(o.InviterID)
	w.WriteInt(o.Date)
}

func (o *TLChannelParticipantModerator) String() string {
	return tl.Pretty(o)
}

// TLChannelParticipantEditor represents ctor channelParticipantEditor#98192d61 user_id:int inviter_id:int date:int = ChannelParticipant from Telegram
type TLChannelParticipantEditor struct {
	UserID    int // user_id:int
	InviterID int // inviter_id:int
	Date      int // date:int
}

func (o *TLChannelParticipantEditor) IsTLChannelParticipant() {}

func (o *TLChannelParticipantEditor) Cmd() uint32 {
	return TagChannelParticipantEditor
}

func (o *TLChannelParticipantEditor) ReadBareFrom(r *tl.Reader) {
	o.UserID = r.ReadInt()
	o.InviterID = r.ReadInt()
	o.Date = r.ReadInt()
}

func (o *TLChannelParticipantEditor) WriteBareTo(w *tl.Writer) {
	w.WriteInt(o.UserID)
	w.WriteInt(o.InviterID)
	w.WriteInt(o.Date)
}

func (o *TLChannelParticipantEditor) String() string {
	return tl.Pretty(o)
}

// TLChannelParticipantKicked represents ctor channelParticipantKicked#8cc5e69a user_id:int kicked_by:int date:int = ChannelParticipant from Telegram
type TLChannelParticipantKicked struct {
	UserID   int // user_id:int
	KickedBy int // kicked_by:int
	Date     int // date:int
}

func (o *TLChannelParticipantKicked) IsTLChannelParticipant() {}

func (o *TLChannelParticipantKicked) Cmd() uint32 {
	return TagChannelParticipantKicked
}

func (o *TLChannelParticipantKicked) ReadBareFrom(r *tl.Reader) {
	o.UserID = r.ReadInt()
	o.KickedBy = r.ReadInt()
	o.Date = r.ReadInt()
}

func (o *TLChannelParticipantKicked) WriteBareTo(w *tl.Writer) {
	w.WriteInt(o.UserID)
	w.WriteInt(o.KickedBy)
	w.WriteInt(o.Date)
}

func (o *TLChannelParticipantKicked) String() string {
	return tl.Pretty(o)
}

// TLChannelParticipantCreator represents ctor channelParticipantCreator#e3e2e1f9 user_id:int = ChannelParticipant from Telegram
type TLChannelParticipantCreator struct {
	UserID int // user_id:int
}

func (o *TLChannelParticipantCreator) IsTLChannelParticipant() {}

func (o *TLChannelParticipantCreator) Cmd() uint32 {
	return TagChannelParticipantCreator
}

func (o *TLChannelParticipantCreator) ReadBareFrom(r *tl.Reader) {
	o.UserID = r.ReadInt()
}

func (o *TLChannelParticipantCreator) WriteBareTo(w *tl.Writer) {
	w.WriteInt(o.UserID)
}

func (o *TLChannelParticipantCreator) String() string {
	return tl.Pretty(o)
}

// TLChannelParticipantsRecent represents ctor channelParticipantsRecent#de3f3c79 = ChannelParticipantsFilter from Telegram
type TLChannelParticipantsRecent struct {
}

func (o *TLChannelParticipantsRecent) IsTLChannelParticipantsFilter() {}

func (o *TLChannelParticipantsRecent) Cmd() uint32 {
	return TagChannelParticipantsRecent
}

func (o *TLChannelParticipantsRecent) ReadBareFrom(r *tl.Reader) {
}

func (o *TLChannelParticipantsRecent) WriteBareTo(w *tl.Writer) {
}

func (o *TLChannelParticipantsRecent) String() string {
	return tl.Pretty(o)
}

// TLChannelParticipantsAdmins represents ctor channelParticipantsAdmins#b4608969 = ChannelParticipantsFilter from Telegram
type TLChannelParticipantsAdmins struct {
}

func (o *TLChannelParticipantsAdmins) IsTLChannelParticipantsFilter() {}

func (o *TLChannelParticipantsAdmins) Cmd() uint32 {
	return TagChannelParticipantsAdmins
}

func (o *TLChannelParticipantsAdmins) ReadBareFrom(r *tl.Reader) {
}

func (o *TLChannelParticipantsAdmins) WriteBareTo(w *tl.Writer) {
}

func (o *TLChannelParticipantsAdmins) String() string {
	return tl.Pretty(o)
}

// TLChannelParticipantsKicked represents ctor channelParticipantsKicked#3c37bb7a = ChannelParticipantsFilter from Telegram
type TLChannelParticipantsKicked struct {
}

func (o *TLChannelParticipantsKicked) IsTLChannelParticipantsFilter() {}

func (o *TLChannelParticipantsKicked) Cmd() uint32 {
	return TagChannelParticipantsKicked
}

func (o *TLChannelParticipantsKicked) ReadBareFrom(r *tl.Reader) {
}

func (o *TLChannelParticipantsKicked) WriteBareTo(w *tl.Writer) {
}

func (o *TLChannelParticipantsKicked) String() string {
	return tl.Pretty(o)
}

// TLChannelParticipantsBots represents ctor channelParticipantsBots#b0d1865b = ChannelParticipantsFilter from Telegram
type TLChannelParticipantsBots struct {
}

func (o *TLChannelParticipantsBots) IsTLChannelParticipantsFilter() {}

func (o *TLChannelParticipantsBots) Cmd() uint32 {
	return TagChannelParticipantsBots
}

func (o *TLChannelParticipantsBots) ReadBareFrom(r *tl.Reader) {
}

func (o *TLChannelParticipantsBots) WriteBareTo(w *tl.Writer) {
}

func (o *TLChannelParticipantsBots) String() string {
	return tl.Pretty(o)
}

// TLChannelRoleEmpty represents ctor channelRoleEmpty#b285a0c6 = ChannelParticipantRole from Telegram
type TLChannelRoleEmpty struct {
}

func (o *TLChannelRoleEmpty) IsTLChannelParticipantRole() {}

func (o *TLChannelRoleEmpty) Cmd() uint32 {
	return TagChannelRoleEmpty
}

func (o *TLChannelRoleEmpty) ReadBareFrom(r *tl.Reader) {
}

func (o *TLChannelRoleEmpty) WriteBareTo(w *tl.Writer) {
}

func (o *TLChannelRoleEmpty) String() string {
	return tl.Pretty(o)
}

// TLChannelRoleModerator represents ctor channelRoleModerator#9618d975 = ChannelParticipantRole from Telegram
type TLChannelRoleModerator struct {
}

func (o *TLChannelRoleModerator) IsTLChannelParticipantRole() {}

func (o *TLChannelRoleModerator) Cmd() uint32 {
	return TagChannelRoleModerator
}

func (o *TLChannelRoleModerator) ReadBareFrom(r *tl.Reader) {
}

func (o *TLChannelRoleModerator) WriteBareTo(w *tl.Writer) {
}

func (o *TLChannelRoleModerator) String() string {
	return tl.Pretty(o)
}

// TLChannelRoleEditor represents ctor channelRoleEditor#820bfe8c = ChannelParticipantRole from Telegram
type TLChannelRoleEditor struct {
}

func (o *TLChannelRoleEditor) IsTLChannelParticipantRole() {}

func (o *TLChannelRoleEditor) Cmd() uint32 {
	return TagChannelRoleEditor
}

func (o *TLChannelRoleEditor) ReadBareFrom(r *tl.Reader) {
}

func (o *TLChannelRoleEditor) WriteBareTo(w *tl.Writer) {
}

func (o *TLChannelRoleEditor) String() string {
	return tl.Pretty(o)
}

// TLFoundGif represents ctor foundGif#162ecc1f url:string thumb_url:string content_url:string content_type:string w:int h:int = FoundGif from Telegram
type TLFoundGif struct {
	Url         string // url:string
	ThumbUrl    string // thumb_url:string
	ContentUrl  string // content_url:string
	ContentType string // content_type:string
	W           int    // w:int
	H           int    // h:int
}

func (o *TLFoundGif) IsTLFoundGif() {}

func (o *TLFoundGif) Cmd() uint32 {
	return TagFoundGif
}

func (o *TLFoundGif) ReadBareFrom(r *tl.Reader) {
	o.Url = r.ReadString()
	o.ThumbUrl = r.ReadString()
	o.ContentUrl = r.ReadString()
	o.ContentType = r.ReadString()
	o.W = r.ReadInt()
	o.H = r.ReadInt()
}

func (o *TLFoundGif) WriteBareTo(w *tl.Writer) {
	w.WriteString(o.Url)
	w.WriteString(o.ThumbUrl)
	w.WriteString(o.ContentUrl)
	w.WriteString(o.ContentType)
	w.WriteInt(o.W)
	w.WriteInt(o.H)
}

func (o *TLFoundGif) String() string {
	return tl.Pretty(o)
}

// TLFoundGifCached represents ctor foundGifCached#9c750409 url:string photo:Photo document:Document = FoundGif from Telegram
type TLFoundGifCached struct {
	Url      string         // url:string
	Photo    TLPhotoType    // photo:Photo
	Document TLDocumentType // document:Document
}

func (o *TLFoundGifCached) IsTLFoundGif() {}

func (o *TLFoundGifCached) Cmd() uint32 {
	return TagFoundGifCached
}

func (o *TLFoundGifCached) ReadBareFrom(r *tl.Reader) {
	o.Url = r.ReadString()
	o.Photo = Schema.ReadLimitedBoxedObjectFrom(r, TagPhotoEmpty, TagPhoto).(TLPhotoType)
	o.Document = Schema.ReadLimitedBoxedObjectFrom(r, TagDocumentEmpty, TagDocument).(TLDocumentType)
}

func (o *TLFoundGifCached) WriteBareTo(w *tl.Writer) {
	w.WriteString(o.Url)
	w.WriteCmd(o.Photo.Cmd())
	o.Photo.WriteBareTo(w)
	w.WriteCmd(o.Document.Cmd())
	o.Document.WriteBareTo(w)
}

func (o *TLFoundGifCached) String() string {
	return tl.Pretty(o)
}

// TLMessagesSavedGifsNotModified represents ctor messages.savedGifsNotModified#e8025ca2 = messages.SavedGifs from Telegram
type TLMessagesSavedGifsNotModified struct {
}

func (o *TLMessagesSavedGifsNotModified) IsTLMessagesSavedGifs() {}

func (o *TLMessagesSavedGifsNotModified) Cmd() uint32 {
	return TagMessagesSavedGifsNotModified
}

func (o *TLMessagesSavedGifsNotModified) ReadBareFrom(r *tl.Reader) {
}

func (o *TLMessagesSavedGifsNotModified) WriteBareTo(w *tl.Writer) {
}

func (o *TLMessagesSavedGifsNotModified) String() string {
	return tl.Pretty(o)
}

// TLMessagesSavedGifs represents ctor messages.savedGifs#2e0709a5 hash:int gifs:Vector<Document> = messages.SavedGifs from Telegram
type TLMessagesSavedGifs struct {
	Hash int              // hash:int
	Gifs []TLDocumentType // gifs:Vector<Document>
}

func (o *TLMessagesSavedGifs) IsTLMessagesSavedGifs() {}

func (o *TLMessagesSavedGifs) Cmd() uint32 {
	return TagMessagesSavedGifs
}

func (o *TLMessagesSavedGifs) ReadBareFrom(r *tl.Reader) {
	o.Hash = r.ReadInt()
	if cmd := r.ReadCmd(); cmd != TagVector {
		r.Fail(errors.New("expected: vector"))
	}
	o.Gifs = make([]TLDocumentType, r.ReadInt())
	for i := 0; i < len(o.Gifs); i++ {
		o.Gifs[i] = Schema.ReadLimitedBoxedObjectFrom(r, TagDocumentEmpty, TagDocument).(TLDocumentType)
	}
}

func (o *TLMessagesSavedGifs) WriteBareTo(w *tl.Writer) {
	w.WriteInt(o.Hash)
	w.WriteCmd(TagVector)
	w.WriteInt(len(o.Gifs))
	for i := 0; i < len(o.Gifs); i++ {
		w.WriteCmd(o.Gifs[i].Cmd())
		o.Gifs[i].WriteBareTo(w)
	}
}

func (o *TLMessagesSavedGifs) String() string {
	return tl.Pretty(o)
}

// TLInputBotInlineMessageMediaAuto represents ctor inputBotInlineMessageMediaAuto#292fed13 flags:# caption:string flags.2?reply_markup:ReplyMarkup = InputBotInlineMessage from Telegram
type TLInputBotInlineMessageMediaAuto struct {
	Flags       uint              // flags:#
	Caption     string            // caption:string
	ReplyMarkup TLReplyMarkupType // flags.2?reply_markup:ReplyMarkup
}

func (o *TLInputBotInlineMessageMediaAuto) IsTLInputBotInlineMessage() {}

func (o *TLInputBotInlineMessageMediaAuto) Cmd() uint32 {
	return TagInputBotInlineMessageMediaAuto
}

func (o *TLInputBotInlineMessageMediaAuto) ReadBareFrom(r *tl.Reader) {
	o.Flags = uint(r.ReadUint32())
	o.Caption = r.ReadString()
	o.ReplyMarkup = Schema.ReadLimitedBoxedObjectFrom(r, TagReplyKeyboardHide, TagReplyKeyboardForceReply, TagReplyKeyboardMarkup, TagReplyInlineMarkup).(TLReplyMarkupType)
}

func (o *TLInputBotInlineMessageMediaAuto) WriteBareTo(w *tl.Writer) {
	w.WriteUint32(uint32(o.Flags))
	w.WriteString(o.Caption)
	w.WriteCmd(o.ReplyMarkup.Cmd())
	o.ReplyMarkup.WriteBareTo(w)
}

func (o *TLInputBotInlineMessageMediaAuto) String() string {
	return tl.Pretty(o)
}

// TLInputBotInlineMessageText represents ctor inputBotInlineMessageText#3dcd7a87 flags:# flags.0?no_webpage:true message:string flags.1?entities:Vector<MessageEntity> flags.2?reply_markup:ReplyMarkup = InputBotInlineMessage from Telegram
type TLInputBotInlineMessageText struct {
	Flags       uint                  // flags:#
	NoWebpage   bool                  // flags.0?no_webpage:true
	Message     string                // message:string
	Entities    []TLMessageEntityType // flags.1?entities:Vector<MessageEntity>
	ReplyMarkup TLReplyMarkupType     // flags.2?reply_markup:ReplyMarkup
}

func (o *TLInputBotInlineMessageText) IsTLInputBotInlineMessage() {}

func (o *TLInputBotInlineMessageText) Cmd() uint32 {
	return TagInputBotInlineMessageText
}

func (o *TLInputBotInlineMessageText) ReadBareFrom(r *tl.Reader) {
	o.Flags = uint(r.ReadUint32())
	o.NoWebpage = true
	o.Message = r.ReadString()
	if cmd := r.ReadCmd(); cmd != TagVector {
		r.Fail(errors.New("expected: vector"))
	}
	o.Entities = make([]TLMessageEntityType, r.ReadInt())
	for i := 0; i < len(o.Entities); i++ {
		o.Entities[i] = Schema.ReadLimitedBoxedObjectFrom(r, TagMessageEntityUnknown, TagMessageEntityMention, TagMessageEntityHashtag, TagMessageEntityBotCommand, TagMessageEntityUrl, TagMessageEntityEmail, TagMessageEntityBold, TagMessageEntityItalic, TagMessageEntityCode, TagMessageEntityPre, TagMessageEntityTextUrl, TagMessageEntityMentionName, TagInputMessageEntityMentionName).(TLMessageEntityType)
	}
	o.ReplyMarkup = Schema.ReadLimitedBoxedObjectFrom(r, TagReplyKeyboardHide, TagReplyKeyboardForceReply, TagReplyKeyboardMarkup, TagReplyInlineMarkup).(TLReplyMarkupType)
}

func (o *TLInputBotInlineMessageText) WriteBareTo(w *tl.Writer) {
	w.WriteUint32(uint32(o.Flags))
	w.WriteString(o.Message)
	w.WriteCmd(TagVector)
	w.WriteInt(len(o.Entities))
	for i := 0; i < len(o.Entities); i++ {
		w.WriteCmd(o.Entities[i].Cmd())
		o.Entities[i].WriteBareTo(w)
	}
	w.WriteCmd(o.ReplyMarkup.Cmd())
	o.ReplyMarkup.WriteBareTo(w)
}

func (o *TLInputBotInlineMessageText) String() string {
	return tl.Pretty(o)
}

// TLInputBotInlineMessageMediaGeo represents ctor inputBotInlineMessageMediaGeo#f4a59de1 flags:# geo_point:InputGeoPoint flags.2?reply_markup:ReplyMarkup = InputBotInlineMessage from Telegram
type TLInputBotInlineMessageMediaGeo struct {
	Flags       uint                // flags:#
	GeoPoint    TLInputGeoPointType // geo_point:InputGeoPoint
	ReplyMarkup TLReplyMarkupType   // flags.2?reply_markup:ReplyMarkup
}

func (o *TLInputBotInlineMessageMediaGeo) IsTLInputBotInlineMessage() {}

func (o *TLInputBotInlineMessageMediaGeo) Cmd() uint32 {
	return TagInputBotInlineMessageMediaGeo
}

func (o *TLInputBotInlineMessageMediaGeo) ReadBareFrom(r *tl.Reader) {
	o.Flags = uint(r.ReadUint32())
	o.GeoPoint = Schema.ReadLimitedBoxedObjectFrom(r, TagInputGeoPointEmpty, TagInputGeoPoint).(TLInputGeoPointType)
	o.ReplyMarkup = Schema.ReadLimitedBoxedObjectFrom(r, TagReplyKeyboardHide, TagReplyKeyboardForceReply, TagReplyKeyboardMarkup, TagReplyInlineMarkup).(TLReplyMarkupType)
}

func (o *TLInputBotInlineMessageMediaGeo) WriteBareTo(w *tl.Writer) {
	w.WriteUint32(uint32(o.Flags))
	w.WriteCmd(o.GeoPoint.Cmd())
	o.GeoPoint.WriteBareTo(w)
	w.WriteCmd(o.ReplyMarkup.Cmd())
	o.ReplyMarkup.WriteBareTo(w)
}

func (o *TLInputBotInlineMessageMediaGeo) String() string {
	return tl.Pretty(o)
}

// TLInputBotInlineMessageMediaVenue represents ctor inputBotInlineMessageMediaVenue#aaafadc8 flags:# geo_point:InputGeoPoint title:string address:string provider:string venue_id:string flags.2?reply_markup:ReplyMarkup = InputBotInlineMessage from Telegram
type TLInputBotInlineMessageMediaVenue struct {
	Flags       uint                // flags:#
	GeoPoint    TLInputGeoPointType // geo_point:InputGeoPoint
	Title       string              // title:string
	Address     string              // address:string
	Provider    string              // provider:string
	VenueID     string              // venue_id:string
	ReplyMarkup TLReplyMarkupType   // flags.2?reply_markup:ReplyMarkup
}

func (o *TLInputBotInlineMessageMediaVenue) IsTLInputBotInlineMessage() {}

func (o *TLInputBotInlineMessageMediaVenue) Cmd() uint32 {
	return TagInputBotInlineMessageMediaVenue
}

func (o *TLInputBotInlineMessageMediaVenue) ReadBareFrom(r *tl.Reader) {
	o.Flags = uint(r.ReadUint32())
	o.GeoPoint = Schema.ReadLimitedBoxedObjectFrom(r, TagInputGeoPointEmpty, TagInputGeoPoint).(TLInputGeoPointType)
	o.Title = r.ReadString()
	o.Address = r.ReadString()
	o.Provider = r.ReadString()
	o.VenueID = r.ReadString()
	o.ReplyMarkup = Schema.ReadLimitedBoxedObjectFrom(r, TagReplyKeyboardHide, TagReplyKeyboardForceReply, TagReplyKeyboardMarkup, TagReplyInlineMarkup).(TLReplyMarkupType)
}

func (o *TLInputBotInlineMessageMediaVenue) WriteBareTo(w *tl.Writer) {
	w.WriteUint32(uint32(o.Flags))
	w.WriteCmd(o.GeoPoint.Cmd())
	o.GeoPoint.WriteBareTo(w)
	w.WriteString(o.Title)
	w.WriteString(o.Address)
	w.WriteString(o.Provider)
	w.WriteString(o.VenueID)
	w.WriteCmd(o.ReplyMarkup.Cmd())
	o.ReplyMarkup.WriteBareTo(w)
}

func (o *TLInputBotInlineMessageMediaVenue) String() string {
	return tl.Pretty(o)
}

// TLInputBotInlineMessageMediaContact represents ctor inputBotInlineMessageMediaContact#2daf01a7 flags:# phone_number:string first_name:string last_name:string flags.2?reply_markup:ReplyMarkup = InputBotInlineMessage from Telegram
type TLInputBotInlineMessageMediaContact struct {
	Flags       uint              // flags:#
	PhoneNumber string            // phone_number:string
	FirstName   string            // first_name:string
	LastName    string            // last_name:string
	ReplyMarkup TLReplyMarkupType // flags.2?reply_markup:ReplyMarkup
}

func (o *TLInputBotInlineMessageMediaContact) IsTLInputBotInlineMessage() {}

func (o *TLInputBotInlineMessageMediaContact) Cmd() uint32 {
	return TagInputBotInlineMessageMediaContact
}

func (o *TLInputBotInlineMessageMediaContact) ReadBareFrom(r *tl.Reader) {
	o.Flags = uint(r.ReadUint32())
	o.PhoneNumber = r.ReadString()
	o.FirstName = r.ReadString()
	o.LastName = r.ReadString()
	o.ReplyMarkup = Schema.ReadLimitedBoxedObjectFrom(r, TagReplyKeyboardHide, TagReplyKeyboardForceReply, TagReplyKeyboardMarkup, TagReplyInlineMarkup).(TLReplyMarkupType)
}

func (o *TLInputBotInlineMessageMediaContact) WriteBareTo(w *tl.Writer) {
	w.WriteUint32(uint32(o.Flags))
	w.WriteString(o.PhoneNumber)
	w.WriteString(o.FirstName)
	w.WriteString(o.LastName)
	w.WriteCmd(o.ReplyMarkup.Cmd())
	o.ReplyMarkup.WriteBareTo(w)
}

func (o *TLInputBotInlineMessageMediaContact) String() string {
	return tl.Pretty(o)
}

// TLInputBotInlineMessageGame represents ctor inputBotInlineMessageGame#4b425864 flags:# flags.2?reply_markup:ReplyMarkup = InputBotInlineMessage from Telegram
type TLInputBotInlineMessageGame struct {
	Flags       uint              // flags:#
	ReplyMarkup TLReplyMarkupType // flags.2?reply_markup:ReplyMarkup
}

func (o *TLInputBotInlineMessageGame) IsTLInputBotInlineMessage() {}

func (o *TLInputBotInlineMessageGame) Cmd() uint32 {
	return TagInputBotInlineMessageGame
}

func (o *TLInputBotInlineMessageGame) ReadBareFrom(r *tl.Reader) {
	o.Flags = uint(r.ReadUint32())
	o.ReplyMarkup = Schema.ReadLimitedBoxedObjectFrom(r, TagReplyKeyboardHide, TagReplyKeyboardForceReply, TagReplyKeyboardMarkup, TagReplyInlineMarkup).(TLReplyMarkupType)
}

func (o *TLInputBotInlineMessageGame) WriteBareTo(w *tl.Writer) {
	w.WriteUint32(uint32(o.Flags))
	w.WriteCmd(o.ReplyMarkup.Cmd())
	o.ReplyMarkup.WriteBareTo(w)
}

func (o *TLInputBotInlineMessageGame) String() string {
	return tl.Pretty(o)
}

// TLInputBotInlineResult represents ctor inputBotInlineResult#2cbbe15a flags:# id:string type:string flags.1?title:string flags.2?description:string flags.3?url:string flags.4?thumb_url:string flags.5?content_url:string flags.5?content_type:string flags.6?w:int flags.6?h:int flags.7?duration:int send_message:InputBotInlineMessage = InputBotInlineResult from Telegram
type TLInputBotInlineResult struct {
	Flags       uint                        // flags:#
	ID          string                      // id:string
	Type        string                      // type:string
	Title       string                      // flags.1?title:string
	Description string                      // flags.2?description:string
	Url         string                      // flags.3?url:string
	ThumbUrl    string                      // flags.4?thumb_url:string
	ContentUrl  string                      // flags.5?content_url:string
	ContentType string                      // flags.5?content_type:string
	W           int                         // flags.6?w:int
	H           int                         // flags.6?h:int
	Duration    int                         // flags.7?duration:int
	SendMessage TLInputBotInlineMessageType // send_message:InputBotInlineMessage
}

func (o *TLInputBotInlineResult) IsTLInputBotInlineResult() {}

func (o *TLInputBotInlineResult) Cmd() uint32 {
	return TagInputBotInlineResult
}

func (o *TLInputBotInlineResult) ReadBareFrom(r *tl.Reader) {
	o.Flags = uint(r.ReadUint32())
	o.ID = r.ReadString()
	o.Type = r.ReadString()
	o.Title = r.ReadString()
	o.Description = r.ReadString()
	o.Url = r.ReadString()
	o.ThumbUrl = r.ReadString()
	o.ContentUrl = r.ReadString()
	o.ContentType = r.ReadString()
	o.W = r.ReadInt()
	o.H = r.ReadInt()
	o.Duration = r.ReadInt()
	o.SendMessage = Schema.ReadLimitedBoxedObjectFrom(r, TagInputBotInlineMessageMediaAuto, TagInputBotInlineMessageText, TagInputBotInlineMessageMediaGeo, TagInputBotInlineMessageMediaVenue, TagInputBotInlineMessageMediaContact, TagInputBotInlineMessageGame).(TLInputBotInlineMessageType)
}

func (o *TLInputBotInlineResult) WriteBareTo(w *tl.Writer) {
	w.WriteUint32(uint32(o.Flags))
	w.WriteString(o.ID)
	w.WriteString(o.Type)
	w.WriteString(o.Title)
	w.WriteString(o.Description)
	w.WriteString(o.Url)
	w.WriteString(o.ThumbUrl)
	w.WriteString(o.ContentUrl)
	w.WriteString(o.ContentType)
	w.WriteInt(o.W)
	w.WriteInt(o.H)
	w.WriteInt(o.Duration)
	w.WriteCmd(o.SendMessage.Cmd())
	o.SendMessage.WriteBareTo(w)
}

func (o *TLInputBotInlineResult) String() string {
	return tl.Pretty(o)
}

// TLInputBotInlineResultPhoto represents ctor inputBotInlineResultPhoto#a8d864a7 id:string type:string photo:InputPhoto send_message:InputBotInlineMessage = InputBotInlineResult from Telegram
type TLInputBotInlineResultPhoto struct {
	ID          string                      // id:string
	Type        string                      // type:string
	Photo       TLInputPhotoType            // photo:InputPhoto
	SendMessage TLInputBotInlineMessageType // send_message:InputBotInlineMessage
}

func (o *TLInputBotInlineResultPhoto) IsTLInputBotInlineResult() {}

func (o *TLInputBotInlineResultPhoto) Cmd() uint32 {
	return TagInputBotInlineResultPhoto
}

func (o *TLInputBotInlineResultPhoto) ReadBareFrom(r *tl.Reader) {
	o.ID = r.ReadString()
	o.Type = r.ReadString()
	o.Photo = Schema.ReadLimitedBoxedObjectFrom(r, TagInputPhotoEmpty, TagInputPhoto).(TLInputPhotoType)
	o.SendMessage = Schema.ReadLimitedBoxedObjectFrom(r, TagInputBotInlineMessageMediaAuto, TagInputBotInlineMessageText, TagInputBotInlineMessageMediaGeo, TagInputBotInlineMessageMediaVenue, TagInputBotInlineMessageMediaContact, TagInputBotInlineMessageGame).(TLInputBotInlineMessageType)
}

func (o *TLInputBotInlineResultPhoto) WriteBareTo(w *tl.Writer) {
	w.WriteString(o.ID)
	w.WriteString(o.Type)
	w.WriteCmd(o.Photo.Cmd())
	o.Photo.WriteBareTo(w)
	w.WriteCmd(o.SendMessage.Cmd())
	o.SendMessage.WriteBareTo(w)
}

func (o *TLInputBotInlineResultPhoto) String() string {
	return tl.Pretty(o)
}

// TLInputBotInlineResultDocument represents ctor inputBotInlineResultDocument#fff8fdc4 flags:# id:string type:string flags.1?title:string flags.2?description:string document:InputDocument send_message:InputBotInlineMessage = InputBotInlineResult from Telegram
type TLInputBotInlineResultDocument struct {
	Flags       uint                        // flags:#
	ID          string                      // id:string
	Type        string                      // type:string
	Title       string                      // flags.1?title:string
	Description string                      // flags.2?description:string
	Document    TLInputDocumentType         // document:InputDocument
	SendMessage TLInputBotInlineMessageType // send_message:InputBotInlineMessage
}

func (o *TLInputBotInlineResultDocument) IsTLInputBotInlineResult() {}

func (o *TLInputBotInlineResultDocument) Cmd() uint32 {
	return TagInputBotInlineResultDocument
}

func (o *TLInputBotInlineResultDocument) ReadBareFrom(r *tl.Reader) {
	o.Flags = uint(r.ReadUint32())
	o.ID = r.ReadString()
	o.Type = r.ReadString()
	o.Title = r.ReadString()
	o.Description = r.ReadString()
	o.Document = Schema.ReadLimitedBoxedObjectFrom(r, TagInputDocumentEmpty, TagInputDocument).(TLInputDocumentType)
	o.SendMessage = Schema.ReadLimitedBoxedObjectFrom(r, TagInputBotInlineMessageMediaAuto, TagInputBotInlineMessageText, TagInputBotInlineMessageMediaGeo, TagInputBotInlineMessageMediaVenue, TagInputBotInlineMessageMediaContact, TagInputBotInlineMessageGame).(TLInputBotInlineMessageType)
}

func (o *TLInputBotInlineResultDocument) WriteBareTo(w *tl.Writer) {
	w.WriteUint32(uint32(o.Flags))
	w.WriteString(o.ID)
	w.WriteString(o.Type)
	w.WriteString(o.Title)
	w.WriteString(o.Description)
	w.WriteCmd(o.Document.Cmd())
	o.Document.WriteBareTo(w)
	w.WriteCmd(o.SendMessage.Cmd())
	o.SendMessage.WriteBareTo(w)
}

func (o *TLInputBotInlineResultDocument) String() string {
	return tl.Pretty(o)
}

// TLInputBotInlineResultGame represents ctor inputBotInlineResultGame#4fa417f2 id:string short_name:string send_message:InputBotInlineMessage = InputBotInlineResult from Telegram
type TLInputBotInlineResultGame struct {
	ID          string                      // id:string
	ShortName   string                      // short_name:string
	SendMessage TLInputBotInlineMessageType // send_message:InputBotInlineMessage
}

func (o *TLInputBotInlineResultGame) IsTLInputBotInlineResult() {}

func (o *TLInputBotInlineResultGame) Cmd() uint32 {
	return TagInputBotInlineResultGame
}

func (o *TLInputBotInlineResultGame) ReadBareFrom(r *tl.Reader) {
	o.ID = r.ReadString()
	o.ShortName = r.ReadString()
	o.SendMessage = Schema.ReadLimitedBoxedObjectFrom(r, TagInputBotInlineMessageMediaAuto, TagInputBotInlineMessageText, TagInputBotInlineMessageMediaGeo, TagInputBotInlineMessageMediaVenue, TagInputBotInlineMessageMediaContact, TagInputBotInlineMessageGame).(TLInputBotInlineMessageType)
}

func (o *TLInputBotInlineResultGame) WriteBareTo(w *tl.Writer) {
	w.WriteString(o.ID)
	w.WriteString(o.ShortName)
	w.WriteCmd(o.SendMessage.Cmd())
	o.SendMessage.WriteBareTo(w)
}

func (o *TLInputBotInlineResultGame) String() string {
	return tl.Pretty(o)
}

// TLBotInlineMessageMediaAuto represents ctor botInlineMessageMediaAuto#0a74b15b flags:# caption:string flags.2?reply_markup:ReplyMarkup = BotInlineMessage from Telegram
type TLBotInlineMessageMediaAuto struct {
	Flags       uint              // flags:#
	Caption     string            // caption:string
	ReplyMarkup TLReplyMarkupType // flags.2?reply_markup:ReplyMarkup
}

func (o *TLBotInlineMessageMediaAuto) IsTLBotInlineMessage() {}

func (o *TLBotInlineMessageMediaAuto) Cmd() uint32 {
	return TagBotInlineMessageMediaAuto
}

func (o *TLBotInlineMessageMediaAuto) ReadBareFrom(r *tl.Reader) {
	o.Flags = uint(r.ReadUint32())
	o.Caption = r.ReadString()
	o.ReplyMarkup = Schema.ReadLimitedBoxedObjectFrom(r, TagReplyKeyboardHide, TagReplyKeyboardForceReply, TagReplyKeyboardMarkup, TagReplyInlineMarkup).(TLReplyMarkupType)
}

func (o *TLBotInlineMessageMediaAuto) WriteBareTo(w *tl.Writer) {
	w.WriteUint32(uint32(o.Flags))
	w.WriteString(o.Caption)
	w.WriteCmd(o.ReplyMarkup.Cmd())
	o.ReplyMarkup.WriteBareTo(w)
}

func (o *TLBotInlineMessageMediaAuto) String() string {
	return tl.Pretty(o)
}

// TLBotInlineMessageText represents ctor botInlineMessageText#8c7f65e2 flags:# flags.0?no_webpage:true message:string flags.1?entities:Vector<MessageEntity> flags.2?reply_markup:ReplyMarkup = BotInlineMessage from Telegram
type TLBotInlineMessageText struct {
	Flags       uint                  // flags:#
	NoWebpage   bool                  // flags.0?no_webpage:true
	Message     string                // message:string
	Entities    []TLMessageEntityType // flags.1?entities:Vector<MessageEntity>
	ReplyMarkup TLReplyMarkupType     // flags.2?reply_markup:ReplyMarkup
}

func (o *TLBotInlineMessageText) IsTLBotInlineMessage() {}

func (o *TLBotInlineMessageText) Cmd() uint32 {
	return TagBotInlineMessageText
}

func (o *TLBotInlineMessageText) ReadBareFrom(r *tl.Reader) {
	o.Flags = uint(r.ReadUint32())
	o.NoWebpage = true
	o.Message = r.ReadString()
	if cmd := r.ReadCmd(); cmd != TagVector {
		r.Fail(errors.New("expected: vector"))
	}
	o.Entities = make([]TLMessageEntityType, r.ReadInt())
	for i := 0; i < len(o.Entities); i++ {
		o.Entities[i] = Schema.ReadLimitedBoxedObjectFrom(r, TagMessageEntityUnknown, TagMessageEntityMention, TagMessageEntityHashtag, TagMessageEntityBotCommand, TagMessageEntityUrl, TagMessageEntityEmail, TagMessageEntityBold, TagMessageEntityItalic, TagMessageEntityCode, TagMessageEntityPre, TagMessageEntityTextUrl, TagMessageEntityMentionName, TagInputMessageEntityMentionName).(TLMessageEntityType)
	}
	o.ReplyMarkup = Schema.ReadLimitedBoxedObjectFrom(r, TagReplyKeyboardHide, TagReplyKeyboardForceReply, TagReplyKeyboardMarkup, TagReplyInlineMarkup).(TLReplyMarkupType)
}

func (o *TLBotInlineMessageText) WriteBareTo(w *tl.Writer) {
	w.WriteUint32(uint32(o.Flags))
	w.WriteString(o.Message)
	w.WriteCmd(TagVector)
	w.WriteInt(len(o.Entities))
	for i := 0; i < len(o.Entities); i++ {
		w.WriteCmd(o.Entities[i].Cmd())
		o.Entities[i].WriteBareTo(w)
	}
	w.WriteCmd(o.ReplyMarkup.Cmd())
	o.ReplyMarkup.WriteBareTo(w)
}

func (o *TLBotInlineMessageText) String() string {
	return tl.Pretty(o)
}

// TLBotInlineMessageMediaGeo represents ctor botInlineMessageMediaGeo#3a8fd8b8 flags:# geo:GeoPoint flags.2?reply_markup:ReplyMarkup = BotInlineMessage from Telegram
type TLBotInlineMessageMediaGeo struct {
	Flags       uint              // flags:#
	Geo         TLGeoPointType    // geo:GeoPoint
	ReplyMarkup TLReplyMarkupType // flags.2?reply_markup:ReplyMarkup
}

func (o *TLBotInlineMessageMediaGeo) IsTLBotInlineMessage() {}

func (o *TLBotInlineMessageMediaGeo) Cmd() uint32 {
	return TagBotInlineMessageMediaGeo
}

func (o *TLBotInlineMessageMediaGeo) ReadBareFrom(r *tl.Reader) {
	o.Flags = uint(r.ReadUint32())
	o.Geo = Schema.ReadLimitedBoxedObjectFrom(r, TagGeoPointEmpty, TagGeoPoint).(TLGeoPointType)
	o.ReplyMarkup = Schema.ReadLimitedBoxedObjectFrom(r, TagReplyKeyboardHide, TagReplyKeyboardForceReply, TagReplyKeyboardMarkup, TagReplyInlineMarkup).(TLReplyMarkupType)
}

func (o *TLBotInlineMessageMediaGeo) WriteBareTo(w *tl.Writer) {
	w.WriteUint32(uint32(o.Flags))
	w.WriteCmd(o.Geo.Cmd())
	o.Geo.WriteBareTo(w)
	w.WriteCmd(o.ReplyMarkup.Cmd())
	o.ReplyMarkup.WriteBareTo(w)
}

func (o *TLBotInlineMessageMediaGeo) String() string {
	return tl.Pretty(o)
}

// TLBotInlineMessageMediaVenue represents ctor botInlineMessageMediaVenue#4366232e flags:# geo:GeoPoint title:string address:string provider:string venue_id:string flags.2?reply_markup:ReplyMarkup = BotInlineMessage from Telegram
type TLBotInlineMessageMediaVenue struct {
	Flags       uint              // flags:#
	Geo         TLGeoPointType    // geo:GeoPoint
	Title       string            // title:string
	Address     string            // address:string
	Provider    string            // provider:string
	VenueID     string            // venue_id:string
	ReplyMarkup TLReplyMarkupType // flags.2?reply_markup:ReplyMarkup
}

func (o *TLBotInlineMessageMediaVenue) IsTLBotInlineMessage() {}

func (o *TLBotInlineMessageMediaVenue) Cmd() uint32 {
	return TagBotInlineMessageMediaVenue
}

func (o *TLBotInlineMessageMediaVenue) ReadBareFrom(r *tl.Reader) {
	o.Flags = uint(r.ReadUint32())
	o.Geo = Schema.ReadLimitedBoxedObjectFrom(r, TagGeoPointEmpty, TagGeoPoint).(TLGeoPointType)
	o.Title = r.ReadString()
	o.Address = r.ReadString()
	o.Provider = r.ReadString()
	o.VenueID = r.ReadString()
	o.ReplyMarkup = Schema.ReadLimitedBoxedObjectFrom(r, TagReplyKeyboardHide, TagReplyKeyboardForceReply, TagReplyKeyboardMarkup, TagReplyInlineMarkup).(TLReplyMarkupType)
}

func (o *TLBotInlineMessageMediaVenue) WriteBareTo(w *tl.Writer) {
	w.WriteUint32(uint32(o.Flags))
	w.WriteCmd(o.Geo.Cmd())
	o.Geo.WriteBareTo(w)
	w.WriteString(o.Title)
	w.WriteString(o.Address)
	w.WriteString(o.Provider)
	w.WriteString(o.VenueID)
	w.WriteCmd(o.ReplyMarkup.Cmd())
	o.ReplyMarkup.WriteBareTo(w)
}

func (o *TLBotInlineMessageMediaVenue) String() string {
	return tl.Pretty(o)
}

// TLBotInlineMessageMediaContact represents ctor botInlineMessageMediaContact#35edb4d4 flags:# phone_number:string first_name:string last_name:string flags.2?reply_markup:ReplyMarkup = BotInlineMessage from Telegram
type TLBotInlineMessageMediaContact struct {
	Flags       uint              // flags:#
	PhoneNumber string            // phone_number:string
	FirstName   string            // first_name:string
	LastName    string            // last_name:string
	ReplyMarkup TLReplyMarkupType // flags.2?reply_markup:ReplyMarkup
}

func (o *TLBotInlineMessageMediaContact) IsTLBotInlineMessage() {}

func (o *TLBotInlineMessageMediaContact) Cmd() uint32 {
	return TagBotInlineMessageMediaContact
}

func (o *TLBotInlineMessageMediaContact) ReadBareFrom(r *tl.Reader) {
	o.Flags = uint(r.ReadUint32())
	o.PhoneNumber = r.ReadString()
	o.FirstName = r.ReadString()
	o.LastName = r.ReadString()
	o.ReplyMarkup = Schema.ReadLimitedBoxedObjectFrom(r, TagReplyKeyboardHide, TagReplyKeyboardForceReply, TagReplyKeyboardMarkup, TagReplyInlineMarkup).(TLReplyMarkupType)
}

func (o *TLBotInlineMessageMediaContact) WriteBareTo(w *tl.Writer) {
	w.WriteUint32(uint32(o.Flags))
	w.WriteString(o.PhoneNumber)
	w.WriteString(o.FirstName)
	w.WriteString(o.LastName)
	w.WriteCmd(o.ReplyMarkup.Cmd())
	o.ReplyMarkup.WriteBareTo(w)
}

func (o *TLBotInlineMessageMediaContact) String() string {
	return tl.Pretty(o)
}

// TLBotInlineResult represents ctor botInlineResult#9bebaeb9 flags:# id:string type:string flags.1?title:string flags.2?description:string flags.3?url:string flags.4?thumb_url:string flags.5?content_url:string flags.5?content_type:string flags.6?w:int flags.6?h:int flags.7?duration:int send_message:BotInlineMessage = BotInlineResult from Telegram
type TLBotInlineResult struct {
	Flags       uint                   // flags:#
	ID          string                 // id:string
	Type        string                 // type:string
	Title       string                 // flags.1?title:string
	Description string                 // flags.2?description:string
	Url         string                 // flags.3?url:string
	ThumbUrl    string                 // flags.4?thumb_url:string
	ContentUrl  string                 // flags.5?content_url:string
	ContentType string                 // flags.5?content_type:string
	W           int                    // flags.6?w:int
	H           int                    // flags.6?h:int
	Duration    int                    // flags.7?duration:int
	SendMessage TLBotInlineMessageType // send_message:BotInlineMessage
}

func (o *TLBotInlineResult) IsTLBotInlineResult() {}

func (o *TLBotInlineResult) Cmd() uint32 {
	return TagBotInlineResult
}

func (o *TLBotInlineResult) ReadBareFrom(r *tl.Reader) {
	o.Flags = uint(r.ReadUint32())
	o.ID = r.ReadString()
	o.Type = r.ReadString()
	o.Title = r.ReadString()
	o.Description = r.ReadString()
	o.Url = r.ReadString()
	o.ThumbUrl = r.ReadString()
	o.ContentUrl = r.ReadString()
	o.ContentType = r.ReadString()
	o.W = r.ReadInt()
	o.H = r.ReadInt()
	o.Duration = r.ReadInt()
	o.SendMessage = Schema.ReadLimitedBoxedObjectFrom(r, TagBotInlineMessageMediaAuto, TagBotInlineMessageText, TagBotInlineMessageMediaGeo, TagBotInlineMessageMediaVenue, TagBotInlineMessageMediaContact).(TLBotInlineMessageType)
}

func (o *TLBotInlineResult) WriteBareTo(w *tl.Writer) {
	w.WriteUint32(uint32(o.Flags))
	w.WriteString(o.ID)
	w.WriteString(o.Type)
	w.WriteString(o.Title)
	w.WriteString(o.Description)
	w.WriteString(o.Url)
	w.WriteString(o.ThumbUrl)
	w.WriteString(o.ContentUrl)
	w.WriteString(o.ContentType)
	w.WriteInt(o.W)
	w.WriteInt(o.H)
	w.WriteInt(o.Duration)
	w.WriteCmd(o.SendMessage.Cmd())
	o.SendMessage.WriteBareTo(w)
}

func (o *TLBotInlineResult) String() string {
	return tl.Pretty(o)
}

// TLBotInlineMediaResult represents ctor botInlineMediaResult#17db940b flags:# id:string type:string flags.0?photo:Photo flags.1?document:Document flags.2?title:string flags.3?description:string send_message:BotInlineMessage = BotInlineResult from Telegram
type TLBotInlineMediaResult struct {
	Flags       uint                   // flags:#
	ID          string                 // id:string
	Type        string                 // type:string
	Photo       TLPhotoType            // flags.0?photo:Photo
	Document    TLDocumentType         // flags.1?document:Document
	Title       string                 // flags.2?title:string
	Description string                 // flags.3?description:string
	SendMessage TLBotInlineMessageType // send_message:BotInlineMessage
}

func (o *TLBotInlineMediaResult) IsTLBotInlineResult() {}

func (o *TLBotInlineMediaResult) Cmd() uint32 {
	return TagBotInlineMediaResult
}

func (o *TLBotInlineMediaResult) ReadBareFrom(r *tl.Reader) {
	o.Flags = uint(r.ReadUint32())
	o.ID = r.ReadString()
	o.Type = r.ReadString()
	o.Photo = Schema.ReadLimitedBoxedObjectFrom(r, TagPhotoEmpty, TagPhoto).(TLPhotoType)
	o.Document = Schema.ReadLimitedBoxedObjectFrom(r, TagDocumentEmpty, TagDocument).(TLDocumentType)
	o.Title = r.ReadString()
	o.Description = r.ReadString()
	o.SendMessage = Schema.ReadLimitedBoxedObjectFrom(r, TagBotInlineMessageMediaAuto, TagBotInlineMessageText, TagBotInlineMessageMediaGeo, TagBotInlineMessageMediaVenue, TagBotInlineMessageMediaContact).(TLBotInlineMessageType)
}

func (o *TLBotInlineMediaResult) WriteBareTo(w *tl.Writer) {
	w.WriteUint32(uint32(o.Flags))
	w.WriteString(o.ID)
	w.WriteString(o.Type)
	w.WriteCmd(o.Photo.Cmd())
	o.Photo.WriteBareTo(w)
	w.WriteCmd(o.Document.Cmd())
	o.Document.WriteBareTo(w)
	w.WriteString(o.Title)
	w.WriteString(o.Description)
	w.WriteCmd(o.SendMessage.Cmd())
	o.SendMessage.WriteBareTo(w)
}

func (o *TLBotInlineMediaResult) String() string {
	return tl.Pretty(o)
}

// TLTopPeerCategoryBotsPM represents ctor topPeerCategoryBotsPM#ab661b5b = TopPeerCategory from Telegram
type TLTopPeerCategoryBotsPM struct {
}

func (o *TLTopPeerCategoryBotsPM) IsTLTopPeerCategory() {}

func (o *TLTopPeerCategoryBotsPM) Cmd() uint32 {
	return TagTopPeerCategoryBotsPM
}

func (o *TLTopPeerCategoryBotsPM) ReadBareFrom(r *tl.Reader) {
}

func (o *TLTopPeerCategoryBotsPM) WriteBareTo(w *tl.Writer) {
}

func (o *TLTopPeerCategoryBotsPM) String() string {
	return tl.Pretty(o)
}

// TLTopPeerCategoryBotsInline represents ctor topPeerCategoryBotsInline#148677e2 = TopPeerCategory from Telegram
type TLTopPeerCategoryBotsInline struct {
}

func (o *TLTopPeerCategoryBotsInline) IsTLTopPeerCategory() {}

func (o *TLTopPeerCategoryBotsInline) Cmd() uint32 {
	return TagTopPeerCategoryBotsInline
}

func (o *TLTopPeerCategoryBotsInline) ReadBareFrom(r *tl.Reader) {
}

func (o *TLTopPeerCategoryBotsInline) WriteBareTo(w *tl.Writer) {
}

func (o *TLTopPeerCategoryBotsInline) String() string {
	return tl.Pretty(o)
}

// TLTopPeerCategoryCorrespondents represents ctor topPeerCategoryCorrespondents#0637b7ed = TopPeerCategory from Telegram
type TLTopPeerCategoryCorrespondents struct {
}

func (o *TLTopPeerCategoryCorrespondents) IsTLTopPeerCategory() {}

func (o *TLTopPeerCategoryCorrespondents) Cmd() uint32 {
	return TagTopPeerCategoryCorrespondents
}

func (o *TLTopPeerCategoryCorrespondents) ReadBareFrom(r *tl.Reader) {
}

func (o *TLTopPeerCategoryCorrespondents) WriteBareTo(w *tl.Writer) {
}

func (o *TLTopPeerCategoryCorrespondents) String() string {
	return tl.Pretty(o)
}

// TLTopPeerCategoryGroups represents ctor topPeerCategoryGroups#bd17a14a = TopPeerCategory from Telegram
type TLTopPeerCategoryGroups struct {
}

func (o *TLTopPeerCategoryGroups) IsTLTopPeerCategory() {}

func (o *TLTopPeerCategoryGroups) Cmd() uint32 {
	return TagTopPeerCategoryGroups
}

func (o *TLTopPeerCategoryGroups) ReadBareFrom(r *tl.Reader) {
}

func (o *TLTopPeerCategoryGroups) WriteBareTo(w *tl.Writer) {
}

func (o *TLTopPeerCategoryGroups) String() string {
	return tl.Pretty(o)
}

// TLTopPeerCategoryChannels represents ctor topPeerCategoryChannels#161d9628 = TopPeerCategory from Telegram
type TLTopPeerCategoryChannels struct {
}

func (o *TLTopPeerCategoryChannels) IsTLTopPeerCategory() {}

func (o *TLTopPeerCategoryChannels) Cmd() uint32 {
	return TagTopPeerCategoryChannels
}

func (o *TLTopPeerCategoryChannels) ReadBareFrom(r *tl.Reader) {
}

func (o *TLTopPeerCategoryChannels) WriteBareTo(w *tl.Writer) {
}

func (o *TLTopPeerCategoryChannels) String() string {
	return tl.Pretty(o)
}

// TLContactsTopPeersNotModified represents ctor contacts.topPeersNotModified#de266ef5 = contacts.TopPeers from Telegram
type TLContactsTopPeersNotModified struct {
}

func (o *TLContactsTopPeersNotModified) IsTLContactsTopPeers() {}

func (o *TLContactsTopPeersNotModified) Cmd() uint32 {
	return TagContactsTopPeersNotModified
}

func (o *TLContactsTopPeersNotModified) ReadBareFrom(r *tl.Reader) {
}

func (o *TLContactsTopPeersNotModified) WriteBareTo(w *tl.Writer) {
}

func (o *TLContactsTopPeersNotModified) String() string {
	return tl.Pretty(o)
}

// TLContactsTopPeers represents ctor contacts.topPeers#70b772a8 categories:Vector<TopPeerCategoryPeers> chats:Vector<Chat> users:Vector<User> = contacts.TopPeers from Telegram
type TLContactsTopPeers struct {
	Categories []*TLTopPeerCategoryPeers // categories:Vector<TopPeerCategoryPeers>
	Chats      []TLChatType              // chats:Vector<Chat>
	Users      []TLUserType              // users:Vector<User>
}

func (o *TLContactsTopPeers) IsTLContactsTopPeers() {}

func (o *TLContactsTopPeers) Cmd() uint32 {
	return TagContactsTopPeers
}

func (o *TLContactsTopPeers) ReadBareFrom(r *tl.Reader) {
	if cmd := r.ReadCmd(); cmd != TagVector {
		r.Fail(errors.New("expected: vector"))
	}
	o.Categories = make([]*TLTopPeerCategoryPeers, r.ReadInt())
	for i := 0; i < len(o.Categories); i++ {
		if cmd := r.ReadCmd(); cmd != TagTopPeerCategoryPeers {
			r.Fail(errors.New("expected: topPeerCategoryPeers"))
		}
		o.Categories[i] = new(TLTopPeerCategoryPeers)
		o.Categories[i].ReadBareFrom(r)
	}
	if cmd := r.ReadCmd(); cmd != TagVector {
		r.Fail(errors.New("expected: vector"))
	}
	o.Chats = make([]TLChatType, r.ReadInt())
	for i := 0; i < len(o.Chats); i++ {
		o.Chats[i] = Schema.ReadLimitedBoxedObjectFrom(r, TagChatEmpty, TagChat, TagChatForbidden, TagChannel, TagChannelForbidden).(TLChatType)
	}
	if cmd := r.ReadCmd(); cmd != TagVector {
		r.Fail(errors.New("expected: vector"))
	}
	o.Users = make([]TLUserType, r.ReadInt())
	for i := 0; i < len(o.Users); i++ {
		o.Users[i] = Schema.ReadLimitedBoxedObjectFrom(r, TagUserEmpty, TagUser).(TLUserType)
	}
}

func (o *TLContactsTopPeers) WriteBareTo(w *tl.Writer) {
	w.WriteCmd(TagVector)
	w.WriteInt(len(o.Categories))
	for i := 0; i < len(o.Categories); i++ {
		w.WriteCmd(TagTopPeerCategoryPeers)
		o.Categories[i].WriteBareTo(w)
	}
	w.WriteCmd(TagVector)
	w.WriteInt(len(o.Chats))
	for i := 0; i < len(o.Chats); i++ {
		w.WriteCmd(o.Chats[i].Cmd())
		o.Chats[i].WriteBareTo(w)
	}
	w.WriteCmd(TagVector)
	w.WriteInt(len(o.Users))
	for i := 0; i < len(o.Users); i++ {
		w.WriteCmd(o.Users[i].Cmd())
		o.Users[i].WriteBareTo(w)
	}
}

func (o *TLContactsTopPeers) String() string {
	return tl.Pretty(o)
}

// TLMessagesFeaturedStickersNotModified represents ctor messages.featuredStickersNotModified#04ede3cf = messages.FeaturedStickers from Telegram
type TLMessagesFeaturedStickersNotModified struct {
}

func (o *TLMessagesFeaturedStickersNotModified) IsTLMessagesFeaturedStickers() {}

func (o *TLMessagesFeaturedStickersNotModified) Cmd() uint32 {
	return TagMessagesFeaturedStickersNotModified
}

func (o *TLMessagesFeaturedStickersNotModified) ReadBareFrom(r *tl.Reader) {
}

func (o *TLMessagesFeaturedStickersNotModified) WriteBareTo(w *tl.Writer) {
}

func (o *TLMessagesFeaturedStickersNotModified) String() string {
	return tl.Pretty(o)
}

// TLMessagesFeaturedStickers represents ctor messages.featuredStickers#f89d88e5 hash:int sets:Vector<StickerSetCovered> unread:Vector<long> = messages.FeaturedStickers from Telegram
type TLMessagesFeaturedStickers struct {
	Hash   int                       // hash:int
	Sets   []TLStickerSetCoveredType // sets:Vector<StickerSetCovered>
	Unread []uint64                  // unread:Vector<long>
}

func (o *TLMessagesFeaturedStickers) IsTLMessagesFeaturedStickers() {}

func (o *TLMessagesFeaturedStickers) Cmd() uint32 {
	return TagMessagesFeaturedStickers
}

func (o *TLMessagesFeaturedStickers) ReadBareFrom(r *tl.Reader) {
	o.Hash = r.ReadInt()
	if cmd := r.ReadCmd(); cmd != TagVector {
		r.Fail(errors.New("expected: vector"))
	}
	o.Sets = make([]TLStickerSetCoveredType, r.ReadInt())
	for i := 0; i < len(o.Sets); i++ {
		o.Sets[i] = Schema.ReadLimitedBoxedObjectFrom(r, TagStickerSetCovered, TagStickerSetMultiCovered).(TLStickerSetCoveredType)
	}
	if cmd := r.ReadCmd(); cmd != TagVector {
		r.Fail(errors.New("expected: vector"))
	}
	o.Unread = make([]uint64, r.ReadInt())
	for i := 0; i < len(o.Unread); i++ {
		o.Unread[i] = r.ReadUint64()
	}
}

func (o *TLMessagesFeaturedStickers) WriteBareTo(w *tl.Writer) {
	w.WriteInt(o.Hash)
	w.WriteCmd(TagVector)
	w.WriteInt(len(o.Sets))
	for i := 0; i < len(o.Sets); i++ {
		w.WriteCmd(o.Sets[i].Cmd())
		o.Sets[i].WriteBareTo(w)
	}
	w.WriteCmd(TagVector)
	w.WriteInt(len(o.Unread))
	for i := 0; i < len(o.Unread); i++ {
		w.WriteUint64(o.Unread[i])
	}
}

func (o *TLMessagesFeaturedStickers) String() string {
	return tl.Pretty(o)
}

// TLMessagesRecentStickersNotModified represents ctor messages.recentStickersNotModified#0b17f890 = messages.RecentStickers from Telegram
type TLMessagesRecentStickersNotModified struct {
}

func (o *TLMessagesRecentStickersNotModified) IsTLMessagesRecentStickers() {}

func (o *TLMessagesRecentStickersNotModified) Cmd() uint32 {
	return TagMessagesRecentStickersNotModified
}

func (o *TLMessagesRecentStickersNotModified) ReadBareFrom(r *tl.Reader) {
}

func (o *TLMessagesRecentStickersNotModified) WriteBareTo(w *tl.Writer) {
}

func (o *TLMessagesRecentStickersNotModified) String() string {
	return tl.Pretty(o)
}

// TLMessagesRecentStickers represents ctor messages.recentStickers#5ce20970 hash:int stickers:Vector<Document> = messages.RecentStickers from Telegram
type TLMessagesRecentStickers struct {
	Hash     int              // hash:int
	Stickers []TLDocumentType // stickers:Vector<Document>
}

func (o *TLMessagesRecentStickers) IsTLMessagesRecentStickers() {}

func (o *TLMessagesRecentStickers) Cmd() uint32 {
	return TagMessagesRecentStickers
}

func (o *TLMessagesRecentStickers) ReadBareFrom(r *tl.Reader) {
	o.Hash = r.ReadInt()
	if cmd := r.ReadCmd(); cmd != TagVector {
		r.Fail(errors.New("expected: vector"))
	}
	o.Stickers = make([]TLDocumentType, r.ReadInt())
	for i := 0; i < len(o.Stickers); i++ {
		o.Stickers[i] = Schema.ReadLimitedBoxedObjectFrom(r, TagDocumentEmpty, TagDocument).(TLDocumentType)
	}
}

func (o *TLMessagesRecentStickers) WriteBareTo(w *tl.Writer) {
	w.WriteInt(o.Hash)
	w.WriteCmd(TagVector)
	w.WriteInt(len(o.Stickers))
	for i := 0; i < len(o.Stickers); i++ {
		w.WriteCmd(o.Stickers[i].Cmd())
		o.Stickers[i].WriteBareTo(w)
	}
}

func (o *TLMessagesRecentStickers) String() string {
	return tl.Pretty(o)
}

// TLMessagesStickerSetInstallResultSuccess represents ctor messages.stickerSetInstallResultSuccess#38641628 = messages.StickerSetInstallResult from Telegram
type TLMessagesStickerSetInstallResultSuccess struct {
}

func (o *TLMessagesStickerSetInstallResultSuccess) IsTLMessagesStickerSetInstallResult() {}

func (o *TLMessagesStickerSetInstallResultSuccess) Cmd() uint32 {
	return TagMessagesStickerSetInstallResultSuccess
}

func (o *TLMessagesStickerSetInstallResultSuccess) ReadBareFrom(r *tl.Reader) {
}

func (o *TLMessagesStickerSetInstallResultSuccess) WriteBareTo(w *tl.Writer) {
}

func (o *TLMessagesStickerSetInstallResultSuccess) String() string {
	return tl.Pretty(o)
}

// TLMessagesStickerSetInstallResultArchive represents ctor messages.stickerSetInstallResultArchive#35e410a8 sets:Vector<StickerSetCovered> = messages.StickerSetInstallResult from Telegram
type TLMessagesStickerSetInstallResultArchive struct {
	Sets []TLStickerSetCoveredType // sets:Vector<StickerSetCovered>
}

func (o *TLMessagesStickerSetInstallResultArchive) IsTLMessagesStickerSetInstallResult() {}

func (o *TLMessagesStickerSetInstallResultArchive) Cmd() uint32 {
	return TagMessagesStickerSetInstallResultArchive
}

func (o *TLMessagesStickerSetInstallResultArchive) ReadBareFrom(r *tl.Reader) {
	if cmd := r.ReadCmd(); cmd != TagVector {
		r.Fail(errors.New("expected: vector"))
	}
	o.Sets = make([]TLStickerSetCoveredType, r.ReadInt())
	for i := 0; i < len(o.Sets); i++ {
		o.Sets[i] = Schema.ReadLimitedBoxedObjectFrom(r, TagStickerSetCovered, TagStickerSetMultiCovered).(TLStickerSetCoveredType)
	}
}

func (o *TLMessagesStickerSetInstallResultArchive) WriteBareTo(w *tl.Writer) {
	w.WriteCmd(TagVector)
	w.WriteInt(len(o.Sets))
	for i := 0; i < len(o.Sets); i++ {
		w.WriteCmd(o.Sets[i].Cmd())
		o.Sets[i].WriteBareTo(w)
	}
}

func (o *TLMessagesStickerSetInstallResultArchive) String() string {
	return tl.Pretty(o)
}

// TLStickerSetCovered represents ctor stickerSetCovered#6410a5d2 set:StickerSet cover:Document = StickerSetCovered from Telegram
type TLStickerSetCovered struct {
	Set   *TLStickerSet  // set:StickerSet
	Cover TLDocumentType // cover:Document
}

func (o *TLStickerSetCovered) IsTLStickerSetCovered() {}

func (o *TLStickerSetCovered) Cmd() uint32 {
	return TagStickerSetCovered
}

func (o *TLStickerSetCovered) ReadBareFrom(r *tl.Reader) {
	if cmd := r.ReadCmd(); cmd != TagStickerSet {
		r.Fail(errors.New("expected: stickerSet"))
	}
	o.Set = new(TLStickerSet)
	o.Set.ReadBareFrom(r)
	o.Cover = Schema.ReadLimitedBoxedObjectFrom(r, TagDocumentEmpty, TagDocument).(TLDocumentType)
}

func (o *TLStickerSetCovered) WriteBareTo(w *tl.Writer) {
	w.WriteCmd(TagStickerSet)
	o.Set.WriteBareTo(w)
	w.WriteCmd(o.Cover.Cmd())
	o.Cover.WriteBareTo(w)
}

func (o *TLStickerSetCovered) String() string {
	return tl.Pretty(o)
}

// TLStickerSetMultiCovered represents ctor stickerSetMultiCovered#3407e51b set:StickerSet covers:Vector<Document> = StickerSetCovered from Telegram
type TLStickerSetMultiCovered struct {
	Set    *TLStickerSet    // set:StickerSet
	Covers []TLDocumentType // covers:Vector<Document>
}

func (o *TLStickerSetMultiCovered) IsTLStickerSetCovered() {}

func (o *TLStickerSetMultiCovered) Cmd() uint32 {
	return TagStickerSetMultiCovered
}

func (o *TLStickerSetMultiCovered) ReadBareFrom(r *tl.Reader) {
	if cmd := r.ReadCmd(); cmd != TagStickerSet {
		r.Fail(errors.New("expected: stickerSet"))
	}
	o.Set = new(TLStickerSet)
	o.Set.ReadBareFrom(r)
	if cmd := r.ReadCmd(); cmd != TagVector {
		r.Fail(errors.New("expected: vector"))
	}
	o.Covers = make([]TLDocumentType, r.ReadInt())
	for i := 0; i < len(o.Covers); i++ {
		o.Covers[i] = Schema.ReadLimitedBoxedObjectFrom(r, TagDocumentEmpty, TagDocument).(TLDocumentType)
	}
}

func (o *TLStickerSetMultiCovered) WriteBareTo(w *tl.Writer) {
	w.WriteCmd(TagStickerSet)
	o.Set.WriteBareTo(w)
	w.WriteCmd(TagVector)
	w.WriteInt(len(o.Covers))
	for i := 0; i < len(o.Covers); i++ {
		w.WriteCmd(o.Covers[i].Cmd())
		o.Covers[i].WriteBareTo(w)
	}
}

func (o *TLStickerSetMultiCovered) String() string {
	return tl.Pretty(o)
}

// TLInputStickeredMediaPhoto represents ctor inputStickeredMediaPhoto#4a992157 id:InputPhoto = InputStickeredMedia from Telegram
type TLInputStickeredMediaPhoto struct {
	ID TLInputPhotoType // id:InputPhoto
}

func (o *TLInputStickeredMediaPhoto) IsTLInputStickeredMedia() {}

func (o *TLInputStickeredMediaPhoto) Cmd() uint32 {
	return TagInputStickeredMediaPhoto
}

func (o *TLInputStickeredMediaPhoto) ReadBareFrom(r *tl.Reader) {
	o.ID = Schema.ReadLimitedBoxedObjectFrom(r, TagInputPhotoEmpty, TagInputPhoto).(TLInputPhotoType)
}

func (o *TLInputStickeredMediaPhoto) WriteBareTo(w *tl.Writer) {
	w.WriteCmd(o.ID.Cmd())
	o.ID.WriteBareTo(w)
}

func (o *TLInputStickeredMediaPhoto) String() string {
	return tl.Pretty(o)
}

// TLInputStickeredMediaDocument represents ctor inputStickeredMediaDocument#0438865b id:InputDocument = InputStickeredMedia from Telegram
type TLInputStickeredMediaDocument struct {
	ID TLInputDocumentType // id:InputDocument
}

func (o *TLInputStickeredMediaDocument) IsTLInputStickeredMedia() {}

func (o *TLInputStickeredMediaDocument) Cmd() uint32 {
	return TagInputStickeredMediaDocument
}

func (o *TLInputStickeredMediaDocument) ReadBareFrom(r *tl.Reader) {
	o.ID = Schema.ReadLimitedBoxedObjectFrom(r, TagInputDocumentEmpty, TagInputDocument).(TLInputDocumentType)
}

func (o *TLInputStickeredMediaDocument) WriteBareTo(w *tl.Writer) {
	w.WriteCmd(o.ID.Cmd())
	o.ID.WriteBareTo(w)
}

func (o *TLInputStickeredMediaDocument) String() string {
	return tl.Pretty(o)
}

// TLInputGameID represents ctor inputGameID#032c3e77 id:long access_hash:long = InputGame from Telegram
type TLInputGameID struct {
	ID         uint64 // id:long
	AccessHash uint64 // access_hash:long
}

func (o *TLInputGameID) IsTLInputGame() {}

func (o *TLInputGameID) Cmd() uint32 {
	return TagInputGameID
}

func (o *TLInputGameID) ReadBareFrom(r *tl.Reader) {
	o.ID = r.ReadUint64()
	o.AccessHash = r.ReadUint64()
}

func (o *TLInputGameID) WriteBareTo(w *tl.Writer) {
	w.WriteUint64(o.ID)
	w.WriteUint64(o.AccessHash)
}

func (o *TLInputGameID) String() string {
	return tl.Pretty(o)
}

// TLInputGameShortName represents ctor inputGameShortName#c331e80a bot_id:InputUser short_name:string = InputGame from Telegram
type TLInputGameShortName struct {
	BotID     TLInputUserType // bot_id:InputUser
	ShortName string          // short_name:string
}

func (o *TLInputGameShortName) IsTLInputGame() {}

func (o *TLInputGameShortName) Cmd() uint32 {
	return TagInputGameShortName
}

func (o *TLInputGameShortName) ReadBareFrom(r *tl.Reader) {
	o.BotID = Schema.ReadLimitedBoxedObjectFrom(r, TagInputUserEmpty, TagInputUserSelf, TagInputUser).(TLInputUserType)
	o.ShortName = r.ReadString()
}

func (o *TLInputGameShortName) WriteBareTo(w *tl.Writer) {
	w.WriteCmd(o.BotID.Cmd())
	o.BotID.WriteBareTo(w)
	w.WriteString(o.ShortName)
}

func (o *TLInputGameShortName) String() string {
	return tl.Pretty(o)
}

// TLTextEmpty represents ctor textEmpty#dc3d824f = RichText from Telegram
type TLTextEmpty struct {
}

func (o *TLTextEmpty) IsTLRichText() {}

func (o *TLTextEmpty) Cmd() uint32 {
	return TagTextEmpty
}

func (o *TLTextEmpty) ReadBareFrom(r *tl.Reader) {
}

func (o *TLTextEmpty) WriteBareTo(w *tl.Writer) {
}

func (o *TLTextEmpty) String() string {
	return tl.Pretty(o)
}

// TLTextPlain represents ctor textPlain#744694e0 text:string = RichText from Telegram
type TLTextPlain struct {
	Text string // text:string
}

func (o *TLTextPlain) IsTLRichText() {}

func (o *TLTextPlain) Cmd() uint32 {
	return TagTextPlain
}

func (o *TLTextPlain) ReadBareFrom(r *tl.Reader) {
	o.Text = r.ReadString()
}

func (o *TLTextPlain) WriteBareTo(w *tl.Writer) {
	w.WriteString(o.Text)
}

func (o *TLTextPlain) String() string {
	return tl.Pretty(o)
}

// TLTextBold represents ctor textBold#6724abc4 text:RichText = RichText from Telegram
type TLTextBold struct {
	Text TLRichTextType // text:RichText
}

func (o *TLTextBold) IsTLRichText() {}

func (o *TLTextBold) Cmd() uint32 {
	return TagTextBold
}

func (o *TLTextBold) ReadBareFrom(r *tl.Reader) {
	o.Text = Schema.ReadLimitedBoxedObjectFrom(r, TagTextEmpty, TagTextPlain, TagTextBold, TagTextItalic, TagTextUnderline, TagTextStrike, TagTextFixed, TagTextUrl, TagTextEmail, TagTextConcat).(TLRichTextType)
}

func (o *TLTextBold) WriteBareTo(w *tl.Writer) {
	w.WriteCmd(o.Text.Cmd())
	o.Text.WriteBareTo(w)
}

func (o *TLTextBold) String() string {
	return tl.Pretty(o)
}

// TLTextItalic represents ctor textItalic#d912a59c text:RichText = RichText from Telegram
type TLTextItalic struct {
	Text TLRichTextType // text:RichText
}

func (o *TLTextItalic) IsTLRichText() {}

func (o *TLTextItalic) Cmd() uint32 {
	return TagTextItalic
}

func (o *TLTextItalic) ReadBareFrom(r *tl.Reader) {
	o.Text = Schema.ReadLimitedBoxedObjectFrom(r, TagTextEmpty, TagTextPlain, TagTextBold, TagTextItalic, TagTextUnderline, TagTextStrike, TagTextFixed, TagTextUrl, TagTextEmail, TagTextConcat).(TLRichTextType)
}

func (o *TLTextItalic) WriteBareTo(w *tl.Writer) {
	w.WriteCmd(o.Text.Cmd())
	o.Text.WriteBareTo(w)
}

func (o *TLTextItalic) String() string {
	return tl.Pretty(o)
}

// TLTextUnderline represents ctor textUnderline#c12622c4 text:RichText = RichText from Telegram
type TLTextUnderline struct {
	Text TLRichTextType // text:RichText
}

func (o *TLTextUnderline) IsTLRichText() {}

func (o *TLTextUnderline) Cmd() uint32 {
	return TagTextUnderline
}

func (o *TLTextUnderline) ReadBareFrom(r *tl.Reader) {
	o.Text = Schema.ReadLimitedBoxedObjectFrom(r, TagTextEmpty, TagTextPlain, TagTextBold, TagTextItalic, TagTextUnderline, TagTextStrike, TagTextFixed, TagTextUrl, TagTextEmail, TagTextConcat).(TLRichTextType)
}

func (o *TLTextUnderline) WriteBareTo(w *tl.Writer) {
	w.WriteCmd(o.Text.Cmd())
	o.Text.WriteBareTo(w)
}

func (o *TLTextUnderline) String() string {
	return tl.Pretty(o)
}

// TLTextStrike represents ctor textStrike#9bf8bb95 text:RichText = RichText from Telegram
type TLTextStrike struct {
	Text TLRichTextType // text:RichText
}

func (o *TLTextStrike) IsTLRichText() {}

func (o *TLTextStrike) Cmd() uint32 {
	return TagTextStrike
}

func (o *TLTextStrike) ReadBareFrom(r *tl.Reader) {
	o.Text = Schema.ReadLimitedBoxedObjectFrom(r, TagTextEmpty, TagTextPlain, TagTextBold, TagTextItalic, TagTextUnderline, TagTextStrike, TagTextFixed, TagTextUrl, TagTextEmail, TagTextConcat).(TLRichTextType)
}

func (o *TLTextStrike) WriteBareTo(w *tl.Writer) {
	w.WriteCmd(o.Text.Cmd())
	o.Text.WriteBareTo(w)
}

func (o *TLTextStrike) String() string {
	return tl.Pretty(o)
}

// TLTextFixed represents ctor textFixed#6c3f19b9 text:RichText = RichText from Telegram
type TLTextFixed struct {
	Text TLRichTextType // text:RichText
}

func (o *TLTextFixed) IsTLRichText() {}

func (o *TLTextFixed) Cmd() uint32 {
	return TagTextFixed
}

func (o *TLTextFixed) ReadBareFrom(r *tl.Reader) {
	o.Text = Schema.ReadLimitedBoxedObjectFrom(r, TagTextEmpty, TagTextPlain, TagTextBold, TagTextItalic, TagTextUnderline, TagTextStrike, TagTextFixed, TagTextUrl, TagTextEmail, TagTextConcat).(TLRichTextType)
}

func (o *TLTextFixed) WriteBareTo(w *tl.Writer) {
	w.WriteCmd(o.Text.Cmd())
	o.Text.WriteBareTo(w)
}

func (o *TLTextFixed) String() string {
	return tl.Pretty(o)
}

// TLTextUrl represents ctor textUrl#3c2884c1 text:RichText url:string webpage_id:long = RichText from Telegram
type TLTextUrl struct {
	Text      TLRichTextType // text:RichText
	Url       string         // url:string
	WebpageID uint64         // webpage_id:long
}

func (o *TLTextUrl) IsTLRichText() {}

func (o *TLTextUrl) Cmd() uint32 {
	return TagTextUrl
}

func (o *TLTextUrl) ReadBareFrom(r *tl.Reader) {
	o.Text = Schema.ReadLimitedBoxedObjectFrom(r, TagTextEmpty, TagTextPlain, TagTextBold, TagTextItalic, TagTextUnderline, TagTextStrike, TagTextFixed, TagTextUrl, TagTextEmail, TagTextConcat).(TLRichTextType)
	o.Url = r.ReadString()
	o.WebpageID = r.ReadUint64()
}

func (o *TLTextUrl) WriteBareTo(w *tl.Writer) {
	w.WriteCmd(o.Text.Cmd())
	o.Text.WriteBareTo(w)
	w.WriteString(o.Url)
	w.WriteUint64(o.WebpageID)
}

func (o *TLTextUrl) String() string {
	return tl.Pretty(o)
}

// TLTextEmail represents ctor textEmail#de5a0dd6 text:RichText email:string = RichText from Telegram
type TLTextEmail struct {
	Text  TLRichTextType // text:RichText
	Email string         // email:string
}

func (o *TLTextEmail) IsTLRichText() {}

func (o *TLTextEmail) Cmd() uint32 {
	return TagTextEmail
}

func (o *TLTextEmail) ReadBareFrom(r *tl.Reader) {
	o.Text = Schema.ReadLimitedBoxedObjectFrom(r, TagTextEmpty, TagTextPlain, TagTextBold, TagTextItalic, TagTextUnderline, TagTextStrike, TagTextFixed, TagTextUrl, TagTextEmail, TagTextConcat).(TLRichTextType)
	o.Email = r.ReadString()
}

func (o *TLTextEmail) WriteBareTo(w *tl.Writer) {
	w.WriteCmd(o.Text.Cmd())
	o.Text.WriteBareTo(w)
	w.WriteString(o.Email)
}

func (o *TLTextEmail) String() string {
	return tl.Pretty(o)
}

// TLTextConcat represents ctor textConcat#7e6260d7 texts:Vector<RichText> = RichText from Telegram
type TLTextConcat struct {
	Texts []TLRichTextType // texts:Vector<RichText>
}

func (o *TLTextConcat) IsTLRichText() {}

func (o *TLTextConcat) Cmd() uint32 {
	return TagTextConcat
}

func (o *TLTextConcat) ReadBareFrom(r *tl.Reader) {
	if cmd := r.ReadCmd(); cmd != TagVector {
		r.Fail(errors.New("expected: vector"))
	}
	o.Texts = make([]TLRichTextType, r.ReadInt())
	for i := 0; i < len(o.Texts); i++ {
		o.Texts[i] = Schema.ReadLimitedBoxedObjectFrom(r, TagTextEmpty, TagTextPlain, TagTextBold, TagTextItalic, TagTextUnderline, TagTextStrike, TagTextFixed, TagTextUrl, TagTextEmail, TagTextConcat).(TLRichTextType)
	}
}

func (o *TLTextConcat) WriteBareTo(w *tl.Writer) {
	w.WriteCmd(TagVector)
	w.WriteInt(len(o.Texts))
	for i := 0; i < len(o.Texts); i++ {
		w.WriteCmd(o.Texts[i].Cmd())
		o.Texts[i].WriteBareTo(w)
	}
}

func (o *TLTextConcat) String() string {
	return tl.Pretty(o)
}

// TLPageBlockUnsupported represents ctor pageBlockUnsupported#13567e8a = PageBlock from Telegram
type TLPageBlockUnsupported struct {
}

func (o *TLPageBlockUnsupported) IsTLPageBlock() {}

func (o *TLPageBlockUnsupported) Cmd() uint32 {
	return TagPageBlockUnsupported
}

func (o *TLPageBlockUnsupported) ReadBareFrom(r *tl.Reader) {
}

func (o *TLPageBlockUnsupported) WriteBareTo(w *tl.Writer) {
}

func (o *TLPageBlockUnsupported) String() string {
	return tl.Pretty(o)
}

// TLPageBlockTitle represents ctor pageBlockTitle#70abc3fd text:RichText = PageBlock from Telegram
type TLPageBlockTitle struct {
	Text TLRichTextType // text:RichText
}

func (o *TLPageBlockTitle) IsTLPageBlock() {}

func (o *TLPageBlockTitle) Cmd() uint32 {
	return TagPageBlockTitle
}

func (o *TLPageBlockTitle) ReadBareFrom(r *tl.Reader) {
	o.Text = Schema.ReadLimitedBoxedObjectFrom(r, TagTextEmpty, TagTextPlain, TagTextBold, TagTextItalic, TagTextUnderline, TagTextStrike, TagTextFixed, TagTextUrl, TagTextEmail, TagTextConcat).(TLRichTextType)
}

func (o *TLPageBlockTitle) WriteBareTo(w *tl.Writer) {
	w.WriteCmd(o.Text.Cmd())
	o.Text.WriteBareTo(w)
}

func (o *TLPageBlockTitle) String() string {
	return tl.Pretty(o)
}

// TLPageBlockSubtitle represents ctor pageBlockSubtitle#8ffa9a1f text:RichText = PageBlock from Telegram
type TLPageBlockSubtitle struct {
	Text TLRichTextType // text:RichText
}

func (o *TLPageBlockSubtitle) IsTLPageBlock() {}

func (o *TLPageBlockSubtitle) Cmd() uint32 {
	return TagPageBlockSubtitle
}

func (o *TLPageBlockSubtitle) ReadBareFrom(r *tl.Reader) {
	o.Text = Schema.ReadLimitedBoxedObjectFrom(r, TagTextEmpty, TagTextPlain, TagTextBold, TagTextItalic, TagTextUnderline, TagTextStrike, TagTextFixed, TagTextUrl, TagTextEmail, TagTextConcat).(TLRichTextType)
}

func (o *TLPageBlockSubtitle) WriteBareTo(w *tl.Writer) {
	w.WriteCmd(o.Text.Cmd())
	o.Text.WriteBareTo(w)
}

func (o *TLPageBlockSubtitle) String() string {
	return tl.Pretty(o)
}

// TLPageBlockAuthorDate represents ctor pageBlockAuthorDate#baafe5e0 author:RichText published_date:int = PageBlock from Telegram
type TLPageBlockAuthorDate struct {
	Author        TLRichTextType // author:RichText
	PublishedDate int            // published_date:int
}

func (o *TLPageBlockAuthorDate) IsTLPageBlock() {}

func (o *TLPageBlockAuthorDate) Cmd() uint32 {
	return TagPageBlockAuthorDate
}

func (o *TLPageBlockAuthorDate) ReadBareFrom(r *tl.Reader) {
	o.Author = Schema.ReadLimitedBoxedObjectFrom(r, TagTextEmpty, TagTextPlain, TagTextBold, TagTextItalic, TagTextUnderline, TagTextStrike, TagTextFixed, TagTextUrl, TagTextEmail, TagTextConcat).(TLRichTextType)
	o.PublishedDate = r.ReadInt()
}

func (o *TLPageBlockAuthorDate) WriteBareTo(w *tl.Writer) {
	w.WriteCmd(o.Author.Cmd())
	o.Author.WriteBareTo(w)
	w.WriteInt(o.PublishedDate)
}

func (o *TLPageBlockAuthorDate) String() string {
	return tl.Pretty(o)
}

// TLPageBlockHeader represents ctor pageBlockHeader#bfd064ec text:RichText = PageBlock from Telegram
type TLPageBlockHeader struct {
	Text TLRichTextType // text:RichText
}

func (o *TLPageBlockHeader) IsTLPageBlock() {}

func (o *TLPageBlockHeader) Cmd() uint32 {
	return TagPageBlockHeader
}

func (o *TLPageBlockHeader) ReadBareFrom(r *tl.Reader) {
	o.Text = Schema.ReadLimitedBoxedObjectFrom(r, TagTextEmpty, TagTextPlain, TagTextBold, TagTextItalic, TagTextUnderline, TagTextStrike, TagTextFixed, TagTextUrl, TagTextEmail, TagTextConcat).(TLRichTextType)
}

func (o *TLPageBlockHeader) WriteBareTo(w *tl.Writer) {
	w.WriteCmd(o.Text.Cmd())
	o.Text.WriteBareTo(w)
}

func (o *TLPageBlockHeader) String() string {
	return tl.Pretty(o)
}

// TLPageBlockSubheader represents ctor pageBlockSubheader#f12bb6e1 text:RichText = PageBlock from Telegram
type TLPageBlockSubheader struct {
	Text TLRichTextType // text:RichText
}

func (o *TLPageBlockSubheader) IsTLPageBlock() {}

func (o *TLPageBlockSubheader) Cmd() uint32 {
	return TagPageBlockSubheader
}

func (o *TLPageBlockSubheader) ReadBareFrom(r *tl.Reader) {
	o.Text = Schema.ReadLimitedBoxedObjectFrom(r, TagTextEmpty, TagTextPlain, TagTextBold, TagTextItalic, TagTextUnderline, TagTextStrike, TagTextFixed, TagTextUrl, TagTextEmail, TagTextConcat).(TLRichTextType)
}

func (o *TLPageBlockSubheader) WriteBareTo(w *tl.Writer) {
	w.WriteCmd(o.Text.Cmd())
	o.Text.WriteBareTo(w)
}

func (o *TLPageBlockSubheader) String() string {
	return tl.Pretty(o)
}

// TLPageBlockParagraph represents ctor pageBlockParagraph#467a0766 text:RichText = PageBlock from Telegram
type TLPageBlockParagraph struct {
	Text TLRichTextType // text:RichText
}

func (o *TLPageBlockParagraph) IsTLPageBlock() {}

func (o *TLPageBlockParagraph) Cmd() uint32 {
	return TagPageBlockParagraph
}

func (o *TLPageBlockParagraph) ReadBareFrom(r *tl.Reader) {
	o.Text = Schema.ReadLimitedBoxedObjectFrom(r, TagTextEmpty, TagTextPlain, TagTextBold, TagTextItalic, TagTextUnderline, TagTextStrike, TagTextFixed, TagTextUrl, TagTextEmail, TagTextConcat).(TLRichTextType)
}

func (o *TLPageBlockParagraph) WriteBareTo(w *tl.Writer) {
	w.WriteCmd(o.Text.Cmd())
	o.Text.WriteBareTo(w)
}

func (o *TLPageBlockParagraph) String() string {
	return tl.Pretty(o)
}

// TLPageBlockPreformatted represents ctor pageBlockPreformatted#c070d93e text:RichText language:string = PageBlock from Telegram
type TLPageBlockPreformatted struct {
	Text     TLRichTextType // text:RichText
	Language string         // language:string
}

func (o *TLPageBlockPreformatted) IsTLPageBlock() {}

func (o *TLPageBlockPreformatted) Cmd() uint32 {
	return TagPageBlockPreformatted
}

func (o *TLPageBlockPreformatted) ReadBareFrom(r *tl.Reader) {
	o.Text = Schema.ReadLimitedBoxedObjectFrom(r, TagTextEmpty, TagTextPlain, TagTextBold, TagTextItalic, TagTextUnderline, TagTextStrike, TagTextFixed, TagTextUrl, TagTextEmail, TagTextConcat).(TLRichTextType)
	o.Language = r.ReadString()
}

func (o *TLPageBlockPreformatted) WriteBareTo(w *tl.Writer) {
	w.WriteCmd(o.Text.Cmd())
	o.Text.WriteBareTo(w)
	w.WriteString(o.Language)
}

func (o *TLPageBlockPreformatted) String() string {
	return tl.Pretty(o)
}

// TLPageBlockFooter represents ctor pageBlockFooter#48870999 text:RichText = PageBlock from Telegram
type TLPageBlockFooter struct {
	Text TLRichTextType // text:RichText
}

func (o *TLPageBlockFooter) IsTLPageBlock() {}

func (o *TLPageBlockFooter) Cmd() uint32 {
	return TagPageBlockFooter
}

func (o *TLPageBlockFooter) ReadBareFrom(r *tl.Reader) {
	o.Text = Schema.ReadLimitedBoxedObjectFrom(r, TagTextEmpty, TagTextPlain, TagTextBold, TagTextItalic, TagTextUnderline, TagTextStrike, TagTextFixed, TagTextUrl, TagTextEmail, TagTextConcat).(TLRichTextType)
}

func (o *TLPageBlockFooter) WriteBareTo(w *tl.Writer) {
	w.WriteCmd(o.Text.Cmd())
	o.Text.WriteBareTo(w)
}

func (o *TLPageBlockFooter) String() string {
	return tl.Pretty(o)
}

// TLPageBlockDivider represents ctor pageBlockDivider#db20b188 = PageBlock from Telegram
type TLPageBlockDivider struct {
}

func (o *TLPageBlockDivider) IsTLPageBlock() {}

func (o *TLPageBlockDivider) Cmd() uint32 {
	return TagPageBlockDivider
}

func (o *TLPageBlockDivider) ReadBareFrom(r *tl.Reader) {
}

func (o *TLPageBlockDivider) WriteBareTo(w *tl.Writer) {
}

func (o *TLPageBlockDivider) String() string {
	return tl.Pretty(o)
}

// TLPageBlockAnchor represents ctor pageBlockAnchor#ce0d37b0 name:string = PageBlock from Telegram
type TLPageBlockAnchor struct {
	Name string // name:string
}

func (o *TLPageBlockAnchor) IsTLPageBlock() {}

func (o *TLPageBlockAnchor) Cmd() uint32 {
	return TagPageBlockAnchor
}

func (o *TLPageBlockAnchor) ReadBareFrom(r *tl.Reader) {
	o.Name = r.ReadString()
}

func (o *TLPageBlockAnchor) WriteBareTo(w *tl.Writer) {
	w.WriteString(o.Name)
}

func (o *TLPageBlockAnchor) String() string {
	return tl.Pretty(o)
}

// TLPageBlockList represents ctor pageBlockList#3a58c7f4 ordered:Bool items:Vector<RichText> = PageBlock from Telegram
type TLPageBlockList struct {
	Ordered bool             // ordered:Bool
	Items   []TLRichTextType // items:Vector<RichText>
}

func (o *TLPageBlockList) IsTLPageBlock() {}

func (o *TLPageBlockList) Cmd() uint32 {
	return TagPageBlockList
}

func (o *TLPageBlockList) ReadBareFrom(r *tl.Reader) {
	r.ExpectCmd(TagBoolTrue, TagBoolFalse)
	o.Ordered = (r.ReadCmd() == TagBoolTrue)
	if cmd := r.ReadCmd(); cmd != TagVector {
		r.Fail(errors.New("expected: vector"))
	}
	o.Items = make([]TLRichTextType, r.ReadInt())
	for i := 0; i < len(o.Items); i++ {
		o.Items[i] = Schema.ReadLimitedBoxedObjectFrom(r, TagTextEmpty, TagTextPlain, TagTextBold, TagTextItalic, TagTextUnderline, TagTextStrike, TagTextFixed, TagTextUrl, TagTextEmail, TagTextConcat).(TLRichTextType)
	}
}

func (o *TLPageBlockList) WriteBareTo(w *tl.Writer) {
	if o.Ordered {
		w.WriteCmd(TagBoolTrue)
	} else {
		w.WriteCmd(TagBoolFalse)
	}
	w.WriteCmd(TagVector)
	w.WriteInt(len(o.Items))
	for i := 0; i < len(o.Items); i++ {
		w.WriteCmd(o.Items[i].Cmd())
		o.Items[i].WriteBareTo(w)
	}
}

func (o *TLPageBlockList) String() string {
	return tl.Pretty(o)
}

// TLPageBlockBlockquote represents ctor pageBlockBlockquote#263d7c26 text:RichText caption:RichText = PageBlock from Telegram
type TLPageBlockBlockquote struct {
	Text    TLRichTextType // text:RichText
	Caption TLRichTextType // caption:RichText
}

func (o *TLPageBlockBlockquote) IsTLPageBlock() {}

func (o *TLPageBlockBlockquote) Cmd() uint32 {
	return TagPageBlockBlockquote
}

func (o *TLPageBlockBlockquote) ReadBareFrom(r *tl.Reader) {
	o.Text = Schema.ReadLimitedBoxedObjectFrom(r, TagTextEmpty, TagTextPlain, TagTextBold, TagTextItalic, TagTextUnderline, TagTextStrike, TagTextFixed, TagTextUrl, TagTextEmail, TagTextConcat).(TLRichTextType)
	o.Caption = Schema.ReadLimitedBoxedObjectFrom(r, TagTextEmpty, TagTextPlain, TagTextBold, TagTextItalic, TagTextUnderline, TagTextStrike, TagTextFixed, TagTextUrl, TagTextEmail, TagTextConcat).(TLRichTextType)
}

func (o *TLPageBlockBlockquote) WriteBareTo(w *tl.Writer) {
	w.WriteCmd(o.Text.Cmd())
	o.Text.WriteBareTo(w)
	w.WriteCmd(o.Caption.Cmd())
	o.Caption.WriteBareTo(w)
}

func (o *TLPageBlockBlockquote) String() string {
	return tl.Pretty(o)
}

// TLPageBlockPullquote represents ctor pageBlockPullquote#4f4456d3 text:RichText caption:RichText = PageBlock from Telegram
type TLPageBlockPullquote struct {
	Text    TLRichTextType // text:RichText
	Caption TLRichTextType // caption:RichText
}

func (o *TLPageBlockPullquote) IsTLPageBlock() {}

func (o *TLPageBlockPullquote) Cmd() uint32 {
	return TagPageBlockPullquote
}

func (o *TLPageBlockPullquote) ReadBareFrom(r *tl.Reader) {
	o.Text = Schema.ReadLimitedBoxedObjectFrom(r, TagTextEmpty, TagTextPlain, TagTextBold, TagTextItalic, TagTextUnderline, TagTextStrike, TagTextFixed, TagTextUrl, TagTextEmail, TagTextConcat).(TLRichTextType)
	o.Caption = Schema.ReadLimitedBoxedObjectFrom(r, TagTextEmpty, TagTextPlain, TagTextBold, TagTextItalic, TagTextUnderline, TagTextStrike, TagTextFixed, TagTextUrl, TagTextEmail, TagTextConcat).(TLRichTextType)
}

func (o *TLPageBlockPullquote) WriteBareTo(w *tl.Writer) {
	w.WriteCmd(o.Text.Cmd())
	o.Text.WriteBareTo(w)
	w.WriteCmd(o.Caption.Cmd())
	o.Caption.WriteBareTo(w)
}

func (o *TLPageBlockPullquote) String() string {
	return tl.Pretty(o)
}

// TLPageBlockPhoto represents ctor pageBlockPhoto#e9c69982 photo_id:long caption:RichText = PageBlock from Telegram
type TLPageBlockPhoto struct {
	PhotoID uint64         // photo_id:long
	Caption TLRichTextType // caption:RichText
}

func (o *TLPageBlockPhoto) IsTLPageBlock() {}

func (o *TLPageBlockPhoto) Cmd() uint32 {
	return TagPageBlockPhoto
}

func (o *TLPageBlockPhoto) ReadBareFrom(r *tl.Reader) {
	o.PhotoID = r.ReadUint64()
	o.Caption = Schema.ReadLimitedBoxedObjectFrom(r, TagTextEmpty, TagTextPlain, TagTextBold, TagTextItalic, TagTextUnderline, TagTextStrike, TagTextFixed, TagTextUrl, TagTextEmail, TagTextConcat).(TLRichTextType)
}

func (o *TLPageBlockPhoto) WriteBareTo(w *tl.Writer) {
	w.WriteUint64(o.PhotoID)
	w.WriteCmd(o.Caption.Cmd())
	o.Caption.WriteBareTo(w)
}

func (o *TLPageBlockPhoto) String() string {
	return tl.Pretty(o)
}

// TLPageBlockVideo represents ctor pageBlockVideo#d9d71866 flags:# flags.0?autoplay:true flags.1?loop:true video_id:long caption:RichText = PageBlock from Telegram
type TLPageBlockVideo struct {
	Flags    uint           // flags:#
	Autoplay bool           // flags.0?autoplay:true
	Loop     bool           // flags.1?loop:true
	VideoID  uint64         // video_id:long
	Caption  TLRichTextType // caption:RichText
}

func (o *TLPageBlockVideo) IsTLPageBlock() {}

func (o *TLPageBlockVideo) Cmd() uint32 {
	return TagPageBlockVideo
}

func (o *TLPageBlockVideo) ReadBareFrom(r *tl.Reader) {
	o.Flags = uint(r.ReadUint32())
	o.Autoplay = true
	o.Loop = true
	o.VideoID = r.ReadUint64()
	o.Caption = Schema.ReadLimitedBoxedObjectFrom(r, TagTextEmpty, TagTextPlain, TagTextBold, TagTextItalic, TagTextUnderline, TagTextStrike, TagTextFixed, TagTextUrl, TagTextEmail, TagTextConcat).(TLRichTextType)
}

func (o *TLPageBlockVideo) WriteBareTo(w *tl.Writer) {
	w.WriteUint32(uint32(o.Flags))
	w.WriteUint64(o.VideoID)
	w.WriteCmd(o.Caption.Cmd())
	o.Caption.WriteBareTo(w)
}

func (o *TLPageBlockVideo) String() string {
	return tl.Pretty(o)
}

// TLPageBlockCover represents ctor pageBlockCover#39f23300 cover:PageBlock = PageBlock from Telegram
type TLPageBlockCover struct {
	Cover TLPageBlockType // cover:PageBlock
}

func (o *TLPageBlockCover) IsTLPageBlock() {}

func (o *TLPageBlockCover) Cmd() uint32 {
	return TagPageBlockCover
}

func (o *TLPageBlockCover) ReadBareFrom(r *tl.Reader) {
	o.Cover = Schema.ReadLimitedBoxedObjectFrom(r, TagPageBlockUnsupported, TagPageBlockTitle, TagPageBlockSubtitle, TagPageBlockAuthorDate, TagPageBlockHeader, TagPageBlockSubheader, TagPageBlockParagraph, TagPageBlockPreformatted, TagPageBlockFooter, TagPageBlockDivider, TagPageBlockAnchor, TagPageBlockList, TagPageBlockBlockquote, TagPageBlockPullquote, TagPageBlockPhoto, TagPageBlockVideo, TagPageBlockCover, TagPageBlockEmbed, TagPageBlockEmbedPost, TagPageBlockCollage, TagPageBlockSlideshow).(TLPageBlockType)
}

func (o *TLPageBlockCover) WriteBareTo(w *tl.Writer) {
	w.WriteCmd(o.Cover.Cmd())
	o.Cover.WriteBareTo(w)
}

func (o *TLPageBlockCover) String() string {
	return tl.Pretty(o)
}

// TLPageBlockEmbed represents ctor pageBlockEmbed#cde200d1 flags:# flags.0?full_width:true flags.3?allow_scrolling:true flags.1?url:string flags.2?html:string flags.4?poster_photo_id:long w:int h:int caption:RichText = PageBlock from Telegram
type TLPageBlockEmbed struct {
	Flags          uint           // flags:#
	FullWidth      bool           // flags.0?full_width:true
	AllowScrolling bool           // flags.3?allow_scrolling:true
	Url            string         // flags.1?url:string
	Html           string         // flags.2?html:string
	PosterPhotoID  uint64         // flags.4?poster_photo_id:long
	W              int            // w:int
	H              int            // h:int
	Caption        TLRichTextType // caption:RichText
}

func (o *TLPageBlockEmbed) IsTLPageBlock() {}

func (o *TLPageBlockEmbed) Cmd() uint32 {
	return TagPageBlockEmbed
}

func (o *TLPageBlockEmbed) ReadBareFrom(r *tl.Reader) {
	o.Flags = uint(r.ReadUint32())
	o.FullWidth = true
	o.AllowScrolling = true
	o.Url = r.ReadString()
	o.Html = r.ReadString()
	o.PosterPhotoID = r.ReadUint64()
	o.W = r.ReadInt()
	o.H = r.ReadInt()
	o.Caption = Schema.ReadLimitedBoxedObjectFrom(r, TagTextEmpty, TagTextPlain, TagTextBold, TagTextItalic, TagTextUnderline, TagTextStrike, TagTextFixed, TagTextUrl, TagTextEmail, TagTextConcat).(TLRichTextType)
}

func (o *TLPageBlockEmbed) WriteBareTo(w *tl.Writer) {
	w.WriteUint32(uint32(o.Flags))
	w.WriteString(o.Url)
	w.WriteString(o.Html)
	w.WriteUint64(o.PosterPhotoID)
	w.WriteInt(o.W)
	w.WriteInt(o.H)
	w.WriteCmd(o.Caption.Cmd())
	o.Caption.WriteBareTo(w)
}

func (o *TLPageBlockEmbed) String() string {
	return tl.Pretty(o)
}

// TLPageBlockEmbedPost represents ctor pageBlockEmbedPost#292c7be9 url:string webpage_id:long author_photo_id:long author:string date:int blocks:Vector<PageBlock> caption:RichText = PageBlock from Telegram
type TLPageBlockEmbedPost struct {
	Url           string            // url:string
	WebpageID     uint64            // webpage_id:long
	AuthorPhotoID uint64            // author_photo_id:long
	Author        string            // author:string
	Date          int               // date:int
	Blocks        []TLPageBlockType // blocks:Vector<PageBlock>
	Caption       TLRichTextType    // caption:RichText
}

func (o *TLPageBlockEmbedPost) IsTLPageBlock() {}

func (o *TLPageBlockEmbedPost) Cmd() uint32 {
	return TagPageBlockEmbedPost
}

func (o *TLPageBlockEmbedPost) ReadBareFrom(r *tl.Reader) {
	o.Url = r.ReadString()
	o.WebpageID = r.ReadUint64()
	o.AuthorPhotoID = r.ReadUint64()
	o.Author = r.ReadString()
	o.Date = r.ReadInt()
	if cmd := r.ReadCmd(); cmd != TagVector {
		r.Fail(errors.New("expected: vector"))
	}
	o.Blocks = make([]TLPageBlockType, r.ReadInt())
	for i := 0; i < len(o.Blocks); i++ {
		o.Blocks[i] = Schema.ReadLimitedBoxedObjectFrom(r, TagPageBlockUnsupported, TagPageBlockTitle, TagPageBlockSubtitle, TagPageBlockAuthorDate, TagPageBlockHeader, TagPageBlockSubheader, TagPageBlockParagraph, TagPageBlockPreformatted, TagPageBlockFooter, TagPageBlockDivider, TagPageBlockAnchor, TagPageBlockList, TagPageBlockBlockquote, TagPageBlockPullquote, TagPageBlockPhoto, TagPageBlockVideo, TagPageBlockCover, TagPageBlockEmbed, TagPageBlockEmbedPost, TagPageBlockCollage, TagPageBlockSlideshow).(TLPageBlockType)
	}
	o.Caption = Schema.ReadLimitedBoxedObjectFrom(r, TagTextEmpty, TagTextPlain, TagTextBold, TagTextItalic, TagTextUnderline, TagTextStrike, TagTextFixed, TagTextUrl, TagTextEmail, TagTextConcat).(TLRichTextType)
}

func (o *TLPageBlockEmbedPost) WriteBareTo(w *tl.Writer) {
	w.WriteString(o.Url)
	w.WriteUint64(o.WebpageID)
	w.WriteUint64(o.AuthorPhotoID)
	w.WriteString(o.Author)
	w.WriteInt(o.Date)
	w.WriteCmd(TagVector)
	w.WriteInt(len(o.Blocks))
	for i := 0; i < len(o.Blocks); i++ {
		w.WriteCmd(o.Blocks[i].Cmd())
		o.Blocks[i].WriteBareTo(w)
	}
	w.WriteCmd(o.Caption.Cmd())
	o.Caption.WriteBareTo(w)
}

func (o *TLPageBlockEmbedPost) String() string {
	return tl.Pretty(o)
}

// TLPageBlockCollage represents ctor pageBlockCollage#08b31c4f items:Vector<PageBlock> caption:RichText = PageBlock from Telegram
type TLPageBlockCollage struct {
	Items   []TLPageBlockType // items:Vector<PageBlock>
	Caption TLRichTextType    // caption:RichText
}

func (o *TLPageBlockCollage) IsTLPageBlock() {}

func (o *TLPageBlockCollage) Cmd() uint32 {
	return TagPageBlockCollage
}

func (o *TLPageBlockCollage) ReadBareFrom(r *tl.Reader) {
	if cmd := r.ReadCmd(); cmd != TagVector {
		r.Fail(errors.New("expected: vector"))
	}
	o.Items = make([]TLPageBlockType, r.ReadInt())
	for i := 0; i < len(o.Items); i++ {
		o.Items[i] = Schema.ReadLimitedBoxedObjectFrom(r, TagPageBlockUnsupported, TagPageBlockTitle, TagPageBlockSubtitle, TagPageBlockAuthorDate, TagPageBlockHeader, TagPageBlockSubheader, TagPageBlockParagraph, TagPageBlockPreformatted, TagPageBlockFooter, TagPageBlockDivider, TagPageBlockAnchor, TagPageBlockList, TagPageBlockBlockquote, TagPageBlockPullquote, TagPageBlockPhoto, TagPageBlockVideo, TagPageBlockCover, TagPageBlockEmbed, TagPageBlockEmbedPost, TagPageBlockCollage, TagPageBlockSlideshow).(TLPageBlockType)
	}
	o.Caption = Schema.ReadLimitedBoxedObjectFrom(r, TagTextEmpty, TagTextPlain, TagTextBold, TagTextItalic, TagTextUnderline, TagTextStrike, TagTextFixed, TagTextUrl, TagTextEmail, TagTextConcat).(TLRichTextType)
}

func (o *TLPageBlockCollage) WriteBareTo(w *tl.Writer) {
	w.WriteCmd(TagVector)
	w.WriteInt(len(o.Items))
	for i := 0; i < len(o.Items); i++ {
		w.WriteCmd(o.Items[i].Cmd())
		o.Items[i].WriteBareTo(w)
	}
	w.WriteCmd(o.Caption.Cmd())
	o.Caption.WriteBareTo(w)
}

func (o *TLPageBlockCollage) String() string {
	return tl.Pretty(o)
}

// TLPageBlockSlideshow represents ctor pageBlockSlideshow#130c8963 items:Vector<PageBlock> caption:RichText = PageBlock from Telegram
type TLPageBlockSlideshow struct {
	Items   []TLPageBlockType // items:Vector<PageBlock>
	Caption TLRichTextType    // caption:RichText
}

func (o *TLPageBlockSlideshow) IsTLPageBlock() {}

func (o *TLPageBlockSlideshow) Cmd() uint32 {
	return TagPageBlockSlideshow
}

func (o *TLPageBlockSlideshow) ReadBareFrom(r *tl.Reader) {
	if cmd := r.ReadCmd(); cmd != TagVector {
		r.Fail(errors.New("expected: vector"))
	}
	o.Items = make([]TLPageBlockType, r.ReadInt())
	for i := 0; i < len(o.Items); i++ {
		o.Items[i] = Schema.ReadLimitedBoxedObjectFrom(r, TagPageBlockUnsupported, TagPageBlockTitle, TagPageBlockSubtitle, TagPageBlockAuthorDate, TagPageBlockHeader, TagPageBlockSubheader, TagPageBlockParagraph, TagPageBlockPreformatted, TagPageBlockFooter, TagPageBlockDivider, TagPageBlockAnchor, TagPageBlockList, TagPageBlockBlockquote, TagPageBlockPullquote, TagPageBlockPhoto, TagPageBlockVideo, TagPageBlockCover, TagPageBlockEmbed, TagPageBlockEmbedPost, TagPageBlockCollage, TagPageBlockSlideshow).(TLPageBlockType)
	}
	o.Caption = Schema.ReadLimitedBoxedObjectFrom(r, TagTextEmpty, TagTextPlain, TagTextBold, TagTextItalic, TagTextUnderline, TagTextStrike, TagTextFixed, TagTextUrl, TagTextEmail, TagTextConcat).(TLRichTextType)
}

func (o *TLPageBlockSlideshow) WriteBareTo(w *tl.Writer) {
	w.WriteCmd(TagVector)
	w.WriteInt(len(o.Items))
	for i := 0; i < len(o.Items); i++ {
		w.WriteCmd(o.Items[i].Cmd())
		o.Items[i].WriteBareTo(w)
	}
	w.WriteCmd(o.Caption.Cmd())
	o.Caption.WriteBareTo(w)
}

func (o *TLPageBlockSlideshow) String() string {
	return tl.Pretty(o)
}

// TLPagePart represents ctor pagePart#8dee6c44 blocks:Vector<PageBlock> photos:Vector<Photo> videos:Vector<Document> = Page from Telegram
type TLPagePart struct {
	Blocks []TLPageBlockType // blocks:Vector<PageBlock>
	Photos []TLPhotoType     // photos:Vector<Photo>
	Videos []TLDocumentType  // videos:Vector<Document>
}

func (o *TLPagePart) IsTLPage() {}

func (o *TLPagePart) Cmd() uint32 {
	return TagPagePart
}

func (o *TLPagePart) ReadBareFrom(r *tl.Reader) {
	if cmd := r.ReadCmd(); cmd != TagVector {
		r.Fail(errors.New("expected: vector"))
	}
	o.Blocks = make([]TLPageBlockType, r.ReadInt())
	for i := 0; i < len(o.Blocks); i++ {
		o.Blocks[i] = Schema.ReadLimitedBoxedObjectFrom(r, TagPageBlockUnsupported, TagPageBlockTitle, TagPageBlockSubtitle, TagPageBlockAuthorDate, TagPageBlockHeader, TagPageBlockSubheader, TagPageBlockParagraph, TagPageBlockPreformatted, TagPageBlockFooter, TagPageBlockDivider, TagPageBlockAnchor, TagPageBlockList, TagPageBlockBlockquote, TagPageBlockPullquote, TagPageBlockPhoto, TagPageBlockVideo, TagPageBlockCover, TagPageBlockEmbed, TagPageBlockEmbedPost, TagPageBlockCollage, TagPageBlockSlideshow).(TLPageBlockType)
	}
	if cmd := r.ReadCmd(); cmd != TagVector {
		r.Fail(errors.New("expected: vector"))
	}
	o.Photos = make([]TLPhotoType, r.ReadInt())
	for i := 0; i < len(o.Photos); i++ {
		o.Photos[i] = Schema.ReadLimitedBoxedObjectFrom(r, TagPhotoEmpty, TagPhoto).(TLPhotoType)
	}
	if cmd := r.ReadCmd(); cmd != TagVector {
		r.Fail(errors.New("expected: vector"))
	}
	o.Videos = make([]TLDocumentType, r.ReadInt())
	for i := 0; i < len(o.Videos); i++ {
		o.Videos[i] = Schema.ReadLimitedBoxedObjectFrom(r, TagDocumentEmpty, TagDocument).(TLDocumentType)
	}
}

func (o *TLPagePart) WriteBareTo(w *tl.Writer) {
	w.WriteCmd(TagVector)
	w.WriteInt(len(o.Blocks))
	for i := 0; i < len(o.Blocks); i++ {
		w.WriteCmd(o.Blocks[i].Cmd())
		o.Blocks[i].WriteBareTo(w)
	}
	w.WriteCmd(TagVector)
	w.WriteInt(len(o.Photos))
	for i := 0; i < len(o.Photos); i++ {
		w.WriteCmd(o.Photos[i].Cmd())
		o.Photos[i].WriteBareTo(w)
	}
	w.WriteCmd(TagVector)
	w.WriteInt(len(o.Videos))
	for i := 0; i < len(o.Videos); i++ {
		w.WriteCmd(o.Videos[i].Cmd())
		o.Videos[i].WriteBareTo(w)
	}
}

func (o *TLPagePart) String() string {
	return tl.Pretty(o)
}

// TLPageFull represents ctor pageFull#d7a19d69 blocks:Vector<PageBlock> photos:Vector<Photo> videos:Vector<Document> = Page from Telegram
type TLPageFull struct {
	Blocks []TLPageBlockType // blocks:Vector<PageBlock>
	Photos []TLPhotoType     // photos:Vector<Photo>
	Videos []TLDocumentType  // videos:Vector<Document>
}

func (o *TLPageFull) IsTLPage() {}

func (o *TLPageFull) Cmd() uint32 {
	return TagPageFull
}

func (o *TLPageFull) ReadBareFrom(r *tl.Reader) {
	if cmd := r.ReadCmd(); cmd != TagVector {
		r.Fail(errors.New("expected: vector"))
	}
	o.Blocks = make([]TLPageBlockType, r.ReadInt())
	for i := 0; i < len(o.Blocks); i++ {
		o.Blocks[i] = Schema.ReadLimitedBoxedObjectFrom(r, TagPageBlockUnsupported, TagPageBlockTitle, TagPageBlockSubtitle, TagPageBlockAuthorDate, TagPageBlockHeader, TagPageBlockSubheader, TagPageBlockParagraph, TagPageBlockPreformatted, TagPageBlockFooter, TagPageBlockDivider, TagPageBlockAnchor, TagPageBlockList, TagPageBlockBlockquote, TagPageBlockPullquote, TagPageBlockPhoto, TagPageBlockVideo, TagPageBlockCover, TagPageBlockEmbed, TagPageBlockEmbedPost, TagPageBlockCollage, TagPageBlockSlideshow).(TLPageBlockType)
	}
	if cmd := r.ReadCmd(); cmd != TagVector {
		r.Fail(errors.New("expected: vector"))
	}
	o.Photos = make([]TLPhotoType, r.ReadInt())
	for i := 0; i < len(o.Photos); i++ {
		o.Photos[i] = Schema.ReadLimitedBoxedObjectFrom(r, TagPhotoEmpty, TagPhoto).(TLPhotoType)
	}
	if cmd := r.ReadCmd(); cmd != TagVector {
		r.Fail(errors.New("expected: vector"))
	}
	o.Videos = make([]TLDocumentType, r.ReadInt())
	for i := 0; i < len(o.Videos); i++ {
		o.Videos[i] = Schema.ReadLimitedBoxedObjectFrom(r, TagDocumentEmpty, TagDocument).(TLDocumentType)
	}
}

func (o *TLPageFull) WriteBareTo(w *tl.Writer) {
	w.WriteCmd(TagVector)
	w.WriteInt(len(o.Blocks))
	for i := 0; i < len(o.Blocks); i++ {
		w.WriteCmd(o.Blocks[i].Cmd())
		o.Blocks[i].WriteBareTo(w)
	}
	w.WriteCmd(TagVector)
	w.WriteInt(len(o.Photos))
	for i := 0; i < len(o.Photos); i++ {
		w.WriteCmd(o.Photos[i].Cmd())
		o.Photos[i].WriteBareTo(w)
	}
	w.WriteCmd(TagVector)
	w.WriteInt(len(o.Videos))
	for i := 0; i < len(o.Videos); i++ {
		w.WriteCmd(o.Videos[i].Cmd())
		o.Videos[i].WriteBareTo(w)
	}
}

func (o *TLPageFull) String() string {
	return tl.Pretty(o)
}

// TLPhoneCallDiscardReasonMissed represents ctor phoneCallDiscardReasonMissed#85e42301 = PhoneCallDiscardReason from Telegram
type TLPhoneCallDiscardReasonMissed struct {
}

func (o *TLPhoneCallDiscardReasonMissed) IsTLPhoneCallDiscardReason() {}

func (o *TLPhoneCallDiscardReasonMissed) Cmd() uint32 {
	return TagPhoneCallDiscardReasonMissed
}

func (o *TLPhoneCallDiscardReasonMissed) ReadBareFrom(r *tl.Reader) {
}

func (o *TLPhoneCallDiscardReasonMissed) WriteBareTo(w *tl.Writer) {
}

func (o *TLPhoneCallDiscardReasonMissed) String() string {
	return tl.Pretty(o)
}

// TLPhoneCallDiscardReasonDisconnect represents ctor phoneCallDiscardReasonDisconnect#e095c1a0 = PhoneCallDiscardReason from Telegram
type TLPhoneCallDiscardReasonDisconnect struct {
}

func (o *TLPhoneCallDiscardReasonDisconnect) IsTLPhoneCallDiscardReason() {}

func (o *TLPhoneCallDiscardReasonDisconnect) Cmd() uint32 {
	return TagPhoneCallDiscardReasonDisconnect
}

func (o *TLPhoneCallDiscardReasonDisconnect) ReadBareFrom(r *tl.Reader) {
}

func (o *TLPhoneCallDiscardReasonDisconnect) WriteBareTo(w *tl.Writer) {
}

func (o *TLPhoneCallDiscardReasonDisconnect) String() string {
	return tl.Pretty(o)
}

// TLPhoneCallDiscardReasonHangup represents ctor phoneCallDiscardReasonHangup#57adc690 = PhoneCallDiscardReason from Telegram
type TLPhoneCallDiscardReasonHangup struct {
}

func (o *TLPhoneCallDiscardReasonHangup) IsTLPhoneCallDiscardReason() {}

func (o *TLPhoneCallDiscardReasonHangup) Cmd() uint32 {
	return TagPhoneCallDiscardReasonHangup
}

func (o *TLPhoneCallDiscardReasonHangup) ReadBareFrom(r *tl.Reader) {
}

func (o *TLPhoneCallDiscardReasonHangup) WriteBareTo(w *tl.Writer) {
}

func (o *TLPhoneCallDiscardReasonHangup) String() string {
	return tl.Pretty(o)
}

// TLPhoneCallDiscardReasonBusy represents ctor phoneCallDiscardReasonBusy#faf7e8c9 = PhoneCallDiscardReason from Telegram
type TLPhoneCallDiscardReasonBusy struct {
}

func (o *TLPhoneCallDiscardReasonBusy) IsTLPhoneCallDiscardReason() {}

func (o *TLPhoneCallDiscardReasonBusy) Cmd() uint32 {
	return TagPhoneCallDiscardReasonBusy
}

func (o *TLPhoneCallDiscardReasonBusy) ReadBareFrom(r *tl.Reader) {
}

func (o *TLPhoneCallDiscardReasonBusy) WriteBareTo(w *tl.Writer) {
}

func (o *TLPhoneCallDiscardReasonBusy) String() string {
	return tl.Pretty(o)
}

// TLPaymentsPaymentResult represents ctor payments.paymentResult#4e5f810d updates:Updates = payments.PaymentResult from Telegram
type TLPaymentsPaymentResult struct {
	Updates TLUpdatesType // updates:Updates
}

func (o *TLPaymentsPaymentResult) IsTLPaymentsPaymentResult() {}

func (o *TLPaymentsPaymentResult) Cmd() uint32 {
	return TagPaymentsPaymentResult
}

func (o *TLPaymentsPaymentResult) ReadBareFrom(r *tl.Reader) {
	o.Updates = Schema.ReadLimitedBoxedObjectFrom(r, TagUpdatesTooLong, TagUpdateShortMessage, TagUpdateShortChatMessage, TagUpdateShort, TagUpdatesCombined, TagUpdates, TagUpdateShortSentMessage).(TLUpdatesType)
}

func (o *TLPaymentsPaymentResult) WriteBareTo(w *tl.Writer) {
	w.WriteCmd(o.Updates.Cmd())
	o.Updates.WriteBareTo(w)
}

func (o *TLPaymentsPaymentResult) String() string {
	return tl.Pretty(o)
}

// TLPaymentsPaymentVerficationNeeded represents ctor payments.paymentVerficationNeeded#6b56b921 url:string = payments.PaymentResult from Telegram
type TLPaymentsPaymentVerficationNeeded struct {
	Url string // url:string
}

func (o *TLPaymentsPaymentVerficationNeeded) IsTLPaymentsPaymentResult() {}

func (o *TLPaymentsPaymentVerficationNeeded) Cmd() uint32 {
	return TagPaymentsPaymentVerficationNeeded
}

func (o *TLPaymentsPaymentVerficationNeeded) ReadBareFrom(r *tl.Reader) {
	o.Url = r.ReadString()
}

func (o *TLPaymentsPaymentVerficationNeeded) WriteBareTo(w *tl.Writer) {
	w.WriteString(o.Url)
}

func (o *TLPaymentsPaymentVerficationNeeded) String() string {
	return tl.Pretty(o)
}

// TLInputPaymentCredentialsSaved represents ctor inputPaymentCredentialsSaved#c10eb2cf id:string tmp_password:bytes = InputPaymentCredentials from Telegram
type TLInputPaymentCredentialsSaved struct {
	ID          string // id:string
	TmpPassword []byte // tmp_password:bytes
}

func (o *TLInputPaymentCredentialsSaved) IsTLInputPaymentCredentials() {}

func (o *TLInputPaymentCredentialsSaved) Cmd() uint32 {
	return TagInputPaymentCredentialsSaved
}

func (o *TLInputPaymentCredentialsSaved) ReadBareFrom(r *tl.Reader) {
	o.ID = r.ReadString()
	o.TmpPassword = r.ReadBlob()
}

func (o *TLInputPaymentCredentialsSaved) WriteBareTo(w *tl.Writer) {
	w.WriteString(o.ID)
	w.WriteBlob(o.TmpPassword)
}

func (o *TLInputPaymentCredentialsSaved) String() string {
	return tl.Pretty(o)
}

// TLInputPaymentCredentials represents ctor inputPaymentCredentials#3417d728 flags:# flags.0?save:true data:DataJSON = InputPaymentCredentials from Telegram
type TLInputPaymentCredentials struct {
	Flags uint        // flags:#
	Save  bool        // flags.0?save:true
	Data  *TLDataJSON // data:DataJSON
}

func (o *TLInputPaymentCredentials) IsTLInputPaymentCredentials() {}

func (o *TLInputPaymentCredentials) Cmd() uint32 {
	return TagInputPaymentCredentials
}

func (o *TLInputPaymentCredentials) ReadBareFrom(r *tl.Reader) {
	o.Flags = uint(r.ReadUint32())
	o.Save = true
	if cmd := r.ReadCmd(); cmd != TagDataJSON {
		r.Fail(errors.New("expected: dataJSON"))
	}
	o.Data = new(TLDataJSON)
	o.Data.ReadBareFrom(r)
}

func (o *TLInputPaymentCredentials) WriteBareTo(w *tl.Writer) {
	w.WriteUint32(uint32(o.Flags))
	w.WriteCmd(TagDataJSON)
	o.Data.WriteBareTo(w)
}

func (o *TLInputPaymentCredentials) String() string {
	return tl.Pretty(o)
}

// TLPhoneCallEmpty represents ctor phoneCallEmpty#5366c915 id:long = PhoneCall from Telegram
type TLPhoneCallEmpty struct {
	ID uint64 // id:long
}

func (o *TLPhoneCallEmpty) IsTLPhoneCall() {}

func (o *TLPhoneCallEmpty) Cmd() uint32 {
	return TagPhoneCallEmpty
}

func (o *TLPhoneCallEmpty) ReadBareFrom(r *tl.Reader) {
	o.ID = r.ReadUint64()
}

func (o *TLPhoneCallEmpty) WriteBareTo(w *tl.Writer) {
	w.WriteUint64(o.ID)
}

func (o *TLPhoneCallEmpty) String() string {
	return tl.Pretty(o)
}

// TLPhoneCallWaiting represents ctor phoneCallWaiting#1b8f4ad1 flags:# id:long access_hash:long date:int admin_id:int participant_id:int protocol:PhoneCallProtocol flags.0?receive_date:int = PhoneCall from Telegram
type TLPhoneCallWaiting struct {
	Flags         uint                 // flags:#
	ID            uint64               // id:long
	AccessHash    uint64               // access_hash:long
	Date          int                  // date:int
	AdminID       int                  // admin_id:int
	ParticipantID int                  // participant_id:int
	Protocol      *TLPhoneCallProtocol // protocol:PhoneCallProtocol
	ReceiveDate   int                  // flags.0?receive_date:int
}

func (o *TLPhoneCallWaiting) IsTLPhoneCall() {}

func (o *TLPhoneCallWaiting) Cmd() uint32 {
	return TagPhoneCallWaiting
}

func (o *TLPhoneCallWaiting) ReadBareFrom(r *tl.Reader) {
	o.Flags = uint(r.ReadUint32())
	o.ID = r.ReadUint64()
	o.AccessHash = r.ReadUint64()
	o.Date = r.ReadInt()
	o.AdminID = r.ReadInt()
	o.ParticipantID = r.ReadInt()
	if cmd := r.ReadCmd(); cmd != TagPhoneCallProtocol {
		r.Fail(errors.New("expected: phoneCallProtocol"))
	}
	o.Protocol = new(TLPhoneCallProtocol)
	o.Protocol.ReadBareFrom(r)
	o.ReceiveDate = r.ReadInt()
}

func (o *TLPhoneCallWaiting) WriteBareTo(w *tl.Writer) {
	w.WriteUint32(uint32(o.Flags))
	w.WriteUint64(o.ID)
	w.WriteUint64(o.AccessHash)
	w.WriteInt(o.Date)
	w.WriteInt(o.AdminID)
	w.WriteInt(o.ParticipantID)
	w.WriteCmd(TagPhoneCallProtocol)
	o.Protocol.WriteBareTo(w)
	w.WriteInt(o.ReceiveDate)
}

func (o *TLPhoneCallWaiting) String() string {
	return tl.Pretty(o)
}

// TLPhoneCallRequested represents ctor phoneCallRequested#83761ce4 id:long access_hash:long date:int admin_id:int participant_id:int g_a_hash:bytes protocol:PhoneCallProtocol = PhoneCall from Telegram
type TLPhoneCallRequested struct {
	ID            uint64               // id:long
	AccessHash    uint64               // access_hash:long
	Date          int                  // date:int
	AdminID       int                  // admin_id:int
	ParticipantID int                  // participant_id:int
	GAHash        []byte               // g_a_hash:bytes
	Protocol      *TLPhoneCallProtocol // protocol:PhoneCallProtocol
}

func (o *TLPhoneCallRequested) IsTLPhoneCall() {}

func (o *TLPhoneCallRequested) Cmd() uint32 {
	return TagPhoneCallRequested
}

func (o *TLPhoneCallRequested) ReadBareFrom(r *tl.Reader) {
	o.ID = r.ReadUint64()
	o.AccessHash = r.ReadUint64()
	o.Date = r.ReadInt()
	o.AdminID = r.ReadInt()
	o.ParticipantID = r.ReadInt()
	o.GAHash = r.ReadBlob()
	if cmd := r.ReadCmd(); cmd != TagPhoneCallProtocol {
		r.Fail(errors.New("expected: phoneCallProtocol"))
	}
	o.Protocol = new(TLPhoneCallProtocol)
	o.Protocol.ReadBareFrom(r)
}

func (o *TLPhoneCallRequested) WriteBareTo(w *tl.Writer) {
	w.WriteUint64(o.ID)
	w.WriteUint64(o.AccessHash)
	w.WriteInt(o.Date)
	w.WriteInt(o.AdminID)
	w.WriteInt(o.ParticipantID)
	w.WriteBlob(o.GAHash)
	w.WriteCmd(TagPhoneCallProtocol)
	o.Protocol.WriteBareTo(w)
}

func (o *TLPhoneCallRequested) String() string {
	return tl.Pretty(o)
}

// TLPhoneCallAccepted represents ctor phoneCallAccepted#6d003d3f id:long access_hash:long date:int admin_id:int participant_id:int g_b:bytes protocol:PhoneCallProtocol = PhoneCall from Telegram
type TLPhoneCallAccepted struct {
	ID            uint64               // id:long
	AccessHash    uint64               // access_hash:long
	Date          int                  // date:int
	AdminID       int                  // admin_id:int
	ParticipantID int                  // participant_id:int
	GB            []byte               // g_b:bytes
	Protocol      *TLPhoneCallProtocol // protocol:PhoneCallProtocol
}

func (o *TLPhoneCallAccepted) IsTLPhoneCall() {}

func (o *TLPhoneCallAccepted) Cmd() uint32 {
	return TagPhoneCallAccepted
}

func (o *TLPhoneCallAccepted) ReadBareFrom(r *tl.Reader) {
	o.ID = r.ReadUint64()
	o.AccessHash = r.ReadUint64()
	o.Date = r.ReadInt()
	o.AdminID = r.ReadInt()
	o.ParticipantID = r.ReadInt()
	o.GB = r.ReadBlob()
	if cmd := r.ReadCmd(); cmd != TagPhoneCallProtocol {
		r.Fail(errors.New("expected: phoneCallProtocol"))
	}
	o.Protocol = new(TLPhoneCallProtocol)
	o.Protocol.ReadBareFrom(r)
}

func (o *TLPhoneCallAccepted) WriteBareTo(w *tl.Writer) {
	w.WriteUint64(o.ID)
	w.WriteUint64(o.AccessHash)
	w.WriteInt(o.Date)
	w.WriteInt(o.AdminID)
	w.WriteInt(o.ParticipantID)
	w.WriteBlob(o.GB)
	w.WriteCmd(TagPhoneCallProtocol)
	o.Protocol.WriteBareTo(w)
}

func (o *TLPhoneCallAccepted) String() string {
	return tl.Pretty(o)
}

// TLPhoneCall represents ctor phoneCall#ffe6ab67 id:long access_hash:long date:int admin_id:int participant_id:int g_a_or_b:bytes key_fingerprint:long protocol:PhoneCallProtocol connection:PhoneConnection alternative_connections:Vector<PhoneConnection> start_date:int = PhoneCall from Telegram
type TLPhoneCall struct {
	ID                     uint64               // id:long
	AccessHash             uint64               // access_hash:long
	Date                   int                  // date:int
	AdminID                int                  // admin_id:int
	ParticipantID          int                  // participant_id:int
	GAOrB                  []byte               // g_a_or_b:bytes
	KeyFingerprint         uint64               // key_fingerprint:long
	Protocol               *TLPhoneCallProtocol // protocol:PhoneCallProtocol
	Connection             *TLPhoneConnection   // connection:PhoneConnection
	AlternativeConnections []*TLPhoneConnection // alternative_connections:Vector<PhoneConnection>
	StartDate              int                  // start_date:int
}

func (o *TLPhoneCall) IsTLPhoneCall() {}

func (o *TLPhoneCall) Cmd() uint32 {
	return TagPhoneCall
}

func (o *TLPhoneCall) ReadBareFrom(r *tl.Reader) {
	o.ID = r.ReadUint64()
	o.AccessHash = r.ReadUint64()
	o.Date = r.ReadInt()
	o.AdminID = r.ReadInt()
	o.ParticipantID = r.ReadInt()
	o.GAOrB = r.ReadBlob()
	o.KeyFingerprint = r.ReadUint64()
	if cmd := r.ReadCmd(); cmd != TagPhoneCallProtocol {
		r.Fail(errors.New("expected: phoneCallProtocol"))
	}
	o.Protocol = new(TLPhoneCallProtocol)
	o.Protocol.ReadBareFrom(r)
	if cmd := r.ReadCmd(); cmd != TagPhoneConnection {
		r.Fail(errors.New("expected: phoneConnection"))
	}
	o.Connection = new(TLPhoneConnection)
	o.Connection.ReadBareFrom(r)
	if cmd := r.ReadCmd(); cmd != TagVector {
		r.Fail(errors.New("expected: vector"))
	}
	o.AlternativeConnections = make([]*TLPhoneConnection, r.ReadInt())
	for i := 0; i < len(o.AlternativeConnections); i++ {
		if cmd := r.ReadCmd(); cmd != TagPhoneConnection {
			r.Fail(errors.New("expected: phoneConnection"))
		}
		o.AlternativeConnections[i] = new(TLPhoneConnection)
		o.AlternativeConnections[i].ReadBareFrom(r)
	}
	o.StartDate = r.ReadInt()
}

func (o *TLPhoneCall) WriteBareTo(w *tl.Writer) {
	w.WriteUint64(o.ID)
	w.WriteUint64(o.AccessHash)
	w.WriteInt(o.Date)
	w.WriteInt(o.AdminID)
	w.WriteInt(o.ParticipantID)
	w.WriteBlob(o.GAOrB)
	w.WriteUint64(o.KeyFingerprint)
	w.WriteCmd(TagPhoneCallProtocol)
	o.Protocol.WriteBareTo(w)
	w.WriteCmd(TagPhoneConnection)
	o.Connection.WriteBareTo(w)
	w.WriteCmd(TagVector)
	w.WriteInt(len(o.AlternativeConnections))
	for i := 0; i < len(o.AlternativeConnections); i++ {
		w.WriteCmd(TagPhoneConnection)
		o.AlternativeConnections[i].WriteBareTo(w)
	}
	w.WriteInt(o.StartDate)
}

func (o *TLPhoneCall) String() string {
	return tl.Pretty(o)
}

// TLPhoneCallDiscarded represents ctor phoneCallDiscarded#50ca4de1 flags:# flags.2?need_rating:true flags.3?need_debug:true id:long flags.0?reason:PhoneCallDiscardReason flags.1?duration:int = PhoneCall from Telegram
type TLPhoneCallDiscarded struct {
	Flags      uint                         // flags:#
	NeedRating bool                         // flags.2?need_rating:true
	NeedDebug  bool                         // flags.3?need_debug:true
	ID         uint64                       // id:long
	Reason     TLPhoneCallDiscardReasonType // flags.0?reason:PhoneCallDiscardReason
	Duration   int                          // flags.1?duration:int
}

func (o *TLPhoneCallDiscarded) IsTLPhoneCall() {}

func (o *TLPhoneCallDiscarded) Cmd() uint32 {
	return TagPhoneCallDiscarded
}

func (o *TLPhoneCallDiscarded) ReadBareFrom(r *tl.Reader) {
	o.Flags = uint(r.ReadUint32())
	o.NeedRating = true
	o.NeedDebug = true
	o.ID = r.ReadUint64()
	o.Reason = Schema.ReadLimitedBoxedObjectFrom(r, TagPhoneCallDiscardReasonMissed, TagPhoneCallDiscardReasonDisconnect, TagPhoneCallDiscardReasonHangup, TagPhoneCallDiscardReasonBusy).(TLPhoneCallDiscardReasonType)
	o.Duration = r.ReadInt()
}

func (o *TLPhoneCallDiscarded) WriteBareTo(w *tl.Writer) {
	w.WriteUint32(uint32(o.Flags))
	w.WriteUint64(o.ID)
	w.WriteCmd(o.Reason.Cmd())
	o.Reason.WriteBareTo(w)
	w.WriteInt(o.Duration)
}

func (o *TLPhoneCallDiscarded) String() string {
	return tl.Pretty(o)
}

var Schema = &tl.Schema{
	Factory: func(cmd uint32) tl.Object {
		switch cmd {
		case TagResPQ:
			return new(TLResPQ)
		case TagPQInnerData:
			return new(TLPQInnerData)
		case TagServerDHInnerData:
			return new(TLServerDHInnerData)
		case TagClientDHInnerData:
			return new(TLClientDHInnerData)
		case TagRPCResult:
			return new(TLRPCResult)
		case TagRPCError:
			return new(TLRPCError)
		case TagFutureSalt:
			return new(TLFutureSalt)
		case TagFutureSalts:
			return new(TLFutureSalts)
		case TagPong:
			return new(TLPong)
		case TagNewSessionCreated:
			return new(TLNewSessionCreated)
		case TagMsgContainer:
			return new(TLMsgContainer)
		case TagProtoMessage:
			return new(TLProtoMessage)
		case TagMsgCopy:
			return new(TLMsgCopy)
		case TagMsgsAck:
			return new(TLMsgsAck)
		case TagMsgResendReq:
			return new(TLMsgResendReq)
		case TagMsgsStateReq:
			return new(TLMsgsStateReq)
		case TagMsgsStateInfo:
			return new(TLMsgsStateInfo)
		case TagMsgsAllInfo:
			return new(TLMsgsAllInfo)
		case TagError:
			return new(TLError)
		case TagNull:
			return new(TLNull)
		case TagInputPhoneContact:
			return new(TLInputPhoneContact)
		case TagInputAppEvent:
			return new(TLInputAppEvent)
		case TagDialog:
			return new(TLDialog)
		case TagAuthCheckedPhone:
			return new(TLAuthCheckedPhone)
		case TagAuthSentCode:
			return new(TLAuthSentCode)
		case TagAuthAuthorization:
			return new(TLAuthAuthorization)
		case TagAuthExportedAuthorization:
			return new(TLAuthExportedAuthorization)
		case TagInputPeerNotifySettings:
			return new(TLInputPeerNotifySettings)
		case TagPeerSettings:
			return new(TLPeerSettings)
		case TagUserFull:
			return new(TLUserFull)
		case TagContact:
			return new(TLContact)
		case TagImportedContact:
			return new(TLImportedContact)
		case TagContactBlocked:
			return new(TLContactBlocked)
		case TagContactStatus:
			return new(TLContactStatus)
		case TagContactsLink:
			return new(TLContactsLink)
		case TagContactsImportedContacts:
			return new(TLContactsImportedContacts)
		case TagMessagesChatFull:
			return new(TLMessagesChatFull)
		case TagMessagesAffectedHistory:
			return new(TLMessagesAffectedHistory)
		case TagUpdatesState:
			return new(TLUpdatesState)
		case TagPhotosPhoto:
			return new(TLPhotosPhoto)
		case TagUploadFile:
			return new(TLUploadFile)
		case TagDCOption:
			return new(TLDCOption)
		case TagConfig:
			return new(TLConfig)
		case TagNearestDC:
			return new(TLNearestDC)
		case TagHelpInviteText:
			return new(TLHelpInviteText)
		case TagInputEncryptedChat:
			return new(TLInputEncryptedChat)
		case TagHelpSupport:
			return new(TLHelpSupport)
		case TagContactsFound:
			return new(TLContactsFound)
		case TagAccountPrivacyRules:
			return new(TLAccountPrivacyRules)
		case TagAccountDaysTTL:
			return new(TLAccountDaysTTL)
		case TagStickerPack:
			return new(TLStickerPack)
		case TagDisabledFeature:
			return new(TLDisabledFeature)
		case TagMessagesAffectedMessages:
			return new(TLMessagesAffectedMessages)
		case TagAuthorization:
			return new(TLAuthorization)
		case TagAccountAuthorizations:
			return new(TLAccountAuthorizations)
		case TagAccountPasswordSettings:
			return new(TLAccountPasswordSettings)
		case TagAccountPasswordInputSettings:
			return new(TLAccountPasswordInputSettings)
		case TagAuthPasswordRecovery:
			return new(TLAuthPasswordRecovery)
		case TagReceivedNotifyMessage:
			return new(TLReceivedNotifyMessage)
		case TagStickerSet:
			return new(TLStickerSet)
		case TagMessagesStickerSet:
			return new(TLMessagesStickerSet)
		case TagBotCommand:
			return new(TLBotCommand)
		case TagBotInfo:
			return new(TLBotInfo)
		case TagKeyboardButtonRow:
			return new(TLKeyboardButtonRow)
		case TagContactsResolvedPeer:
			return new(TLContactsResolvedPeer)
		case TagMessageRange:
			return new(TLMessageRange)
		case TagChannelsChannelParticipants:
			return new(TLChannelsChannelParticipants)
		case TagChannelsChannelParticipant:
			return new(TLChannelsChannelParticipant)
		case TagHelpTermsOfService:
			return new(TLHelpTermsOfService)
		case TagMessagesFoundGifs:
			return new(TLMessagesFoundGifs)
		case TagMessagesBotResults:
			return new(TLMessagesBotResults)
		case TagExportedMessageLink:
			return new(TLExportedMessageLink)
		case TagMessageFwdHeader:
			return new(TLMessageFwdHeader)
		case TagMessagesBotCallbackAnswer:
			return new(TLMessagesBotCallbackAnswer)
		case TagMessagesMessageEditData:
			return new(TLMessagesMessageEditData)
		case TagInputBotInlineMessageID:
			return new(TLInputBotInlineMessageID)
		case TagInlineBotSwitchPM:
			return new(TLInlineBotSwitchPM)
		case TagMessagesPeerDialogs:
			return new(TLMessagesPeerDialogs)
		case TagTopPeer:
			return new(TLTopPeer)
		case TagTopPeerCategoryPeers:
			return new(TLTopPeerCategoryPeers)
		case TagMessagesArchivedStickers:
			return new(TLMessagesArchivedStickers)
		case TagMaskCoords:
			return new(TLMaskCoords)
		case TagGame:
			return new(TLGame)
		case TagHighScore:
			return new(TLHighScore)
		case TagMessagesHighScores:
			return new(TLMessagesHighScores)
		case TagDataJSON:
			return new(TLDataJSON)
		case TagLabeledPrice:
			return new(TLLabeledPrice)
		case TagInvoice:
			return new(TLInvoice)
		case TagPaymentCharge:
			return new(TLPaymentCharge)
		case TagPostAddress:
			return new(TLPostAddress)
		case TagPaymentRequestedInfo:
			return new(TLPaymentRequestedInfo)
		case TagPaymentSavedCredentialsCard:
			return new(TLPaymentSavedCredentialsCard)
		case TagWebDocument:
			return new(TLWebDocument)
		case TagInputWebDocument:
			return new(TLInputWebDocument)
		case TagInputWebFileLocation:
			return new(TLInputWebFileLocation)
		case TagUploadWebFile:
			return new(TLUploadWebFile)
		case TagPaymentsPaymentForm:
			return new(TLPaymentsPaymentForm)
		case TagPaymentsValidatedRequestedInfo:
			return new(TLPaymentsValidatedRequestedInfo)
		case TagPaymentsPaymentReceipt:
			return new(TLPaymentsPaymentReceipt)
		case TagPaymentsSavedInfo:
			return new(TLPaymentsSavedInfo)
		case TagAccountTmpPassword:
			return new(TLAccountTmpPassword)
		case TagShippingOption:
			return new(TLShippingOption)
		case TagInputPhoneCall:
			return new(TLInputPhoneCall)
		case TagPhoneConnection:
			return new(TLPhoneConnection)
		case TagPhoneCallProtocol:
			return new(TLPhoneCallProtocol)
		case TagPhonePhoneCall:
			return new(TLPhonePhoneCall)
		case TagReqPQ:
			return new(TLReqPQ)
		case TagReqDHParams:
			return new(TLReqDHParams)
		case TagSetClientDHParams:
			return new(TLSetClientDHParams)
		case TagRPCDropAnswer:
			return new(TLRPCDropAnswer)
		case TagGetFutureSalts:
			return new(TLGetFutureSalts)
		case TagPing:
			return new(TLPing)
		case TagPingDelayDisconnect:
			return new(TLPingDelayDisconnect)
		case TagDestroySession:
			return new(TLDestroySession)
		case TagHttpWait:
			return new(TLHttpWait)
		case TagInvokeAfterMsg:
			return new(TLInvokeAfterMsg)
		case TagInvokeAfterMsgs:
			return new(TLInvokeAfterMsgs)
		case TagInitConnection:
			return new(TLInitConnection)
		case TagInvokeWithLayer:
			return new(TLInvokeWithLayer)
		case TagInvokeWithoutUpdates:
			return new(TLInvokeWithoutUpdates)
		case TagAuthCheckPhone:
			return new(TLAuthCheckPhone)
		case TagAuthSendCode:
			return new(TLAuthSendCode)
		case TagAuthSignUp:
			return new(TLAuthSignUp)
		case TagAuthSignIn:
			return new(TLAuthSignIn)
		case TagAuthLogOut:
			return new(TLAuthLogOut)
		case TagAuthResetAuthorizations:
			return new(TLAuthResetAuthorizations)
		case TagAuthSendInvites:
			return new(TLAuthSendInvites)
		case TagAuthExportAuthorization:
			return new(TLAuthExportAuthorization)
		case TagAuthImportAuthorization:
			return new(TLAuthImportAuthorization)
		case TagAuthBindTempAuthKey:
			return new(TLAuthBindTempAuthKey)
		case TagAuthImportBotAuthorization:
			return new(TLAuthImportBotAuthorization)
		case TagAuthCheckPassword:
			return new(TLAuthCheckPassword)
		case TagAuthRequestPasswordRecovery:
			return new(TLAuthRequestPasswordRecovery)
		case TagAuthRecoverPassword:
			return new(TLAuthRecoverPassword)
		case TagAuthResendCode:
			return new(TLAuthResendCode)
		case TagAuthCancelCode:
			return new(TLAuthCancelCode)
		case TagAuthDropTempAuthKeys:
			return new(TLAuthDropTempAuthKeys)
		case TagAccountRegisterDevice:
			return new(TLAccountRegisterDevice)
		case TagAccountUnregisterDevice:
			return new(TLAccountUnregisterDevice)
		case TagAccountUpdateNotifySettings:
			return new(TLAccountUpdateNotifySettings)
		case TagAccountGetNotifySettings:
			return new(TLAccountGetNotifySettings)
		case TagAccountResetNotifySettings:
			return new(TLAccountResetNotifySettings)
		case TagAccountUpdateProfile:
			return new(TLAccountUpdateProfile)
		case TagAccountUpdateStatus:
			return new(TLAccountUpdateStatus)
		case TagAccountGetWallPapers:
			return new(TLAccountGetWallPapers)
		case TagAccountReportPeer:
			return new(TLAccountReportPeer)
		case TagAccountCheckUsername:
			return new(TLAccountCheckUsername)
		case TagAccountUpdateUsername:
			return new(TLAccountUpdateUsername)
		case TagAccountGetPrivacy:
			return new(TLAccountGetPrivacy)
		case TagAccountSetPrivacy:
			return new(TLAccountSetPrivacy)
		case TagAccountDeleteAccount:
			return new(TLAccountDeleteAccount)
		case TagAccountGetAccountTTL:
			return new(TLAccountGetAccountTTL)
		case TagAccountSetAccountTTL:
			return new(TLAccountSetAccountTTL)
		case TagAccountSendChangePhoneCode:
			return new(TLAccountSendChangePhoneCode)
		case TagAccountChangePhone:
			return new(TLAccountChangePhone)
		case TagAccountUpdateDeviceLocked:
			return new(TLAccountUpdateDeviceLocked)
		case TagAccountGetAuthorizations:
			return new(TLAccountGetAuthorizations)
		case TagAccountResetAuthorization:
			return new(TLAccountResetAuthorization)
		case TagAccountGetPassword:
			return new(TLAccountGetPassword)
		case TagAccountGetPasswordSettings:
			return new(TLAccountGetPasswordSettings)
		case TagAccountUpdatePasswordSettings:
			return new(TLAccountUpdatePasswordSettings)
		case TagAccountSendConfirmPhoneCode:
			return new(TLAccountSendConfirmPhoneCode)
		case TagAccountConfirmPhone:
			return new(TLAccountConfirmPhone)
		case TagAccountGetTmpPassword:
			return new(TLAccountGetTmpPassword)
		case TagUsersGetUsers:
			return new(TLUsersGetUsers)
		case TagUsersGetFullUser:
			return new(TLUsersGetFullUser)
		case TagContactsGetStatuses:
			return new(TLContactsGetStatuses)
		case TagContactsGetContacts:
			return new(TLContactsGetContacts)
		case TagContactsImportContacts:
			return new(TLContactsImportContacts)
		case TagContactsDeleteContact:
			return new(TLContactsDeleteContact)
		case TagContactsDeleteContacts:
			return new(TLContactsDeleteContacts)
		case TagContactsBlock:
			return new(TLContactsBlock)
		case TagContactsUnblock:
			return new(TLContactsUnblock)
		case TagContactsGetBlocked:
			return new(TLContactsGetBlocked)
		case TagContactsExportCard:
			return new(TLContactsExportCard)
		case TagContactsImportCard:
			return new(TLContactsImportCard)
		case TagContactsSearch:
			return new(TLContactsSearch)
		case TagContactsResolveUsername:
			return new(TLContactsResolveUsername)
		case TagContactsGetTopPeers:
			return new(TLContactsGetTopPeers)
		case TagContactsResetTopPeerRating:
			return new(TLContactsResetTopPeerRating)
		case TagMessagesGetMessages:
			return new(TLMessagesGetMessages)
		case TagMessagesGetDialogs:
			return new(TLMessagesGetDialogs)
		case TagMessagesGetHistory:
			return new(TLMessagesGetHistory)
		case TagMessagesSearch:
			return new(TLMessagesSearch)
		case TagMessagesReadHistory:
			return new(TLMessagesReadHistory)
		case TagMessagesDeleteHistory:
			return new(TLMessagesDeleteHistory)
		case TagMessagesDeleteMessages:
			return new(TLMessagesDeleteMessages)
		case TagMessagesReceivedMessages:
			return new(TLMessagesReceivedMessages)
		case TagMessagesSetTyping:
			return new(TLMessagesSetTyping)
		case TagMessagesSendMessage:
			return new(TLMessagesSendMessage)
		case TagMessagesSendMedia:
			return new(TLMessagesSendMedia)
		case TagMessagesForwardMessages:
			return new(TLMessagesForwardMessages)
		case TagMessagesReportSpam:
			return new(TLMessagesReportSpam)
		case TagMessagesHideReportSpam:
			return new(TLMessagesHideReportSpam)
		case TagMessagesGetPeerSettings:
			return new(TLMessagesGetPeerSettings)
		case TagMessagesGetChats:
			return new(TLMessagesGetChats)
		case TagMessagesGetFullChat:
			return new(TLMessagesGetFullChat)
		case TagMessagesEditChatTitle:
			return new(TLMessagesEditChatTitle)
		case TagMessagesEditChatPhoto:
			return new(TLMessagesEditChatPhoto)
		case TagMessagesAddChatUser:
			return new(TLMessagesAddChatUser)
		case TagMessagesDeleteChatUser:
			return new(TLMessagesDeleteChatUser)
		case TagMessagesCreateChat:
			return new(TLMessagesCreateChat)
		case TagMessagesForwardMessage:
			return new(TLMessagesForwardMessage)
		case TagMessagesGetDHConfig:
			return new(TLMessagesGetDHConfig)
		case TagMessagesRequestEncryption:
			return new(TLMessagesRequestEncryption)
		case TagMessagesAcceptEncryption:
			return new(TLMessagesAcceptEncryption)
		case TagMessagesDiscardEncryption:
			return new(TLMessagesDiscardEncryption)
		case TagMessagesSetEncryptedTyping:
			return new(TLMessagesSetEncryptedTyping)
		case TagMessagesReadEncryptedHistory:
			return new(TLMessagesReadEncryptedHistory)
		case TagMessagesSendEncrypted:
			return new(TLMessagesSendEncrypted)
		case TagMessagesSendEncryptedFile:
			return new(TLMessagesSendEncryptedFile)
		case TagMessagesSendEncryptedService:
			return new(TLMessagesSendEncryptedService)
		case TagMessagesReceivedQueue:
			return new(TLMessagesReceivedQueue)
		case TagMessagesReportEncryptedSpam:
			return new(TLMessagesReportEncryptedSpam)
		case TagMessagesReadMessageContents:
			return new(TLMessagesReadMessageContents)
		case TagMessagesGetAllStickers:
			return new(TLMessagesGetAllStickers)
		case TagMessagesGetWebPagePreview:
			return new(TLMessagesGetWebPagePreview)
		case TagMessagesExportChatInvite:
			return new(TLMessagesExportChatInvite)
		case TagMessagesCheckChatInvite:
			return new(TLMessagesCheckChatInvite)
		case TagMessagesImportChatInvite:
			return new(TLMessagesImportChatInvite)
		case TagMessagesGetStickerSet:
			return new(TLMessagesGetStickerSet)
		case TagMessagesInstallStickerSet:
			return new(TLMessagesInstallStickerSet)
		case TagMessagesUninstallStickerSet:
			return new(TLMessagesUninstallStickerSet)
		case TagMessagesStartBot:
			return new(TLMessagesStartBot)
		case TagMessagesGetMessagesViews:
			return new(TLMessagesGetMessagesViews)
		case TagMessagesToggleChatAdmins:
			return new(TLMessagesToggleChatAdmins)
		case TagMessagesEditChatAdmin:
			return new(TLMessagesEditChatAdmin)
		case TagMessagesMigrateChat:
			return new(TLMessagesMigrateChat)
		case TagMessagesSearchGlobal:
			return new(TLMessagesSearchGlobal)
		case TagMessagesReorderStickerSets:
			return new(TLMessagesReorderStickerSets)
		case TagMessagesGetDocumentByHash:
			return new(TLMessagesGetDocumentByHash)
		case TagMessagesSearchGifs:
			return new(TLMessagesSearchGifs)
		case TagMessagesGetSavedGifs:
			return new(TLMessagesGetSavedGifs)
		case TagMessagesSaveGif:
			return new(TLMessagesSaveGif)
		case TagMessagesGetInlineBotResults:
			return new(TLMessagesGetInlineBotResults)
		case TagMessagesSetInlineBotResults:
			return new(TLMessagesSetInlineBotResults)
		case TagMessagesSendInlineBotResult:
			return new(TLMessagesSendInlineBotResult)
		case TagMessagesGetMessageEditData:
			return new(TLMessagesGetMessageEditData)
		case TagMessagesEditMessage:
			return new(TLMessagesEditMessage)
		case TagMessagesEditInlineBotMessage:
			return new(TLMessagesEditInlineBotMessage)
		case TagMessagesGetBotCallbackAnswer:
			return new(TLMessagesGetBotCallbackAnswer)
		case TagMessagesSetBotCallbackAnswer:
			return new(TLMessagesSetBotCallbackAnswer)
		case TagMessagesGetPeerDialogs:
			return new(TLMessagesGetPeerDialogs)
		case TagMessagesSaveDraft:
			return new(TLMessagesSaveDraft)
		case TagMessagesGetAllDrafts:
			return new(TLMessagesGetAllDrafts)
		case TagMessagesGetFeaturedStickers:
			return new(TLMessagesGetFeaturedStickers)
		case TagMessagesReadFeaturedStickers:
			return new(TLMessagesReadFeaturedStickers)
		case TagMessagesGetRecentStickers:
			return new(TLMessagesGetRecentStickers)
		case TagMessagesSaveRecentSticker:
			return new(TLMessagesSaveRecentSticker)
		case TagMessagesClearRecentStickers:
			return new(TLMessagesClearRecentStickers)
		case TagMessagesGetArchivedStickers:
			return new(TLMessagesGetArchivedStickers)
		case TagMessagesGetMaskStickers:
			return new(TLMessagesGetMaskStickers)
		case TagMessagesGetAttachedStickers:
			return new(TLMessagesGetAttachedStickers)
		case TagMessagesSetGameScore:
			return new(TLMessagesSetGameScore)
		case TagMessagesSetInlineGameScore:
			return new(TLMessagesSetInlineGameScore)
		case TagMessagesGetGameHighScores:
			return new(TLMessagesGetGameHighScores)
		case TagMessagesGetInlineGameHighScores:
			return new(TLMessagesGetInlineGameHighScores)
		case TagMessagesGetCommonChats:
			return new(TLMessagesGetCommonChats)
		case TagMessagesGetAllChats:
			return new(TLMessagesGetAllChats)
		case TagMessagesGetWebPage:
			return new(TLMessagesGetWebPage)
		case TagMessagesToggleDialogPin:
			return new(TLMessagesToggleDialogPin)
		case TagMessagesReorderPinnedDialogs:
			return new(TLMessagesReorderPinnedDialogs)
		case TagMessagesGetPinnedDialogs:
			return new(TLMessagesGetPinnedDialogs)
		case TagMessagesSetBotShippingResults:
			return new(TLMessagesSetBotShippingResults)
		case TagMessagesSetBotPrecheckoutResults:
			return new(TLMessagesSetBotPrecheckoutResults)
		case TagUpdatesGetState:
			return new(TLUpdatesGetState)
		case TagUpdatesGetDifference:
			return new(TLUpdatesGetDifference)
		case TagUpdatesGetChannelDifference:
			return new(TLUpdatesGetChannelDifference)
		case TagPhotosUpdateProfilePhoto:
			return new(TLPhotosUpdateProfilePhoto)
		case TagPhotosUploadProfilePhoto:
			return new(TLPhotosUploadProfilePhoto)
		case TagPhotosDeletePhotos:
			return new(TLPhotosDeletePhotos)
		case TagPhotosGetUserPhotos:
			return new(TLPhotosGetUserPhotos)
		case TagUploadSaveFilePart:
			return new(TLUploadSaveFilePart)
		case TagUploadGetFile:
			return new(TLUploadGetFile)
		case TagUploadSaveBigFilePart:
			return new(TLUploadSaveBigFilePart)
		case TagUploadGetWebFile:
			return new(TLUploadGetWebFile)
		case TagHelpGetConfig:
			return new(TLHelpGetConfig)
		case TagHelpGetNearestDC:
			return new(TLHelpGetNearestDC)
		case TagHelpGetAppUpdate:
			return new(TLHelpGetAppUpdate)
		case TagHelpSaveAppLog:
			return new(TLHelpSaveAppLog)
		case TagHelpGetInviteText:
			return new(TLHelpGetInviteText)
		case TagHelpGetSupport:
			return new(TLHelpGetSupport)
		case TagHelpGetAppChangelog:
			return new(TLHelpGetAppChangelog)
		case TagHelpGetTermsOfService:
			return new(TLHelpGetTermsOfService)
		case TagHelpSetBotUpdatesStatus:
			return new(TLHelpSetBotUpdatesStatus)
		case TagChannelsReadHistory:
			return new(TLChannelsReadHistory)
		case TagChannelsDeleteMessages:
			return new(TLChannelsDeleteMessages)
		case TagChannelsDeleteUserHistory:
			return new(TLChannelsDeleteUserHistory)
		case TagChannelsReportSpam:
			return new(TLChannelsReportSpam)
		case TagChannelsGetMessages:
			return new(TLChannelsGetMessages)
		case TagChannelsGetParticipants:
			return new(TLChannelsGetParticipants)
		case TagChannelsGetParticipant:
			return new(TLChannelsGetParticipant)
		case TagChannelsGetChannels:
			return new(TLChannelsGetChannels)
		case TagChannelsGetFullChannel:
			return new(TLChannelsGetFullChannel)
		case TagChannelsCreateChannel:
			return new(TLChannelsCreateChannel)
		case TagChannelsEditAbout:
			return new(TLChannelsEditAbout)
		case TagChannelsEditAdmin:
			return new(TLChannelsEditAdmin)
		case TagChannelsEditTitle:
			return new(TLChannelsEditTitle)
		case TagChannelsEditPhoto:
			return new(TLChannelsEditPhoto)
		case TagChannelsCheckUsername:
			return new(TLChannelsCheckUsername)
		case TagChannelsUpdateUsername:
			return new(TLChannelsUpdateUsername)
		case TagChannelsJoinChannel:
			return new(TLChannelsJoinChannel)
		case TagChannelsLeaveChannel:
			return new(TLChannelsLeaveChannel)
		case TagChannelsInviteToChannel:
			return new(TLChannelsInviteToChannel)
		case TagChannelsKickFromChannel:
			return new(TLChannelsKickFromChannel)
		case TagChannelsExportInvite:
			return new(TLChannelsExportInvite)
		case TagChannelsDeleteChannel:
			return new(TLChannelsDeleteChannel)
		case TagChannelsToggleInvites:
			return new(TLChannelsToggleInvites)
		case TagChannelsExportMessageLink:
			return new(TLChannelsExportMessageLink)
		case TagChannelsToggleSignatures:
			return new(TLChannelsToggleSignatures)
		case TagChannelsUpdatePinnedMessage:
			return new(TLChannelsUpdatePinnedMessage)
		case TagChannelsGetAdminedPublicChannels:
			return new(TLChannelsGetAdminedPublicChannels)
		case TagBotsSendCustomRequest:
			return new(TLBotsSendCustomRequest)
		case TagBotsAnswerWebhookJSONQuery:
			return new(TLBotsAnswerWebhookJSONQuery)
		case TagPaymentsGetPaymentForm:
			return new(TLPaymentsGetPaymentForm)
		case TagPaymentsGetPaymentReceipt:
			return new(TLPaymentsGetPaymentReceipt)
		case TagPaymentsValidateRequestedInfo:
			return new(TLPaymentsValidateRequestedInfo)
		case TagPaymentsSendPaymentForm:
			return new(TLPaymentsSendPaymentForm)
		case TagPaymentsGetSavedInfo:
			return new(TLPaymentsGetSavedInfo)
		case TagPaymentsClearSavedInfo:
			return new(TLPaymentsClearSavedInfo)
		case TagPhoneGetCallConfig:
			return new(TLPhoneGetCallConfig)
		case TagPhoneRequestCall:
			return new(TLPhoneRequestCall)
		case TagPhoneAcceptCall:
			return new(TLPhoneAcceptCall)
		case TagPhoneConfirmCall:
			return new(TLPhoneConfirmCall)
		case TagPhoneReceivedCall:
			return new(TLPhoneReceivedCall)
		case TagPhoneDiscardCall:
			return new(TLPhoneDiscardCall)
		case TagPhoneSetCallRating:
			return new(TLPhoneSetCallRating)
		case TagPhoneSaveCallDebug:
			return new(TLPhoneSaveCallDebug)
		case TagServerDHParamsFail:
			return new(TLServerDHParamsFail)
		case TagServerDHParamsOK:
			return new(TLServerDHParamsOK)
		case TagDHGenOK:
			return new(TLDHGenOK)
		case TagDHGenRetry:
			return new(TLDHGenRetry)
		case TagDHGenFail:
			return new(TLDHGenFail)
		case TagRPCAnswerUnknown:
			return new(TLRPCAnswerUnknown)
		case TagRPCAnswerDroppedRunning:
			return new(TLRPCAnswerDroppedRunning)
		case TagRPCAnswerDropped:
			return new(TLRPCAnswerDropped)
		case TagDestroySessionOK:
			return new(TLDestroySessionOK)
		case TagDestroySessionNone:
			return new(TLDestroySessionNone)
		case TagMessageEmpty:
			return new(TLMessageEmpty)
		case TagMessage:
			return new(TLMessage)
		case TagMessageService:
			return new(TLMessageService)
		case TagBadMsgNotification:
			return new(TLBadMsgNotification)
		case TagBadServerSalt:
			return new(TLBadServerSalt)
		case TagMsgDetailedInfo:
			return new(TLMsgDetailedInfo)
		case TagMsgNewDetailedInfo:
			return new(TLMsgNewDetailedInfo)
		case TagInputPeerEmpty:
			return new(TLInputPeerEmpty)
		case TagInputPeerSelf:
			return new(TLInputPeerSelf)
		case TagInputPeerChat:
			return new(TLInputPeerChat)
		case TagInputPeerUser:
			return new(TLInputPeerUser)
		case TagInputPeerChannel:
			return new(TLInputPeerChannel)
		case TagInputUserEmpty:
			return new(TLInputUserEmpty)
		case TagInputUserSelf:
			return new(TLInputUserSelf)
		case TagInputUser:
			return new(TLInputUser)
		case TagInputFile:
			return new(TLInputFile)
		case TagInputFileBig:
			return new(TLInputFileBig)
		case TagInputMediaEmpty:
			return new(TLInputMediaEmpty)
		case TagInputMediaUploadedPhoto:
			return new(TLInputMediaUploadedPhoto)
		case TagInputMediaPhoto:
			return new(TLInputMediaPhoto)
		case TagInputMediaGeoPoint:
			return new(TLInputMediaGeoPoint)
		case TagInputMediaContact:
			return new(TLInputMediaContact)
		case TagInputMediaUploadedDocument:
			return new(TLInputMediaUploadedDocument)
		case TagInputMediaUploadedThumbDocument:
			return new(TLInputMediaUploadedThumbDocument)
		case TagInputMediaDocument:
			return new(TLInputMediaDocument)
		case TagInputMediaVenue:
			return new(TLInputMediaVenue)
		case TagInputMediaGifExternal:
			return new(TLInputMediaGifExternal)
		case TagInputMediaPhotoExternal:
			return new(TLInputMediaPhotoExternal)
		case TagInputMediaDocumentExternal:
			return new(TLInputMediaDocumentExternal)
		case TagInputMediaGame:
			return new(TLInputMediaGame)
		case TagInputMediaInvoice:
			return new(TLInputMediaInvoice)
		case TagInputChatPhotoEmpty:
			return new(TLInputChatPhotoEmpty)
		case TagInputChatUploadedPhoto:
			return new(TLInputChatUploadedPhoto)
		case TagInputChatPhoto:
			return new(TLInputChatPhoto)
		case TagInputGeoPointEmpty:
			return new(TLInputGeoPointEmpty)
		case TagInputGeoPoint:
			return new(TLInputGeoPoint)
		case TagInputPhotoEmpty:
			return new(TLInputPhotoEmpty)
		case TagInputPhoto:
			return new(TLInputPhoto)
		case TagInputFileLocation:
			return new(TLInputFileLocation)
		case TagInputEncryptedFileLocation:
			return new(TLInputEncryptedFileLocation)
		case TagInputDocumentFileLocation:
			return new(TLInputDocumentFileLocation)
		case TagPeerUser:
			return new(TLPeerUser)
		case TagPeerChat:
			return new(TLPeerChat)
		case TagPeerChannel:
			return new(TLPeerChannel)
		case TagStorageFileUnknown:
			return new(TLStorageFileUnknown)
		case TagStorageFilePartial:
			return new(TLStorageFilePartial)
		case TagStorageFileJpeg:
			return new(TLStorageFileJpeg)
		case TagStorageFileGif:
			return new(TLStorageFileGif)
		case TagStorageFilePng:
			return new(TLStorageFilePng)
		case TagStorageFilePdf:
			return new(TLStorageFilePdf)
		case TagStorageFileMp3:
			return new(TLStorageFileMp3)
		case TagStorageFileMov:
			return new(TLStorageFileMov)
		case TagStorageFileMp4:
			return new(TLStorageFileMp4)
		case TagStorageFileWebp:
			return new(TLStorageFileWebp)
		case TagFileLocationUnavailable:
			return new(TLFileLocationUnavailable)
		case TagFileLocation:
			return new(TLFileLocation)
		case TagUserEmpty:
			return new(TLUserEmpty)
		case TagUser:
			return new(TLUser)
		case TagUserProfilePhotoEmpty:
			return new(TLUserProfilePhotoEmpty)
		case TagUserProfilePhoto:
			return new(TLUserProfilePhoto)
		case TagUserStatusEmpty:
			return new(TLUserStatusEmpty)
		case TagUserStatusOnline:
			return new(TLUserStatusOnline)
		case TagUserStatusOffline:
			return new(TLUserStatusOffline)
		case TagUserStatusRecently:
			return new(TLUserStatusRecently)
		case TagUserStatusLastWeek:
			return new(TLUserStatusLastWeek)
		case TagUserStatusLastMonth:
			return new(TLUserStatusLastMonth)
		case TagChatEmpty:
			return new(TLChatEmpty)
		case TagChat:
			return new(TLChat)
		case TagChatForbidden:
			return new(TLChatForbidden)
		case TagChannel:
			return new(TLChannel)
		case TagChannelForbidden:
			return new(TLChannelForbidden)
		case TagChatFull:
			return new(TLChatFull)
		case TagChannelFull:
			return new(TLChannelFull)
		case TagChatParticipant:
			return new(TLChatParticipant)
		case TagChatParticipantCreator:
			return new(TLChatParticipantCreator)
		case TagChatParticipantAdmin:
			return new(TLChatParticipantAdmin)
		case TagChatParticipantsForbidden:
			return new(TLChatParticipantsForbidden)
		case TagChatParticipants:
			return new(TLChatParticipants)
		case TagChatPhotoEmpty:
			return new(TLChatPhotoEmpty)
		case TagChatPhoto:
			return new(TLChatPhoto)
		case TagMessageMediaEmpty:
			return new(TLMessageMediaEmpty)
		case TagMessageMediaPhoto:
			return new(TLMessageMediaPhoto)
		case TagMessageMediaGeo:
			return new(TLMessageMediaGeo)
		case TagMessageMediaContact:
			return new(TLMessageMediaContact)
		case TagMessageMediaUnsupported:
			return new(TLMessageMediaUnsupported)
		case TagMessageMediaDocument:
			return new(TLMessageMediaDocument)
		case TagMessageMediaWebPage:
			return new(TLMessageMediaWebPage)
		case TagMessageMediaVenue:
			return new(TLMessageMediaVenue)
		case TagMessageMediaGame:
			return new(TLMessageMediaGame)
		case TagMessageMediaInvoice:
			return new(TLMessageMediaInvoice)
		case TagMessageActionEmpty:
			return new(TLMessageActionEmpty)
		case TagMessageActionChatCreate:
			return new(TLMessageActionChatCreate)
		case TagMessageActionChatEditTitle:
			return new(TLMessageActionChatEditTitle)
		case TagMessageActionChatEditPhoto:
			return new(TLMessageActionChatEditPhoto)
		case TagMessageActionChatDeletePhoto:
			return new(TLMessageActionChatDeletePhoto)
		case TagMessageActionChatAddUser:
			return new(TLMessageActionChatAddUser)
		case TagMessageActionChatDeleteUser:
			return new(TLMessageActionChatDeleteUser)
		case TagMessageActionChatJoinedByLink:
			return new(TLMessageActionChatJoinedByLink)
		case TagMessageActionChannelCreate:
			return new(TLMessageActionChannelCreate)
		case TagMessageActionChatMigrateTo:
			return new(TLMessageActionChatMigrateTo)
		case TagMessageActionChannelMigrateFrom:
			return new(TLMessageActionChannelMigrateFrom)
		case TagMessageActionPinMessage:
			return new(TLMessageActionPinMessage)
		case TagMessageActionHistoryClear:
			return new(TLMessageActionHistoryClear)
		case TagMessageActionGameScore:
			return new(TLMessageActionGameScore)
		case TagMessageActionPaymentSentMe:
			return new(TLMessageActionPaymentSentMe)
		case TagMessageActionPaymentSent:
			return new(TLMessageActionPaymentSent)
		case TagMessageActionPhoneCall:
			return new(TLMessageActionPhoneCall)
		case TagPeerNotifySettingsEmpty:
			return new(TLPeerNotifySettingsEmpty)
		case TagPeerNotifySettings:
			return new(TLPeerNotifySettings)
		case TagDraftMessageEmpty:
			return new(TLDraftMessageEmpty)
		case TagDraftMessage:
			return new(TLDraftMessage)
		case TagPhotoEmpty:
			return new(TLPhotoEmpty)
		case TagPhoto:
			return new(TLPhoto)
		case TagPhotoSizeEmpty:
			return new(TLPhotoSizeEmpty)
		case TagPhotoSize:
			return new(TLPhotoSize)
		case TagPhotoCachedSize:
			return new(TLPhotoCachedSize)
		case TagGeoPointEmpty:
			return new(TLGeoPointEmpty)
		case TagGeoPoint:
			return new(TLGeoPoint)
		case TagAuthSentCodeTypeApp:
			return new(TLAuthSentCodeTypeApp)
		case TagAuthSentCodeTypeSms:
			return new(TLAuthSentCodeTypeSms)
		case TagAuthSentCodeTypeCall:
			return new(TLAuthSentCodeTypeCall)
		case TagAuthSentCodeTypeFlashCall:
			return new(TLAuthSentCodeTypeFlashCall)
		case TagAuthCodeTypeSms:
			return new(TLAuthCodeTypeSms)
		case TagAuthCodeTypeCall:
			return new(TLAuthCodeTypeCall)
		case TagAuthCodeTypeFlashCall:
			return new(TLAuthCodeTypeFlashCall)
		case TagInputNotifyPeer:
			return new(TLInputNotifyPeer)
		case TagInputNotifyUsers:
			return new(TLInputNotifyUsers)
		case TagInputNotifyChats:
			return new(TLInputNotifyChats)
		case TagInputNotifyAll:
			return new(TLInputNotifyAll)
		case TagInputPeerNotifyEventsEmpty:
			return new(TLInputPeerNotifyEventsEmpty)
		case TagInputPeerNotifyEventsAll:
			return new(TLInputPeerNotifyEventsAll)
		case TagPeerNotifyEventsEmpty:
			return new(TLPeerNotifyEventsEmpty)
		case TagPeerNotifyEventsAll:
			return new(TLPeerNotifyEventsAll)
		case TagWallPaper:
			return new(TLWallPaper)
		case TagWallPaperSolid:
			return new(TLWallPaperSolid)
		case TagInputReportReasonSpam:
			return new(TLInputReportReasonSpam)
		case TagInputReportReasonViolence:
			return new(TLInputReportReasonViolence)
		case TagInputReportReasonPornography:
			return new(TLInputReportReasonPornography)
		case TagInputReportReasonOther:
			return new(TLInputReportReasonOther)
		case TagContactLinkUnknown:
			return new(TLContactLinkUnknown)
		case TagContactLinkNone:
			return new(TLContactLinkNone)
		case TagContactLinkHasPhone:
			return new(TLContactLinkHasPhone)
		case TagContactLinkContact:
			return new(TLContactLinkContact)
		case TagContactsContactsNotModified:
			return new(TLContactsContactsNotModified)
		case TagContactsContacts:
			return new(TLContactsContacts)
		case TagContactsBlocked:
			return new(TLContactsBlocked)
		case TagContactsBlockedSlice:
			return new(TLContactsBlockedSlice)
		case TagMessagesDialogs:
			return new(TLMessagesDialogs)
		case TagMessagesDialogsSlice:
			return new(TLMessagesDialogsSlice)
		case TagMessagesMessages:
			return new(TLMessagesMessages)
		case TagMessagesMessagesSlice:
			return new(TLMessagesMessagesSlice)
		case TagMessagesChannelMessages:
			return new(TLMessagesChannelMessages)
		case TagMessagesChats:
			return new(TLMessagesChats)
		case TagMessagesChatsSlice:
			return new(TLMessagesChatsSlice)
		case TagInputMessagesFilterEmpty:
			return new(TLInputMessagesFilterEmpty)
		case TagInputMessagesFilterPhotos:
			return new(TLInputMessagesFilterPhotos)
		case TagInputMessagesFilterVideo:
			return new(TLInputMessagesFilterVideo)
		case TagInputMessagesFilterPhotoVideo:
			return new(TLInputMessagesFilterPhotoVideo)
		case TagInputMessagesFilterPhotoVideoDocuments:
			return new(TLInputMessagesFilterPhotoVideoDocuments)
		case TagInputMessagesFilterDocument:
			return new(TLInputMessagesFilterDocument)
		case TagInputMessagesFilterUrl:
			return new(TLInputMessagesFilterUrl)
		case TagInputMessagesFilterGif:
			return new(TLInputMessagesFilterGif)
		case TagInputMessagesFilterVoice:
			return new(TLInputMessagesFilterVoice)
		case TagInputMessagesFilterMusic:
			return new(TLInputMessagesFilterMusic)
		case TagInputMessagesFilterChatPhotos:
			return new(TLInputMessagesFilterChatPhotos)
		case TagInputMessagesFilterPhoneCalls:
			return new(TLInputMessagesFilterPhoneCalls)
		case TagUpdateNewMessage:
			return new(TLUpdateNewMessage)
		case TagUpdateMessageID:
			return new(TLUpdateMessageID)
		case TagUpdateDeleteMessages:
			return new(TLUpdateDeleteMessages)
		case TagUpdateUserTyping:
			return new(TLUpdateUserTyping)
		case TagUpdateChatUserTyping:
			return new(TLUpdateChatUserTyping)
		case TagUpdateChatParticipants:
			return new(TLUpdateChatParticipants)
		case TagUpdateUserStatus:
			return new(TLUpdateUserStatus)
		case TagUpdateUserName:
			return new(TLUpdateUserName)
		case TagUpdateUserPhoto:
			return new(TLUpdateUserPhoto)
		case TagUpdateContactRegistered:
			return new(TLUpdateContactRegistered)
		case TagUpdateContactLink:
			return new(TLUpdateContactLink)
		case TagUpdateNewEncryptedMessage:
			return new(TLUpdateNewEncryptedMessage)
		case TagUpdateEncryptedChatTyping:
			return new(TLUpdateEncryptedChatTyping)
		case TagUpdateEncryption:
			return new(TLUpdateEncryption)
		case TagUpdateEncryptedMessagesRead:
			return new(TLUpdateEncryptedMessagesRead)
		case TagUpdateChatParticipantAdd:
			return new(TLUpdateChatParticipantAdd)
		case TagUpdateChatParticipantDelete:
			return new(TLUpdateChatParticipantDelete)
		case TagUpdateDCOptions:
			return new(TLUpdateDCOptions)
		case TagUpdateUserBlocked:
			return new(TLUpdateUserBlocked)
		case TagUpdateNotifySettings:
			return new(TLUpdateNotifySettings)
		case TagUpdateServiceNotification:
			return new(TLUpdateServiceNotification)
		case TagUpdatePrivacy:
			return new(TLUpdatePrivacy)
		case TagUpdateUserPhone:
			return new(TLUpdateUserPhone)
		case TagUpdateReadHistoryInbox:
			return new(TLUpdateReadHistoryInbox)
		case TagUpdateReadHistoryOutbox:
			return new(TLUpdateReadHistoryOutbox)
		case TagUpdateWebPage:
			return new(TLUpdateWebPage)
		case TagUpdateReadMessagesContents:
			return new(TLUpdateReadMessagesContents)
		case TagUpdateChannelTooLong:
			return new(TLUpdateChannelTooLong)
		case TagUpdateChannel:
			return new(TLUpdateChannel)
		case TagUpdateNewChannelMessage:
			return new(TLUpdateNewChannelMessage)
		case TagUpdateReadChannelInbox:
			return new(TLUpdateReadChannelInbox)
		case TagUpdateDeleteChannelMessages:
			return new(TLUpdateDeleteChannelMessages)
		case TagUpdateChannelMessageViews:
			return new(TLUpdateChannelMessageViews)
		case TagUpdateChatAdmins:
			return new(TLUpdateChatAdmins)
		case TagUpdateChatParticipantAdmin:
			return new(TLUpdateChatParticipantAdmin)
		case TagUpdateNewStickerSet:
			return new(TLUpdateNewStickerSet)
		case TagUpdateStickerSetsOrder:
			return new(TLUpdateStickerSetsOrder)
		case TagUpdateStickerSets:
			return new(TLUpdateStickerSets)
		case TagUpdateSavedGifs:
			return new(TLUpdateSavedGifs)
		case TagUpdateBotInlineQuery:
			return new(TLUpdateBotInlineQuery)
		case TagUpdateBotInlineSend:
			return new(TLUpdateBotInlineSend)
		case TagUpdateEditChannelMessage:
			return new(TLUpdateEditChannelMessage)
		case TagUpdateChannelPinnedMessage:
			return new(TLUpdateChannelPinnedMessage)
		case TagUpdateBotCallbackQuery:
			return new(TLUpdateBotCallbackQuery)
		case TagUpdateEditMessage:
			return new(TLUpdateEditMessage)
		case TagUpdateInlineBotCallbackQuery:
			return new(TLUpdateInlineBotCallbackQuery)
		case TagUpdateReadChannelOutbox:
			return new(TLUpdateReadChannelOutbox)
		case TagUpdateDraftMessage:
			return new(TLUpdateDraftMessage)
		case TagUpdateReadFeaturedStickers:
			return new(TLUpdateReadFeaturedStickers)
		case TagUpdateRecentStickers:
			return new(TLUpdateRecentStickers)
		case TagUpdateConfig:
			return new(TLUpdateConfig)
		case TagUpdatePtsChanged:
			return new(TLUpdatePtsChanged)
		case TagUpdateChannelWebPage:
			return new(TLUpdateChannelWebPage)
		case TagUpdateDialogPinned:
			return new(TLUpdateDialogPinned)
		case TagUpdatePinnedDialogs:
			return new(TLUpdatePinnedDialogs)
		case TagUpdateBotWebhookJSON:
			return new(TLUpdateBotWebhookJSON)
		case TagUpdateBotWebhookJSONQuery:
			return new(TLUpdateBotWebhookJSONQuery)
		case TagUpdateBotShippingQuery:
			return new(TLUpdateBotShippingQuery)
		case TagUpdateBotPrecheckoutQuery:
			return new(TLUpdateBotPrecheckoutQuery)
		case TagUpdatePhoneCall:
			return new(TLUpdatePhoneCall)
		case TagUpdatesDifferenceEmpty:
			return new(TLUpdatesDifferenceEmpty)
		case TagUpdatesDifference:
			return new(TLUpdatesDifference)
		case TagUpdatesDifferenceSlice:
			return new(TLUpdatesDifferenceSlice)
		case TagUpdatesDifferenceTooLong:
			return new(TLUpdatesDifferenceTooLong)
		case TagUpdatesTooLong:
			return new(TLUpdatesTooLong)
		case TagUpdateShortMessage:
			return new(TLUpdateShortMessage)
		case TagUpdateShortChatMessage:
			return new(TLUpdateShortChatMessage)
		case TagUpdateShort:
			return new(TLUpdateShort)
		case TagUpdatesCombined:
			return new(TLUpdatesCombined)
		case TagUpdates:
			return new(TLUpdates)
		case TagUpdateShortSentMessage:
			return new(TLUpdateShortSentMessage)
		case TagPhotosPhotos:
			return new(TLPhotosPhotos)
		case TagPhotosPhotosSlice:
			return new(TLPhotosPhotosSlice)
		case TagHelpAppUpdate:
			return new(TLHelpAppUpdate)
		case TagHelpNoAppUpdate:
			return new(TLHelpNoAppUpdate)
		case TagEncryptedChatEmpty:
			return new(TLEncryptedChatEmpty)
		case TagEncryptedChatWaiting:
			return new(TLEncryptedChatWaiting)
		case TagEncryptedChatRequested:
			return new(TLEncryptedChatRequested)
		case TagEncryptedChat:
			return new(TLEncryptedChat)
		case TagEncryptedChatDiscarded:
			return new(TLEncryptedChatDiscarded)
		case TagEncryptedFileEmpty:
			return new(TLEncryptedFileEmpty)
		case TagEncryptedFile:
			return new(TLEncryptedFile)
		case TagInputEncryptedFileEmpty:
			return new(TLInputEncryptedFileEmpty)
		case TagInputEncryptedFileUploaded:
			return new(TLInputEncryptedFileUploaded)
		case TagInputEncryptedFile:
			return new(TLInputEncryptedFile)
		case TagInputEncryptedFileBigUploaded:
			return new(TLInputEncryptedFileBigUploaded)
		case TagEncryptedMessage:
			return new(TLEncryptedMessage)
		case TagEncryptedMessageService:
			return new(TLEncryptedMessageService)
		case TagMessagesDHConfigNotModified:
			return new(TLMessagesDHConfigNotModified)
		case TagMessagesDHConfig:
			return new(TLMessagesDHConfig)
		case TagMessagesSentEncryptedMessage:
			return new(TLMessagesSentEncryptedMessage)
		case TagMessagesSentEncryptedFile:
			return new(TLMessagesSentEncryptedFile)
		case TagInputDocumentEmpty:
			return new(TLInputDocumentEmpty)
		case TagInputDocument:
			return new(TLInputDocument)
		case TagDocumentEmpty:
			return new(TLDocumentEmpty)
		case TagDocument:
			return new(TLDocument)
		case TagNotifyPeer:
			return new(TLNotifyPeer)
		case TagNotifyUsers:
			return new(TLNotifyUsers)
		case TagNotifyChats:
			return new(TLNotifyChats)
		case TagNotifyAll:
			return new(TLNotifyAll)
		case TagSendMessageTypingAction:
			return new(TLSendMessageTypingAction)
		case TagSendMessageCancelAction:
			return new(TLSendMessageCancelAction)
		case TagSendMessageRecordVideoAction:
			return new(TLSendMessageRecordVideoAction)
		case TagSendMessageUploadVideoAction:
			return new(TLSendMessageUploadVideoAction)
		case TagSendMessageRecordAudioAction:
			return new(TLSendMessageRecordAudioAction)
		case TagSendMessageUploadAudioAction:
			return new(TLSendMessageUploadAudioAction)
		case TagSendMessageUploadPhotoAction:
			return new(TLSendMessageUploadPhotoAction)
		case TagSendMessageUploadDocumentAction:
			return new(TLSendMessageUploadDocumentAction)
		case TagSendMessageGeoLocationAction:
			return new(TLSendMessageGeoLocationAction)
		case TagSendMessageChooseContactAction:
			return new(TLSendMessageChooseContactAction)
		case TagSendMessageGamePlayAction:
			return new(TLSendMessageGamePlayAction)
		case TagInputPrivacyKeyStatusTimestamp:
			return new(TLInputPrivacyKeyStatusTimestamp)
		case TagInputPrivacyKeyChatInvite:
			return new(TLInputPrivacyKeyChatInvite)
		case TagInputPrivacyKeyPhoneCall:
			return new(TLInputPrivacyKeyPhoneCall)
		case TagPrivacyKeyStatusTimestamp:
			return new(TLPrivacyKeyStatusTimestamp)
		case TagPrivacyKeyChatInvite:
			return new(TLPrivacyKeyChatInvite)
		case TagPrivacyKeyPhoneCall:
			return new(TLPrivacyKeyPhoneCall)
		case TagInputPrivacyValueAllowContacts:
			return new(TLInputPrivacyValueAllowContacts)
		case TagInputPrivacyValueAllowAll:
			return new(TLInputPrivacyValueAllowAll)
		case TagInputPrivacyValueAllowUsers:
			return new(TLInputPrivacyValueAllowUsers)
		case TagInputPrivacyValueDisallowContacts:
			return new(TLInputPrivacyValueDisallowContacts)
		case TagInputPrivacyValueDisallowAll:
			return new(TLInputPrivacyValueDisallowAll)
		case TagInputPrivacyValueDisallowUsers:
			return new(TLInputPrivacyValueDisallowUsers)
		case TagPrivacyValueAllowContacts:
			return new(TLPrivacyValueAllowContacts)
		case TagPrivacyValueAllowAll:
			return new(TLPrivacyValueAllowAll)
		case TagPrivacyValueAllowUsers:
			return new(TLPrivacyValueAllowUsers)
		case TagPrivacyValueDisallowContacts:
			return new(TLPrivacyValueDisallowContacts)
		case TagPrivacyValueDisallowAll:
			return new(TLPrivacyValueDisallowAll)
		case TagPrivacyValueDisallowUsers:
			return new(TLPrivacyValueDisallowUsers)
		case TagDocumentAttributeImageSize:
			return new(TLDocumentAttributeImageSize)
		case TagDocumentAttributeAnimated:
			return new(TLDocumentAttributeAnimated)
		case TagDocumentAttributeSticker:
			return new(TLDocumentAttributeSticker)
		case TagDocumentAttributeVideo:
			return new(TLDocumentAttributeVideo)
		case TagDocumentAttributeAudio:
			return new(TLDocumentAttributeAudio)
		case TagDocumentAttributeFilename:
			return new(TLDocumentAttributeFilename)
		case TagDocumentAttributeHasStickers:
			return new(TLDocumentAttributeHasStickers)
		case TagMessagesStickersNotModified:
			return new(TLMessagesStickersNotModified)
		case TagMessagesStickers:
			return new(TLMessagesStickers)
		case TagMessagesAllStickersNotModified:
			return new(TLMessagesAllStickersNotModified)
		case TagMessagesAllStickers:
			return new(TLMessagesAllStickers)
		case TagWebPageEmpty:
			return new(TLWebPageEmpty)
		case TagWebPagePending:
			return new(TLWebPagePending)
		case TagWebPage:
			return new(TLWebPage)
		case TagWebPageNotModified:
			return new(TLWebPageNotModified)
		case TagAccountNoPassword:
			return new(TLAccountNoPassword)
		case TagAccountPassword:
			return new(TLAccountPassword)
		case TagChatInviteEmpty:
			return new(TLChatInviteEmpty)
		case TagChatInviteExported:
			return new(TLChatInviteExported)
		case TagChatInviteAlready:
			return new(TLChatInviteAlready)
		case TagChatInvite:
			return new(TLChatInvite)
		case TagInputStickerSetEmpty:
			return new(TLInputStickerSetEmpty)
		case TagInputStickerSetID:
			return new(TLInputStickerSetID)
		case TagInputStickerSetShortName:
			return new(TLInputStickerSetShortName)
		case TagKeyboardButton:
			return new(TLKeyboardButton)
		case TagKeyboardButtonUrl:
			return new(TLKeyboardButtonUrl)
		case TagKeyboardButtonCallback:
			return new(TLKeyboardButtonCallback)
		case TagKeyboardButtonRequestPhone:
			return new(TLKeyboardButtonRequestPhone)
		case TagKeyboardButtonRequestGeoLocation:
			return new(TLKeyboardButtonRequestGeoLocation)
		case TagKeyboardButtonSwitchInline:
			return new(TLKeyboardButtonSwitchInline)
		case TagKeyboardButtonGame:
			return new(TLKeyboardButtonGame)
		case TagKeyboardButtonBuy:
			return new(TLKeyboardButtonBuy)
		case TagReplyKeyboardHide:
			return new(TLReplyKeyboardHide)
		case TagReplyKeyboardForceReply:
			return new(TLReplyKeyboardForceReply)
		case TagReplyKeyboardMarkup:
			return new(TLReplyKeyboardMarkup)
		case TagReplyInlineMarkup:
			return new(TLReplyInlineMarkup)
		case TagMessageEntityUnknown:
			return new(TLMessageEntityUnknown)
		case TagMessageEntityMention:
			return new(TLMessageEntityMention)
		case TagMessageEntityHashtag:
			return new(TLMessageEntityHashtag)
		case TagMessageEntityBotCommand:
			return new(TLMessageEntityBotCommand)
		case TagMessageEntityUrl:
			return new(TLMessageEntityUrl)
		case TagMessageEntityEmail:
			return new(TLMessageEntityEmail)
		case TagMessageEntityBold:
			return new(TLMessageEntityBold)
		case TagMessageEntityItalic:
			return new(TLMessageEntityItalic)
		case TagMessageEntityCode:
			return new(TLMessageEntityCode)
		case TagMessageEntityPre:
			return new(TLMessageEntityPre)
		case TagMessageEntityTextUrl:
			return new(TLMessageEntityTextUrl)
		case TagMessageEntityMentionName:
			return new(TLMessageEntityMentionName)
		case TagInputMessageEntityMentionName:
			return new(TLInputMessageEntityMentionName)
		case TagInputChannelEmpty:
			return new(TLInputChannelEmpty)
		case TagInputChannel:
			return new(TLInputChannel)
		case TagUpdatesChannelDifferenceEmpty:
			return new(TLUpdatesChannelDifferenceEmpty)
		case TagUpdatesChannelDifferenceTooLong:
			return new(TLUpdatesChannelDifferenceTooLong)
		case TagUpdatesChannelDifference:
			return new(TLUpdatesChannelDifference)
		case TagChannelMessagesFilterEmpty:
			return new(TLChannelMessagesFilterEmpty)
		case TagChannelMessagesFilter:
			return new(TLChannelMessagesFilter)
		case TagChannelParticipant:
			return new(TLChannelParticipant)
		case TagChannelParticipantSelf:
			return new(TLChannelParticipantSelf)
		case TagChannelParticipantModerator:
			return new(TLChannelParticipantModerator)
		case TagChannelParticipantEditor:
			return new(TLChannelParticipantEditor)
		case TagChannelParticipantKicked:
			return new(TLChannelParticipantKicked)
		case TagChannelParticipantCreator:
			return new(TLChannelParticipantCreator)
		case TagChannelParticipantsRecent:
			return new(TLChannelParticipantsRecent)
		case TagChannelParticipantsAdmins:
			return new(TLChannelParticipantsAdmins)
		case TagChannelParticipantsKicked:
			return new(TLChannelParticipantsKicked)
		case TagChannelParticipantsBots:
			return new(TLChannelParticipantsBots)
		case TagChannelRoleEmpty:
			return new(TLChannelRoleEmpty)
		case TagChannelRoleModerator:
			return new(TLChannelRoleModerator)
		case TagChannelRoleEditor:
			return new(TLChannelRoleEditor)
		case TagFoundGif:
			return new(TLFoundGif)
		case TagFoundGifCached:
			return new(TLFoundGifCached)
		case TagMessagesSavedGifsNotModified:
			return new(TLMessagesSavedGifsNotModified)
		case TagMessagesSavedGifs:
			return new(TLMessagesSavedGifs)
		case TagInputBotInlineMessageMediaAuto:
			return new(TLInputBotInlineMessageMediaAuto)
		case TagInputBotInlineMessageText:
			return new(TLInputBotInlineMessageText)
		case TagInputBotInlineMessageMediaGeo:
			return new(TLInputBotInlineMessageMediaGeo)
		case TagInputBotInlineMessageMediaVenue:
			return new(TLInputBotInlineMessageMediaVenue)
		case TagInputBotInlineMessageMediaContact:
			return new(TLInputBotInlineMessageMediaContact)
		case TagInputBotInlineMessageGame:
			return new(TLInputBotInlineMessageGame)
		case TagInputBotInlineResult:
			return new(TLInputBotInlineResult)
		case TagInputBotInlineResultPhoto:
			return new(TLInputBotInlineResultPhoto)
		case TagInputBotInlineResultDocument:
			return new(TLInputBotInlineResultDocument)
		case TagInputBotInlineResultGame:
			return new(TLInputBotInlineResultGame)
		case TagBotInlineMessageMediaAuto:
			return new(TLBotInlineMessageMediaAuto)
		case TagBotInlineMessageText:
			return new(TLBotInlineMessageText)
		case TagBotInlineMessageMediaGeo:
			return new(TLBotInlineMessageMediaGeo)
		case TagBotInlineMessageMediaVenue:
			return new(TLBotInlineMessageMediaVenue)
		case TagBotInlineMessageMediaContact:
			return new(TLBotInlineMessageMediaContact)
		case TagBotInlineResult:
			return new(TLBotInlineResult)
		case TagBotInlineMediaResult:
			return new(TLBotInlineMediaResult)
		case TagTopPeerCategoryBotsPM:
			return new(TLTopPeerCategoryBotsPM)
		case TagTopPeerCategoryBotsInline:
			return new(TLTopPeerCategoryBotsInline)
		case TagTopPeerCategoryCorrespondents:
			return new(TLTopPeerCategoryCorrespondents)
		case TagTopPeerCategoryGroups:
			return new(TLTopPeerCategoryGroups)
		case TagTopPeerCategoryChannels:
			return new(TLTopPeerCategoryChannels)
		case TagContactsTopPeersNotModified:
			return new(TLContactsTopPeersNotModified)
		case TagContactsTopPeers:
			return new(TLContactsTopPeers)
		case TagMessagesFeaturedStickersNotModified:
			return new(TLMessagesFeaturedStickersNotModified)
		case TagMessagesFeaturedStickers:
			return new(TLMessagesFeaturedStickers)
		case TagMessagesRecentStickersNotModified:
			return new(TLMessagesRecentStickersNotModified)
		case TagMessagesRecentStickers:
			return new(TLMessagesRecentStickers)
		case TagMessagesStickerSetInstallResultSuccess:
			return new(TLMessagesStickerSetInstallResultSuccess)
		case TagMessagesStickerSetInstallResultArchive:
			return new(TLMessagesStickerSetInstallResultArchive)
		case TagStickerSetCovered:
			return new(TLStickerSetCovered)
		case TagStickerSetMultiCovered:
			return new(TLStickerSetMultiCovered)
		case TagInputStickeredMediaPhoto:
			return new(TLInputStickeredMediaPhoto)
		case TagInputStickeredMediaDocument:
			return new(TLInputStickeredMediaDocument)
		case TagInputGameID:
			return new(TLInputGameID)
		case TagInputGameShortName:
			return new(TLInputGameShortName)
		case TagTextEmpty:
			return new(TLTextEmpty)
		case TagTextPlain:
			return new(TLTextPlain)
		case TagTextBold:
			return new(TLTextBold)
		case TagTextItalic:
			return new(TLTextItalic)
		case TagTextUnderline:
			return new(TLTextUnderline)
		case TagTextStrike:
			return new(TLTextStrike)
		case TagTextFixed:
			return new(TLTextFixed)
		case TagTextUrl:
			return new(TLTextUrl)
		case TagTextEmail:
			return new(TLTextEmail)
		case TagTextConcat:
			return new(TLTextConcat)
		case TagPageBlockUnsupported:
			return new(TLPageBlockUnsupported)
		case TagPageBlockTitle:
			return new(TLPageBlockTitle)
		case TagPageBlockSubtitle:
			return new(TLPageBlockSubtitle)
		case TagPageBlockAuthorDate:
			return new(TLPageBlockAuthorDate)
		case TagPageBlockHeader:
			return new(TLPageBlockHeader)
		case TagPageBlockSubheader:
			return new(TLPageBlockSubheader)
		case TagPageBlockParagraph:
			return new(TLPageBlockParagraph)
		case TagPageBlockPreformatted:
			return new(TLPageBlockPreformatted)
		case TagPageBlockFooter:
			return new(TLPageBlockFooter)
		case TagPageBlockDivider:
			return new(TLPageBlockDivider)
		case TagPageBlockAnchor:
			return new(TLPageBlockAnchor)
		case TagPageBlockList:
			return new(TLPageBlockList)
		case TagPageBlockBlockquote:
			return new(TLPageBlockBlockquote)
		case TagPageBlockPullquote:
			return new(TLPageBlockPullquote)
		case TagPageBlockPhoto:
			return new(TLPageBlockPhoto)
		case TagPageBlockVideo:
			return new(TLPageBlockVideo)
		case TagPageBlockCover:
			return new(TLPageBlockCover)
		case TagPageBlockEmbed:
			return new(TLPageBlockEmbed)
		case TagPageBlockEmbedPost:
			return new(TLPageBlockEmbedPost)
		case TagPageBlockCollage:
			return new(TLPageBlockCollage)
		case TagPageBlockSlideshow:
			return new(TLPageBlockSlideshow)
		case TagPagePart:
			return new(TLPagePart)
		case TagPageFull:
			return new(TLPageFull)
		case TagPhoneCallDiscardReasonMissed:
			return new(TLPhoneCallDiscardReasonMissed)
		case TagPhoneCallDiscardReasonDisconnect:
			return new(TLPhoneCallDiscardReasonDisconnect)
		case TagPhoneCallDiscardReasonHangup:
			return new(TLPhoneCallDiscardReasonHangup)
		case TagPhoneCallDiscardReasonBusy:
			return new(TLPhoneCallDiscardReasonBusy)
		case TagPaymentsPaymentResult:
			return new(TLPaymentsPaymentResult)
		case TagPaymentsPaymentVerficationNeeded:
			return new(TLPaymentsPaymentVerficationNeeded)
		case TagInputPaymentCredentialsSaved:
			return new(TLInputPaymentCredentialsSaved)
		case TagInputPaymentCredentials:
			return new(TLInputPaymentCredentials)
		case TagPhoneCallEmpty:
			return new(TLPhoneCallEmpty)
		case TagPhoneCallWaiting:
			return new(TLPhoneCallWaiting)
		case TagPhoneCallRequested:
			return new(TLPhoneCallRequested)
		case TagPhoneCallAccepted:
			return new(TLPhoneCallAccepted)
		case TagPhoneCall:
			return new(TLPhoneCall)
		case TagPhoneCallDiscarded:
			return new(TLPhoneCallDiscarded)
		default:
			return nil
		}
	},
}
